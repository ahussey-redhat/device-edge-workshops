{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { ExpandableSection } from '../ExpandableSection';\nimport InProgressIcon from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport const MultipleFileUploadStatus = _a => {\n  var {\n      children,\n      className,\n      statusToggleText,\n      statusToggleIcon\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"statusToggleText\", \"statusToggleIcon\"]);\n  const [icon, setIcon] = React.useState();\n  const [isOpen, setIsOpen] = React.useState(true);\n  React.useEffect(() => {\n    switch (statusToggleIcon) {\n      case 'danger':\n        setIcon(React.createElement(TimesCircleIcon, null));\n        break;\n      case 'success':\n        setIcon(React.createElement(CheckCircleIcon, null));\n        break;\n      case 'inProgress':\n        setIcon(React.createElement(InProgressIcon, null));\n        break;\n      default:\n        setIcon(statusToggleIcon);\n    }\n  }, [statusToggleIcon]);\n  const toggle = React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusProgress\n  }, React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusProgressIcon\n  }, icon), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, statusToggleText));\n  const toggleExpandableSection = () => {\n    setIsOpen(!isOpen);\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.multipleFileUploadStatus, className)\n  }, props), React.createElement(ExpandableSection, {\n    toggleContent: toggle,\n    isExpanded: isOpen,\n    onToggle: toggleExpandableSection\n  }, React.createElement(\"ul\", {\n    className: \"pf-c-multiple-file-upload__status-list\"\n  }, children)));\n};\nMultipleFileUploadStatus.displayName = 'MultipleFileUploadStatus';","map":{"version":3,"names":["React","styles","css","ExpandableSection","InProgressIcon","CheckCircleIcon","TimesCircleIcon","MultipleFileUploadStatus","_a","children","className","statusToggleText","statusToggleIcon","props","__rest","icon","setIcon","useState","isOpen","setIsOpen","useEffect","createElement","toggle","multipleFileUploadStatusProgress","multipleFileUploadStatusProgressIcon","multipleFileUploadStatusItemProgressText","toggleExpandableSection","Object","assign","multipleFileUploadStatus","toggleContent","isExpanded","onToggle","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\MultipleFileUpload\\MultipleFileUploadStatus.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { ExpandableSection } from '../ExpandableSection';\nimport InProgressIcon from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\n/** Acts as an expandable container for all uploaded file statuses.\n * An optional text and/or icon can also be passed into this sub-component.\n * This sub-component can be conditionally rendered when at least 1 file has been\n * attempted to be uploaded.\n */\n\nexport interface MultipleFileUploadStatusProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside multi file upload status list */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** String to show in the status toggle */\n  statusToggleText?: string;\n  /** Icon to show in the status toggle */\n  statusToggleIcon?: 'danger' | 'success' | 'inProgress' | React.ReactNode;\n}\n\nexport const MultipleFileUploadStatus: React.FunctionComponent<MultipleFileUploadStatusProps> = ({\n  children,\n  className,\n  statusToggleText,\n  statusToggleIcon,\n  ...props\n}: MultipleFileUploadStatusProps) => {\n  const [icon, setIcon] = React.useState<React.ReactNode>();\n  const [isOpen, setIsOpen] = React.useState(true);\n\n  React.useEffect(() => {\n    switch (statusToggleIcon) {\n      case 'danger':\n        setIcon(<TimesCircleIcon />);\n        break;\n      case 'success':\n        setIcon(<CheckCircleIcon />);\n        break;\n      case 'inProgress':\n        setIcon(<InProgressIcon />);\n        break;\n      default:\n        setIcon(statusToggleIcon);\n    }\n  }, [statusToggleIcon]);\n\n  const toggle = (\n    <div className={styles.multipleFileUploadStatusProgress}>\n      <div className={styles.multipleFileUploadStatusProgressIcon}>{icon}</div>\n      <div className={styles.multipleFileUploadStatusItemProgressText}>{statusToggleText}</div>\n    </div>\n  );\n\n  const toggleExpandableSection = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className={css(styles.multipleFileUploadStatus, className)} {...props}>\n      <ExpandableSection toggleContent={toggle} isExpanded={isOpen} onToggle={toggleExpandableSection}>\n        <ul className=\"pf-c-multiple-file-upload__status-list\">{children}</ul>\n      </ExpandableSection>\n    </div>\n  );\n};\n\nMultipleFileUploadStatus.displayName = 'MultipleFileUploadStatus';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,iFAAiF;AACpG,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,OAAOC,cAAc,MAAM,yDAAyD;AACpF,OAAOC,eAAe,MAAM,0DAA0D;AACtF,OAAOC,eAAe,MAAM,0DAA0D;AAmBtF,OAAO,MAAMC,wBAAwB,GAA4DC,EAMjE,IAAI;MAN6D;MAC/FC,QAAQ;MACRC,SAAS;MACTC,gBAAgB;MAChBC;IAAgB,IAAAJ,EAEc;IAD3BK,KAAK,GAAAC,MAAA,CAAAN,EAAA,EALuF,iEAMhG,CADS;EAER,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGhB,KAAK,CAACiB,QAAQ,EAAmB;EACzD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,KAAK,CAACiB,QAAQ,CAAC,IAAI,CAAC;EAEhDjB,KAAK,CAACoB,SAAS,CAAC,MAAK;IACnB,QAAQR,gBAAgB;MACtB,KAAK,QAAQ;QACXI,OAAO,CAAChB,KAAA,CAAAqB,aAAA,CAACf,eAAe,OAAG,CAAC;QAC5B;MACF,KAAK,SAAS;QACZU,OAAO,CAAChB,KAAA,CAAAqB,aAAA,CAAChB,eAAe,OAAG,CAAC;QAC5B;MACF,KAAK,YAAY;QACfW,OAAO,CAAChB,KAAA,CAAAqB,aAAA,CAACjB,cAAc,OAAG,CAAC;QAC3B;MACF;QACEY,OAAO,CAACJ,gBAAgB,CAAC;;EAE/B,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,MAAMU,MAAM,GACVtB,KAAA,CAAAqB,aAAA;IAAKX,SAAS,EAAET,MAAM,CAACsB;EAAgC,GACrDvB,KAAA,CAAAqB,aAAA;IAAKX,SAAS,EAAET,MAAM,CAACuB;EAAoC,GAAGT,IAAI,CAAO,EACzEf,KAAA,CAAAqB,aAAA;IAAKX,SAAS,EAAET,MAAM,CAACwB;EAAwC,GAAGd,gBAAgB,CAAO,CAE5F;EAED,MAAMe,uBAAuB,GAAGA,CAAA,KAAK;IACnCP,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,OACElB,KAAA,CAAAqB,aAAA,QAAAM,MAAA,CAAAC,MAAA;IAAKlB,SAAS,EAAER,GAAG,CAACD,MAAM,CAAC4B,wBAAwB,EAAEnB,SAAS;EAAC,GAAMG,KAAK,GACxEb,KAAA,CAAAqB,aAAA,CAAClB,iBAAiB;IAAC2B,aAAa,EAAER,MAAM;IAAES,UAAU,EAAEb,MAAM;IAAEc,QAAQ,EAAEN;EAAuB,GAC7F1B,KAAA,CAAAqB,aAAA;IAAIX,SAAS,EAAC;EAAwC,GAAED,QAAQ,CAAM,CACpD,CAChB;AAEV,CAAC;AAEDF,wBAAwB,CAAC0B,WAAW,GAAG,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}