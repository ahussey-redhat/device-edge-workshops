{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KeyTypes } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyClicks = event => {\n      if (event.key === KeyTypes.Escape) {\n        if (this.state.isNavOpen) {\n          this.setState({\n            isNavOpen: !this.state.isNavOpen\n          });\n        } else if (this.props.isOpen) {\n          this.props.onClose();\n        }\n      }\n    };\n    this.onNext = () => {\n      const {\n        onNext,\n        onClose,\n        onSave\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n        return onClose();\n      } else {\n        let newStep = currentStep;\n        for (let nextStep = currentStep; nextStep <= maxSteps; nextStep++) {\n          if (!flattenedSteps[nextStep]) {\n            return;\n          }\n          if (!flattenedSteps[nextStep].isDisabled) {\n            newStep = nextStep + 1;\n            break;\n          }\n        }\n        this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[currentStep - 1];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onNext && onNext({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n    this.onBack = () => {\n      const {\n        onBack\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        const adjustedStep = flattenedSteps.length;\n        this.setCurrentStep(adjustedStep, flattenedSteps[adjustedStep - 1]);\n      } else {\n        let newStep = currentStep;\n        for (let prevStep = currentStep; prevStep >= 0; prevStep--) {\n          if (!flattenedSteps[prevStep - 2]) {\n            return;\n          }\n          if (!flattenedSteps[prevStep - 2].isDisabled) {\n            newStep = prevStep - 1 <= 1 ? 1 : prevStep - 1;\n            break;\n          }\n        }\n        this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[newStep];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onBack && onBack({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n    this.goToStep = step => {\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps[step - 1].isDisabled) {\n        return;\n      }\n      const {\n        onGoToStep\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const maxSteps = flattenedSteps.length;\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n      this.setCurrentStep(step, flattenedSteps[step - 1]);\n      this.setState({\n        isNavOpen: false\n      });\n      const {\n        id: prevId,\n        name: prevName\n      } = flattenedSteps[currentStep - 1];\n      const {\n        id,\n        name\n      } = flattenedSteps[step - 1];\n      return onGoToStep && onGoToStep({\n        id,\n        name\n      }, {\n        prevId,\n        prevName\n      });\n    };\n    this.goToStepById = stepId => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n      if (step) {\n        this.setCurrentStep(step, flattenedSteps[step - 1]);\n      }\n    };\n    this.goToStepByName = stepName => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n      if (step) {\n        this.setCurrentStep(step, flattenedSteps[step - 1]);\n      }\n    };\n    this.getFlattenedSteps = () => {\n      const {\n        steps\n      } = this.props;\n      const flattenedSteps = [];\n      for (const step of steps) {\n        if (step.steps) {\n          for (const childStep of step.steps) {\n            flattenedSteps.push(childStep);\n          }\n        } else {\n          flattenedSteps.push(step);\n        }\n      }\n      return flattenedSteps;\n    };\n    this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n      return 0;\n    };\n    this.initSteps = steps => {\n      // Set default Step values\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (let j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n      return steps;\n    };\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n      return appendTo || document.body;\n    };\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n    if (props.onCurrentStepChanged) {\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps.length >= this.state.currentStep) {\n        const currentStep = flattenedSteps[this.state.currentStep - 1];\n        props.onCurrentStepChanged(currentStep);\n      }\n    }\n    this.drawerRef = React.createRef();\n  }\n  setCurrentStep(currentStep, currentStepObject) {\n    this.setState({\n      currentStep\n    });\n    if (this.props.onCurrentStepChanged) {\n      this.props.onCurrentStepChanged(currentStepObject);\n    }\n  }\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n  componentWillUnmount() {\n    const target = typeof document !== 'undefined' && document.body || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.startAtStep !== this.props.startAtStep) {\n      this.setState({\n        currentStep: this.props.startAtStep\n      });\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        width,\n        height,\n        title,\n        description,\n        descriptionComponent,\n        onClose,\n        onSave,\n        onBack,\n        onNext,\n        onGoToStep,\n        className,\n        steps,\n        startAtStep,\n        nextButtonText = 'Next',\n        backButtonText = 'Back',\n        cancelButtonText = 'Cancel',\n        hideClose,\n        closeButtonAriaLabel = 'Close',\n        navAriaLabel,\n        navAriaLabelledBy,\n        mainAriaLabel,\n        mainAriaLabelledBy,\n        hasNoBodyPadding,\n        footer,\n        appendTo,\n        isOpen,\n        titleId,\n        descriptionId,\n        isNavExpandable,\n        onCurrentStepChanged,\n        hasDrawer,\n        isDrawerExpanded,\n        onExpandDrawer\n      } = _a,\n      rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\", \"onCurrentStepChanged\", \"hasDrawer\", \"isDrawerExpanded\", \"onExpandDrawer\"])\n      /* eslint-enable @typescript-eslint/no-unused-vars */;\n\n    const {\n      currentStep\n    } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n    const nav = isWizardNavOpen => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n      return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n        if (step.isFinishedStep) {\n          // Don't show finished step in the side nav\n          return;\n        }\n        let enabled;\n        let navItemStep;\n        if (step.steps) {\n          let hasActiveChild = false;\n          let canJumpToParent = false;\n          for (const subStep of step.steps) {\n            if (activeStep.name === subStep.name) {\n              // one of the children matches\n              hasActiveChild = true;\n            }\n            if (subStep.canJumpTo) {\n              canJumpToParent = true;\n            }\n          }\n          navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n          return React.createElement(WizardNavItem, {\n            key: index,\n            id: step.id,\n            content: step.name,\n            isExpandable: isNavExpandable,\n            isCurrent: hasActiveChild,\n            isDisabled: !canJumpToParent,\n            step: navItemStep,\n            onNavItemClick: this.goToStep\n          }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n            returnList: true\n          }), step.steps.map((childStep, indexChild) => {\n            if (childStep.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n            enabled = childStep.canJumpTo && !childStep.isDisabled;\n            return React.createElement(WizardNavItem, {\n              key: `child_${indexChild}`,\n              id: childStep.id,\n              content: childStep.name,\n              isCurrent: activeStep.name === childStep.name,\n              isDisabled: !enabled,\n              step: navItemStep,\n              onNavItemClick: this.goToStep\n            });\n          })));\n        }\n        navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n        enabled = step.canJumpTo && !step.isDisabled;\n        return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n          key: index,\n          id: step.id,\n          content: step.name,\n          isCurrent: activeStep.name === step.name,\n          isDisabled: !enabled,\n          step: navItemStep,\n          onNavItemClick: this.goToStep\n        }));\n      }));\n    };\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n    const divStyles = Object.assign(Object.assign({}, height ? {\n      height\n    } : {}), width ? {\n      width\n    } : {});\n    const wizard = React.createElement(WizardContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({}, rest, {\n      className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n      style: Object.keys(divStyles).length ? divStyles : undefined\n    }), title && React.createElement(WizardHeader, {\n      titleId: this.titleId,\n      descriptionId: this.descriptionId,\n      onClose: onClose,\n      title: title,\n      description: description,\n      descriptionComponent: descriptionComponent,\n      closeButtonAriaLabel: closeButtonAriaLabel,\n      hideClose: hideClose\n    }), React.createElement(WizardToggle, {\n      hasDrawer: hasDrawer,\n      isDrawerExpanded: isDrawerExpanded,\n      onExpandDrawer: onExpandDrawer,\n      mainAriaLabel: mainAriaLabel,\n      isInPage: isOpen === undefined,\n      mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n      isNavOpen: this.state.isNavOpen,\n      onNavToggle: isNavOpen => this.setState({\n        isNavOpen\n      }),\n      nav: nav,\n      steps: steps,\n      activeStep: activeStep,\n      hasNoBodyPadding: hasNoBodyPadding\n    }, footer || React.createElement(WizardFooterInternal, {\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose: onClose,\n      isValid: isValid,\n      firstStep: firstStep,\n      activeStep: activeStep,\n      nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n      backButtonText: backButtonText,\n      cancelButtonText: cancelButtonText\n    }))));\n    if (isOpen !== undefined) {\n      return React.createElement(Modal, {\n        width: width !== null ? width : undefined,\n        isOpen: isOpen,\n        variant: ModalVariant.large,\n        \"aria-labelledby\": this.titleId,\n        \"aria-describedby\": this.descriptionId,\n        showClose: false,\n        hasNoBodyWrapper: true\n      }, wizard);\n    }\n    return wizard;\n  }\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  descriptionComponent: 'p',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: () => undefined,\n  appendTo: null,\n  isOpen: undefined,\n  isNavExpandable: false,\n  hasDrawer: false,\n  isDrawerExpanded: false,\n  onExpandDrawer: () => undefined\n};","map":{"version":3,"names":["React","KeyTypes","css","styles","Modal","ModalVariant","WizardFooterInternal","WizardToggle","WizardNav","WizardNavItem","WizardContextProvider","WizardHeader","Wizard","Component","constructor","props","handleKeyClicks","event","key","Escape","state","isNavOpen","setState","isOpen","onClose","onNext","onSave","currentStep","flattenedSteps","getFlattenedSteps","maxSteps","length","newStep","nextStep","isDisabled","setCurrentStep","id","prevId","name","prevName","onBack","adjustedStep","prevStep","goToStep","step","onGoToStep","goToStepById","stepId","i","goToStepByName","stepName","steps","childStep","push","getFlattenedStepsIndex","initSteps","j","Object","assign","canJumpTo","getElement","appendTo","document","body","newId","currentId","titleId","descriptionId","startAtStep","Number","isInteger","onCurrentStepChanged","drawerRef","createRef","currentStepObject","componentDidMount","target","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","render","_a","width","height","title","description","descriptionComponent","className","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","isNavExpandable","hasDrawer","isDrawerExpanded","onExpandDrawer","rest","__rest","activeStep","computedSteps","firstStep","isValid","enableNext","undefined","nav","isWizardNavOpen","wizNavAProps","createElement","map","index","isFinishedStep","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","content","isExpandable","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","context","divStyles","wizard","value","style","keys","isInPage","onNavToggle","variant","large","showClose","hasNoBodyWrapper","displayName","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Wizard\\Wizard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyTypes } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem, WizardNavItemProps } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { WizardHeader } from './WizardHeader';\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: React.ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** The content to render in the drawer panel (use when hasDrawer prop is set on the wizard).   */\n  drawerPanelContent?: any;\n  /** Custom drawer toggle button that opens the drawer. */\n  drawerToggleButton?: React.ReactNode;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?: React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n  /** Flag to disable the step in the navigation */\n  isDisabled?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void;\n\nexport interface WizardProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: React.ReactNode;\n  /** Component type of the description */\n  descriptionComponent?: 'div' | 'p';\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose?: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  startAtStep?: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: React.ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave?: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n  /** Flag indicating nav items with sub steps are expandable */\n  isNavExpandable?: boolean;\n  /** Callback function to signal the current step in the wizard */\n  onCurrentStepChanged?: (step: WizardStep) => void;\n  /** Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n  /** Callback function for when the drawer is toggled. Can be used to set browser focus in the drawer. */\n  onExpandDrawer?: () => void;\n}\n\ninterface WizardState {\n  currentStep: number;\n  isNavOpen: boolean;\n}\n\nexport class Wizard extends React.Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: null,\n    description: '',\n    descriptionComponent: 'p',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null as WizardStepFunctionType,\n    onNext: null as WizardStepFunctionType,\n    onGoToStep: null as WizardStepFunctionType,\n    width: null as string,\n    height: null as string,\n    footer: null as React.ReactNode,\n    onClose: () => undefined as any,\n    appendTo: null as HTMLElement,\n    isOpen: undefined,\n    isNavExpandable: false,\n    hasDrawer: false,\n    isDrawerExpanded: false,\n    onExpandDrawer: () => undefined as any\n  };\n  private titleId: string;\n  private descriptionId: string;\n  private drawerRef: React.RefObject<any>;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n\n    if (props.onCurrentStepChanged) {\n      const flattenedSteps = this.getFlattenedSteps();\n      if (flattenedSteps.length >= this.state.currentStep) {\n        const currentStep = flattenedSteps[this.state.currentStep - 1];\n        props.onCurrentStepChanged(currentStep);\n      }\n    }\n\n    this.drawerRef = React.createRef();\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.key === KeyTypes.Escape) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private onNext = (): void => {\n    const { onNext, onClose, onSave } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (currentStep >= maxSteps) {\n      // Hit the save button at the end of the wizard\n      if (onSave) {\n        return onSave();\n      }\n      return onClose();\n    } else {\n      let newStep = currentStep;\n\n      for (let nextStep = currentStep; nextStep <= maxSteps; nextStep++) {\n        if (!flattenedSteps[nextStep]) {\n          return;\n        }\n\n        if (!flattenedSteps[nextStep].isDisabled) {\n          newStep = nextStep + 1;\n          break;\n        }\n      }\n\n      this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n      const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onNext && onNext({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private onBack = (): void => {\n    const { onBack } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    if (flattenedSteps.length < currentStep) {\n      // Previous step was removed, just update the currentStep state\n      const adjustedStep = flattenedSteps.length;\n      this.setCurrentStep(adjustedStep, flattenedSteps[adjustedStep - 1]);\n    } else {\n      let newStep = currentStep;\n\n      for (let prevStep = currentStep; prevStep >= 0; prevStep--) {\n        if (!flattenedSteps[prevStep - 2]) {\n          return;\n        }\n\n        if (!flattenedSteps[prevStep - 2].isDisabled) {\n          newStep = prevStep - 1 <= 1 ? 1 : prevStep - 1;\n          break;\n        }\n      }\n\n      this.setCurrentStep(newStep, flattenedSteps[newStep - 1]);\n      const { id: prevId, name: prevName } = flattenedSteps[newStep];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onBack && onBack({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private goToStep = (step: number): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n\n    if (flattenedSteps[step - 1].isDisabled) {\n      return;\n    }\n\n    const { onGoToStep } = this.props;\n    const { currentStep } = this.state;\n    const maxSteps = flattenedSteps.length;\n    if (step < 1) {\n      step = 1;\n    } else if (step > maxSteps) {\n      step = maxSteps;\n    }\n    this.setCurrentStep(step, flattenedSteps[step - 1]);\n    this.setState({ isNavOpen: false });\n    const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n    const { id, name } = flattenedSteps[step - 1];\n    return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  };\n\n  private goToStepById = (stepId: number | string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].id === stepId) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setCurrentStep(step, flattenedSteps[step - 1]);\n    }\n  };\n\n  private goToStepByName = (stepName: string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setCurrentStep(step, flattenedSteps[step - 1]);\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    const flattenedSteps: WizardStep[] = [];\n    for (const step of steps) {\n      if (step.steps) {\n        for (const childStep of step.steps) {\n          flattenedSteps.push(childStep);\n        }\n      } else {\n        flattenedSteps.push(step);\n      }\n    }\n    return flattenedSteps;\n  };\n\n  private getFlattenedStepsIndex = (flattenedSteps: WizardStep[], stepName: React.ReactNode): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps.length; j++) {\n          steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  private setCurrentStep(currentStep: number, currentStepObject: WizardStep) {\n    this.setState({\n      currentStep\n    });\n\n    if (this.props.onCurrentStepChanged) {\n      this.props.onCurrentStepChanged(currentStepObject);\n    }\n  }\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<WizardProps>) {\n    if (prevProps.startAtStep !== this.props.startAtStep) {\n      this.setState({ currentStep: this.props.startAtStep });\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      descriptionComponent,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      isNavExpandable,\n      onCurrentStepChanged,\n      hasDrawer,\n      isDrawerExpanded,\n      onExpandDrawer,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n              return (\n                <WizardNavItem\n                  key={index}\n                  id={step.id}\n                  content={step.name}\n                  isExpandable={isNavExpandable}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={this.goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map((childStep: WizardStep, indexChild: number) => {\n                      if (childStep.isFinishedStep) {\n                        // Don't show finished step in the side nav\n                        return;\n                      }\n                      navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                      enabled = childStep.canJumpTo && !childStep.isDisabled;\n                      return (\n                        <WizardNavItem\n                          key={`child_${indexChild}`}\n                          id={childStep.id}\n                          content={childStep.name}\n                          isCurrent={activeStep.name === childStep.name}\n                          isDisabled={!enabled}\n                          step={navItemStep}\n                          onNavItemClick={this.goToStep}\n                        />\n                      );\n                    })}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n            enabled = step.canJumpTo && !step.isDisabled;\n\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                id={step.id}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={this.goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {})\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className)}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              descriptionComponent={descriptionComponent}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            hasDrawer={hasDrawer}\n            isDrawerExpanded={isDrawerExpanded}\n            onExpandDrawer={onExpandDrawer}\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={(title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId)}\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={isNavOpen => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding}\n          >\n            {footer || (\n              <WizardFooterInternal\n                onNext={this.onNext}\n                onBack={this.onBack}\n                onClose={onClose}\n                isValid={isValid}\n                firstStep={firstStep}\n                activeStep={activeStep}\n                nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n                backButtonText={backButtonText}\n                cancelButtonText={cancelButtonText}\n              />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n\n    return wizard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}