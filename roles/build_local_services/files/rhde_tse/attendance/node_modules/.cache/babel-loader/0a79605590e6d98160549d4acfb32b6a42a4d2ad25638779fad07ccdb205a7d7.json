{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport const LoginForm = _a => {\n  var {\n      noAutoFocus = false,\n      className = '',\n      showHelperText = false,\n      helperText = null,\n      helperTextIcon = null,\n      usernameLabel = 'Username',\n      usernameValue = '',\n      onChangeUsername = () => undefined,\n      isValidUsername = true,\n      passwordLabel = 'Password',\n      passwordValue = '',\n      onChangePassword = () => undefined,\n      isShowPasswordEnabled = false,\n      hidePasswordAriaLabel = 'Hide password',\n      showPasswordAriaLabel = 'Show password',\n      isValidPassword = true,\n      loginButtonLabel = 'Log In',\n      isLoginButtonDisabled = false,\n      onLoginButtonClick = () => undefined,\n      rememberMeLabel = '',\n      isRememberMeChecked = false,\n      onChangeRememberMe = () => undefined\n    } = _a,\n    props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n  const passwordInput = React.createElement(TextInput, {\n    isRequired: true,\n    type: passwordHidden ? 'password' : 'text',\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  });\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, isShowPasswordEnabled && React.createElement(InputGroup, null, passwordInput, React.createElement(Button, {\n    variant: \"control\",\n    onClick: () => setPasswordHidden(!passwordHidden),\n    \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel\n  }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null))), !isShowPasswordEnabled && passwordInput), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"names":["React","Form","FormGroup","ActionGroup","FormHelperText","TextInput","Button","Checkbox","ValidatedOptions","InputGroup","EyeSlashIcon","EyeIcon","LoginForm","_a","noAutoFocus","className","showHelperText","helperText","helperTextIcon","usernameLabel","usernameValue","onChangeUsername","undefined","isValidUsername","passwordLabel","passwordValue","onChangePassword","isShowPasswordEnabled","hidePasswordAriaLabel","showPasswordAriaLabel","isValidPassword","loginButtonLabel","isLoginButtonDisabled","onLoginButtonClick","rememberMeLabel","isRememberMeChecked","onChangeRememberMe","props","__rest","passwordHidden","setPasswordHidden","useState","passwordInput","createElement","isRequired","type","id","name","validated","default","error","value","onChange","Object","assign","isError","isHidden","icon","label","fieldId","autoFocus","variant","onClick","length","isChecked","isBlock","isDisabled","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\LoginPage\\LoginForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\n\nexport interface LoginFormProps extends Omit<React.HTMLProps<HTMLFormElement>, 'ref'> {\n  /** Flag to indicate if the first dropdown item should not gain initial focus */\n  noAutoFocus?: boolean;\n  /** Additional classes added to the login main body's form */\n  className?: string;\n  /** Flag indicating the helper text is visible * */\n  showHelperText?: boolean;\n  /** Content displayed in the helper text component * */\n  helperText?: React.ReactNode;\n  /** Icon displayed to the left in the helper text */\n  helperTextIcon?: React.ReactNode;\n  /** Label for the username input field */\n  usernameLabel?: string;\n  /** Value for the username */\n  usernameValue?: string;\n  /** Function that handles the onChange event for the username */\n  onChangeUsername?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the username is valid */\n  isValidUsername?: boolean;\n  /** Label for the password input field */\n  passwordLabel?: string;\n  /** Value for the password */\n  passwordValue?: string;\n  /** Function that handles the onChange event for the password */\n  onChangePassword?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the password is valid */\n  isValidPassword?: boolean;\n  /** Flag indicating if the user can toggle hiding the password */\n  isShowPasswordEnabled?: boolean;\n  /** Accessible label for the show password button */\n  showPasswordAriaLabel?: string;\n  /** Accessible label for the hide password button */\n  hidePasswordAriaLabel?: string;\n  /** Label for the log in button input */\n  loginButtonLabel?: string;\n  /** Flag indicating if the login button is disabled */\n  isLoginButtonDisabled?: boolean;\n  /** Function that is called when the login button is clicked */\n  onLoginButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Label for the remember me checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel?: string;\n  /** Flag indicating if the remember me checkbox is checked. */\n  isRememberMeChecked?: boolean;\n  /** Function that handles the onChange event for the remember me checkbox */\n  onChangeRememberMe?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\n  noAutoFocus = false,\n  className = '',\n  showHelperText = false,\n  helperText = null,\n  helperTextIcon = null,\n  usernameLabel = 'Username',\n  usernameValue = '',\n  onChangeUsername = () => undefined as any,\n  isValidUsername = true,\n  passwordLabel = 'Password',\n  passwordValue = '',\n  onChangePassword = () => undefined as any,\n  isShowPasswordEnabled = false,\n  hidePasswordAriaLabel = 'Hide password',\n  showPasswordAriaLabel = 'Show password',\n  isValidPassword = true,\n  loginButtonLabel = 'Log In',\n  isLoginButtonDisabled = false,\n  onLoginButtonClick = () => undefined as any,\n  rememberMeLabel = '',\n  isRememberMeChecked = false,\n  onChangeRememberMe = () => undefined as any,\n  ...props\n}: LoginFormProps) => {\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n\n  const passwordInput = (\n    <TextInput\n      isRequired\n      type={passwordHidden ? 'password' : 'text'}\n      id=\"pf-login-password-id\"\n      name=\"pf-login-password-id\"\n      validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n      value={passwordValue}\n      onChange={onChangePassword}\n    />\n  );\n\n  return (\n    <Form className={className} {...props}>\n      <FormHelperText isError={!isValidUsername || !isValidPassword} isHidden={!showHelperText} icon={helperTextIcon}>\n        {helperText}\n      </FormHelperText>\n      <FormGroup\n        label={usernameLabel}\n        isRequired\n        validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-username-id\"\n      >\n        <TextInput\n          autoFocus={!noAutoFocus}\n          id=\"pf-login-username-id\"\n          isRequired\n          validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n          type=\"text\"\n          name=\"pf-login-username-id\"\n          value={usernameValue}\n          onChange={onChangeUsername}\n        />\n      </FormGroup>\n      <FormGroup\n        label={passwordLabel}\n        isRequired\n        validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-password-id\"\n      >\n        {isShowPasswordEnabled && (\n          <InputGroup>\n            {passwordInput}\n            <Button\n              variant=\"control\"\n              onClick={() => setPasswordHidden(!passwordHidden)}\n              aria-label={passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel}\n            >\n              {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n            </Button>\n          </InputGroup>\n        )}\n        {!isShowPasswordEnabled && passwordInput}\n      </FormGroup>\n      {rememberMeLabel.length > 0 && (\n        <FormGroup fieldId=\"pf-login-remember-me-id\">\n          <Checkbox\n            id=\"pf-login-remember-me-id\"\n            label={rememberMeLabel}\n            isChecked={isRememberMeChecked}\n            onChange={onChangeRememberMe}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button variant=\"primary\" type=\"submit\" onClick={onLoginButtonClick} isBlock isDisabled={isLoginButtonDisabled}>\n          {loginButtonLabel}\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\nLoginForm.displayName = 'LoginForm';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}