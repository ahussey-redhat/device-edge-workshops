{"ast":null,"code":"import { __rest } from \"tslib\";\n/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KeyTypes } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nexport var TooltipPosition;\n(function (TooltipPosition) {\n  TooltipPosition[\"auto\"] = \"auto\";\n  TooltipPosition[\"top\"] = \"top\";\n  TooltipPosition[\"bottom\"] = \"bottom\";\n  TooltipPosition[\"left\"] = \"left\";\n  TooltipPosition[\"right\"] = \"right\";\n  TooltipPosition[\"topStart\"] = \"top-start\";\n  TooltipPosition[\"topEnd\"] = \"top-end\";\n  TooltipPosition[\"bottomStart\"] = \"bottom-start\";\n  TooltipPosition[\"bottomEnd\"] = \"bottom-end\";\n  TooltipPosition[\"leftStart\"] = \"left-start\";\n  TooltipPosition[\"leftEnd\"] = \"left-end\";\n  TooltipPosition[\"rightStart\"] = \"right-start\";\n  TooltipPosition[\"rightEnd\"] = \"right-end\";\n})(TooltipPosition || (TooltipPosition = {}));\n// id for associating trigger with the content aria-describedby or aria-labelledby\nlet pfTooltipIdCounter = 1;\nexport const Tooltip = _a => {\n  var {\n      content: bodyContent,\n      position = 'top',\n      trigger = 'mouseenter focus',\n      isVisible = false,\n      isContentLeftAligned = false,\n      enableFlip = true,\n      className = '',\n      entryDelay = 300,\n      exitDelay = 300,\n      appendTo = () => document.body,\n      zIndex = 9999,\n      maxWidth = tooltipMaxWidth.value,\n      distance = 15,\n      aria = 'describedby',\n      // For every initial starting position, there are 3 escape positions\n      flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n      id = `pf-tooltip-${pfTooltipIdCounter++}`,\n      children,\n      animationDuration = 300,\n      reference,\n      'aria-live': ariaLive = reference ? 'polite' : 'off',\n      boundary,\n      isAppLauncher,\n      tippyProps,\n      removeFindDomNode = false,\n      onTooltipHidden = () => {}\n    } = _a,\n    rest = __rest(_a, [\"content\", \"position\", \"trigger\", \"isVisible\", \"isContentLeftAligned\", \"enableFlip\", \"className\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"distance\", \"aria\", \"flipBehavior\", \"id\", \"children\", \"animationDuration\", \"reference\", 'aria-live', \"boundary\", \"isAppLauncher\", \"tippyProps\", \"removeFindDomNode\", \"onTooltipHidden\"]);\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined && console.warn('The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.');\n    isAppLauncher !== undefined && console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  }\n  // could make this a prop in the future (true | false | 'toggle')\n  const hideOnClick = true;\n  const triggerOnMouseenter = trigger.includes('mouseenter');\n  const triggerOnFocus = trigger.includes('focus');\n  const triggerOnClick = trigger.includes('click');\n  const triggerManually = trigger === 'manual';\n  const [visible, setVisible] = React.useState(false);\n  const [opacity, setOpacity] = React.useState(0);\n  const transitionTimerRef = React.useRef(null);\n  const showTimerRef = React.useRef(null);\n  const hideTimerRef = React.useRef(null);\n  const prevExitDelayRef = React.useRef();\n  const clearTimeouts = timeoutRefs => {\n    timeoutRefs.forEach(ref => {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  };\n  // Cancel all timers on unmount\n  React.useEffect(() => () => {\n    clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n  }, []);\n  const onDocumentKeyDown = event => {\n    if (!triggerManually) {\n      if (event.key === KeyTypes.Escape && visible) {\n        hide();\n      }\n    }\n  };\n  const onTriggerEnter = event => {\n    if (event.key === KeyTypes.Enter) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n  React.useEffect(() => {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n  React.useEffect(() => {\n    if (prevExitDelayRef.current < exitDelay) {\n      clearTimeouts([transitionTimerRef, hideTimerRef]);\n      hideTimerRef.current = setTimeout(() => {\n        setOpacity(0);\n        transitionTimerRef.current = setTimeout(() => {\n          setVisible(false);\n          onTooltipHidden();\n        }, animationDuration);\n      }, exitDelay);\n    }\n    prevExitDelayRef.current = exitDelay;\n  }, [exitDelay]);\n  const show = () => {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(() => {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n  const hide = () => {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(() => {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(() => {\n        setVisible(false);\n        onTooltipHidden();\n      }, animationDuration);\n    }, exitDelay);\n  };\n  const positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  const content = React.createElement(\"div\", Object.assign({\n    \"aria-live\": ariaLive,\n    className: css(styles.tooltip, className),\n    role: \"tooltip\",\n    id: id,\n    style: {\n      maxWidth: hasCustomMaxWidth ? maxWidth : null,\n      opacity,\n      transition: getOpacityTransition(animationDuration)\n    }\n  }, rest), React.createElement(TooltipArrow, null), React.createElement(TooltipContent, {\n    isLeftAligned: isContentLeftAligned\n  }, bodyContent));\n  const onDocumentClick = (event, triggerElement) => {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n  const addAriaToTrigger = () => {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, {\n        'aria-describedby': id\n      });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, {\n        'aria-labelledby': id\n      });\n    }\n    return children;\n  };\n  return React.createElement(Popper, {\n    trigger: aria !== 'none' && visible ? addAriaToTrigger() : children,\n    reference: reference,\n    popper: content,\n    popperMatchesTriggerWidth: false,\n    appendTo: appendTo,\n    isVisible: visible,\n    positionModifiers: positionModifiers,\n    distance: distance,\n    placement: position,\n    onMouseEnter: triggerOnMouseenter && show,\n    onMouseLeave: triggerOnMouseenter && hide,\n    onPopperMouseEnter: triggerOnMouseenter && show,\n    onPopperMouseLeave: triggerOnMouseenter && hide,\n    onFocus: triggerOnFocus && show,\n    onBlur: triggerOnFocus && hide,\n    onDocumentClick: triggerOnClick && onDocumentClick,\n    onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown,\n    onTriggerEnter: triggerManually ? null : onTriggerEnter,\n    enableFlip: enableFlip,\n    zIndex: zIndex,\n    flipBehavior: flipBehavior,\n    removeFindDomNode: removeFindDomNode\n  });\n};\nTooltip.displayName = 'Tooltip';","map":{"version":3,"names":["React","styles","css","TooltipContent","TooltipArrow","KeyTypes","tooltipMaxWidth","Popper","getOpacityTransition","TooltipPosition","pfTooltipIdCounter","Tooltip","_a","content","bodyContent","position","trigger","isVisible","isContentLeftAligned","enableFlip","className","entryDelay","exitDelay","appendTo","document","body","zIndex","maxWidth","value","distance","aria","flipBehavior","id","children","animationDuration","reference","ariaLive","boundary","isAppLauncher","tippyProps","removeFindDomNode","onTooltipHidden","rest","__rest","process","env","NODE_ENV","undefined","console","warn","hideOnClick","triggerOnMouseenter","includes","triggerOnFocus","triggerOnClick","triggerManually","visible","setVisible","useState","opacity","setOpacity","transitionTimerRef","useRef","showTimerRef","hideTimerRef","prevExitDelayRef","clearTimeouts","timeoutRefs","forEach","ref","current","clearTimeout","useEffect","onDocumentKeyDown","event","key","Escape","hide","onTriggerEnter","Enter","show","setTimeout","positionModifiers","top","modifiers","bottom","left","right","topLeft","topRight","bottomLeft","bottomRight","leftTop","leftBottom","rightTop","rightBottom","hasCustomMaxWidth","createElement","Object","assign","tooltip","role","style","transition","isLeftAligned","onDocumentClick","triggerElement","target","addAriaToTrigger","props","cloneElement","popper","popperMatchesTriggerWidth","placement","onMouseEnter","onMouseLeave","onPopperMouseEnter","onPopperMouseLeave","onFocus","onBlur","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Tooltip\\Tooltip.tsx"],"sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KeyTypes } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { ReactElement } from 'react';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nimport { Props as TippyProps } from '../../helpers/Popper/DeprecatedTippyTypes';\n\nexport enum TooltipPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right',\n  topStart = 'top-start',\n  topEnd = 'top-end',\n  bottomStart = 'bottom-start',\n  bottomEnd = 'bottom-end',\n  leftStart = 'left-start',\n  leftEnd = 'left-end',\n  rightStart = 'right-start',\n  rightEnd = 'right-end'\n}\n\nexport interface TooltipProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  /** The element to append the tooltip to, defaults to body */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /**\n   * aria-labelledby or aria-describedby for tooltip.\n   * The trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\n   * If you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'.\n   */\n  aria?: 'describedby' | 'labelledby' | 'none';\n  /**\n   * Determines whether the tooltip is an aria-live region. If the reference prop is passed in the\n   * default behavior is 'polite' in order to ensure the tooltip contents is announced to\n   * assistive technologies. Otherwise the default behavior is 'off'.\n   */\n  'aria-live'?: 'off' | 'polite';\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you cannot wrap the reference with the Tooltip, you can use the reference prop instead.\n   * Usage: <Tooltip><Button>Reference</Button></Tooltip>\n   */\n  children?: ReactElement<any>;\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you can wrap the reference with the Tooltip, you can use the children prop instead.\n   * Usage: <Tooltip reference={() => document.getElementById('reference-element')} />\n   */\n  reference?: HTMLElement | (() => HTMLElement) | React.RefObject<any>;\n  /** Tooltip additional class */\n  className?: string;\n  /** Tooltip content */\n  content: React.ReactNode;\n  /** Distance of the tooltip to its target, defaults to 15 */\n  distance?: number;\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /** Delay in ms before the tooltip appears */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\n   * be given ample time to move their mouse from the trigger to the tooltip content without the content\n   * being hidden.\n   */\n  exitDelay?: number;\n  /**\n   * The desired position to flip the tooltip to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the tooltip on the left.\n   */\n  flipBehavior?:\n    | 'flip'\n    | (\n        | 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-start'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left-end'\n        | 'right-start'\n        | 'right-end'\n      )[];\n  /** Maximum width of the tooltip (default 18.75rem) */\n  maxWidth?: string;\n  /** Callback when tooltip's hide transition has finished executing */\n  onTooltipHidden?: () => void;\n  /**\n   * Tooltip position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   * The 'auto' position chooses the side with the most space.\n   * The 'auto' position requires the 'enableFlip' prop to be true.\n   */\n  position?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /**\n   * Tooltip trigger: click, mouseenter, focus, manual\n   * Set to manual to trigger tooltip programmatically (through the isVisible prop)\n   */\n  trigger?: string;\n  /** Flag to indicate that the text content is left aligned */\n  isContentLeftAligned?: boolean;\n  /** value for visibility when trigger is 'manual' */\n  isVisible?: boolean;\n  /** z-index of the tooltip */\n  zIndex?: number;\n  /** id of the tooltip */\n  id?: string;\n  /** CSS fade transition animation duration */\n  animationDuration?: number;\n  /** @deprecated - no longer used. if you want to constrain the popper to a specific element use the appendTo prop instead */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** @deprecated - no longer used */\n  isAppLauncher?: boolean;\n  /** @deprecated - no longer used */\n  tippyProps?: Partial<TippyProps>;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n}\n\n// id for associating trigger with the content aria-describedby or aria-labelledby\nlet pfTooltipIdCounter = 1;\n\nexport const Tooltip: React.FunctionComponent<TooltipProps> = ({\n  content: bodyContent,\n  position = 'top',\n  trigger = 'mouseenter focus',\n  isVisible = false,\n  isContentLeftAligned = false,\n  enableFlip = true,\n  className = '',\n  entryDelay = 300,\n  exitDelay = 300,\n  appendTo = () => document.body,\n  zIndex = 9999,\n  maxWidth = tooltipMaxWidth.value,\n  distance = 15,\n  aria = 'describedby',\n  // For every initial starting position, there are 3 escape positions\n  flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n  id = `pf-tooltip-${pfTooltipIdCounter++}`,\n  children,\n  animationDuration = 300,\n  reference,\n  'aria-live': ariaLive = reference ? 'polite' : 'off',\n  boundary,\n  isAppLauncher,\n  tippyProps,\n  removeFindDomNode = false,\n  onTooltipHidden = () => {},\n  ...rest\n}: TooltipProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined &&\n      console.warn(\n        'The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.'\n      );\n    isAppLauncher !== undefined &&\n      console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  }\n  // could make this a prop in the future (true | false | 'toggle')\n  const hideOnClick = true;\n  const triggerOnMouseenter = trigger.includes('mouseenter');\n  const triggerOnFocus = trigger.includes('focus');\n  const triggerOnClick = trigger.includes('click');\n  const triggerManually = trigger === 'manual';\n  const [visible, setVisible] = React.useState(false);\n  const [opacity, setOpacity] = React.useState(0);\n  const transitionTimerRef = React.useRef(null);\n  const showTimerRef = React.useRef(null);\n  const hideTimerRef = React.useRef(null);\n\n  const prevExitDelayRef = React.useRef<number>();\n\n  const clearTimeouts = (timeoutRefs: React.RefObject<any>[]) => {\n    timeoutRefs.forEach(ref => {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  };\n\n  // Cancel all timers on unmount\n  React.useEffect(\n    () => () => {\n      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n    },\n    []\n  );\n\n  const onDocumentKeyDown = (event: KeyboardEvent) => {\n    if (!triggerManually) {\n      if (event.key === KeyTypes.Escape && visible) {\n        hide();\n      }\n    }\n  };\n  const onTriggerEnter = (event: KeyboardEvent) => {\n    if (event.key === KeyTypes.Enter) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n  React.useEffect(() => {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n\n  React.useEffect(() => {\n    if (prevExitDelayRef.current < exitDelay) {\n      clearTimeouts([transitionTimerRef, hideTimerRef]);\n      hideTimerRef.current = setTimeout(() => {\n        setOpacity(0);\n        transitionTimerRef.current = setTimeout(() => {\n          setVisible(false);\n          onTooltipHidden();\n        }, animationDuration);\n      }, exitDelay);\n    }\n    prevExitDelayRef.current = exitDelay;\n  }, [exitDelay]);\n\n  const show = () => {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(() => {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n  const hide = () => {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(() => {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(() => {\n        setVisible(false);\n        onTooltipHidden();\n      }, animationDuration);\n    }, exitDelay);\n  };\n  const positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  const content = (\n    <div\n      aria-live={ariaLive}\n      className={css(styles.tooltip, className)}\n      role=\"tooltip\"\n      id={id}\n      style={{\n        maxWidth: hasCustomMaxWidth ? maxWidth : null,\n        opacity,\n        transition: getOpacityTransition(animationDuration)\n      }}\n      {...rest}\n    >\n      <TooltipArrow />\n      <TooltipContent isLeftAligned={isContentLeftAligned}>{bodyContent}</TooltipContent>\n    </div>\n  );\n\n  const onDocumentClick = (event: MouseEvent, triggerElement: HTMLElement) => {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  const addAriaToTrigger = () => {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, { 'aria-describedby': id });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, { 'aria-labelledby': id });\n    }\n    return children;\n  };\n\n  return (\n    <Popper\n      trigger={aria !== 'none' && visible ? addAriaToTrigger() : children}\n      reference={reference}\n      popper={content}\n      popperMatchesTriggerWidth={false}\n      appendTo={appendTo}\n      isVisible={visible}\n      positionModifiers={positionModifiers}\n      distance={distance}\n      placement={position}\n      onMouseEnter={triggerOnMouseenter && show}\n      onMouseLeave={triggerOnMouseenter && hide}\n      onPopperMouseEnter={triggerOnMouseenter && show}\n      onPopperMouseLeave={triggerOnMouseenter && hide}\n      onFocus={triggerOnFocus && show}\n      onBlur={triggerOnFocus && hide}\n      onDocumentClick={triggerOnClick && onDocumentClick}\n      onDocumentKeyDown={triggerManually ? null : onDocumentKeyDown}\n      onTriggerEnter={triggerManually ? null : onTriggerEnter}\n      enableFlip={enableFlip}\n      zIndex={zIndex}\n      flipBehavior={flipBehavior}\n      removeFindDomNode={removeFindDomNode}\n    />\n  );\n};\nTooltip.displayName = 'Tooltip';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}