{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n  return null;\n}\nexport class DataListItem extends React.Component {\n  render() {\n    const _a = this.props,\n      {\n        children,\n        isExpanded,\n        className,\n        id,\n        'aria-labelledby': ariaLabelledBy,\n        selectableInputAriaLabel\n      } = _a,\n      props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n    return React.createElement(DataListContext.Consumer, null, _ref => {\n      let {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        selectableRow,\n        isDraggable,\n        dragStart,\n        dragEnd,\n        drop\n      } = _ref;\n      const selectDataListItem = event => {\n        let target = event.target;\n        while (event.currentTarget !== target) {\n          if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n            // check other event handlers are not present.\n            return;\n          } else {\n            target = target.parentNode;\n          }\n        }\n        updateSelectedDataListItem(id);\n      };\n      const onKeyDown = event => {\n        if (event.key === KeyTypes.Enter) {\n          updateSelectedDataListItem(id);\n        }\n      };\n      // We made the DataListDragButton determine if the entire item is draggable instead of\n      // DataListItem like we should have.\n      // Recursively search children for the DataListDragButton and see if it's disabled...\n      const dragButton = findDataListDragButton(children);\n      const dragProps = isDraggable && {\n        draggable: dragButton ? !dragButton.props.isDisabled : true,\n        onDrop: drop,\n        onDragEnd: dragEnd,\n        onDragStart: dragStart\n      };\n      const isSelected = selectedDataListItemId === id;\n      const selectableInputAriaProps = selectableInputAriaLabel ? {\n        'aria-label': selectableInputAriaLabel\n      } : {\n        'aria-labelledby': ariaLabelledBy\n      };\n      return React.createElement(\"li\", Object.assign({\n        id: id,\n        className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n        \"aria-labelledby\": ariaLabelledBy\n      }, isSelectable && {\n        tabIndex: 0,\n        onClick: selectDataListItem,\n        onKeyDown\n      }, isSelectable && isSelected && {\n        'aria-selected': true\n      }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n        className: \"pf-screen-reader\",\n        type: \"radio\",\n        checked: isSelected,\n        onChange: event => selectableRow.onChange(id, event),\n        tabIndex: -1\n      }, selectableInputAriaProps)), React.Children.map(children, child => React.isValidElement(child) && React.cloneElement(child, {\n        rowid: ariaLabelledBy\n      })));\n    });\n  }\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"names":["React","css","styles","DataListContext","KeyTypes","DataListDragButton","findDataListDragButton","node","isValidElement","type","props","children","child","Children","toArray","button","DataListItem","Component","render","_a","isExpanded","className","id","ariaLabelledBy","selectableInputAriaLabel","__rest","createElement","Consumer","_ref","isSelectable","selectedDataListItemId","updateSelectedDataListItem","selectableRow","isDraggable","dragStart","dragEnd","drop","selectDataListItem","event","target","currentTarget","onclick","parentNode","classList","contains","dataListItemAction","dataListItemControl","onKeyDown","key","Enter","dragButton","dragProps","draggable","isDisabled","onDrop","onDragEnd","onDragStart","isSelected","selectableInputAriaProps","Object","assign","dataListItem","modifiers","expanded","selectable","selected","tabIndex","onClick","checked","onChange","map","cloneElement","rowid","displayName","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DataList\\DataListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton, DataListDragButtonProps } from './DataListDragButton';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children' | 'ref'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n  /** Unique id for the DataList item */\n  id?: string;\n  /** Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nfunction findDataListDragButton(node: React.ReactNode): React.ReactElement<DataListDragButtonProps> | null {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node as React.ReactElement<DataListDragButtonProps>;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component<DataListItemProps> {\n  static displayName = 'DataListItem';\n  static defaultProps: DataListItemProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n  };\n  render() {\n    const {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel,\n      ...props\n    } = this.props;\n    return (\n      <DataListContext.Consumer>\n        {({\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable,\n          dragStart,\n          dragEnd,\n          drop\n        }) => {\n          const selectDataListItem = (event: React.MouseEvent) => {\n            let target: any = event.target;\n            while (event.currentTarget !== target) {\n              if (\n                ('onclick' in target && target.onclick) ||\n                target.parentNode.classList.contains(styles.dataListItemAction) ||\n                target.parentNode.classList.contains(styles.dataListItemControl)\n              ) {\n                // check other event handlers are not present.\n                return;\n              } else {\n                target = target.parentNode;\n              }\n            }\n            updateSelectedDataListItem(id);\n          };\n\n          const onKeyDown = (event: React.KeyboardEvent) => {\n            if (event.key === KeyTypes.Enter) {\n              updateSelectedDataListItem(id);\n            }\n          };\n\n          // We made the DataListDragButton determine if the entire item is draggable instead of\n          // DataListItem like we should have.\n          // Recursively search children for the DataListDragButton and see if it's disabled...\n          const dragButton = findDataListDragButton(children);\n          const dragProps = isDraggable && {\n            draggable: dragButton ? !dragButton.props.isDisabled : true,\n            onDrop: drop,\n            onDragEnd: dragEnd,\n            onDragStart: dragStart\n          };\n\n          const isSelected = selectedDataListItemId === id;\n\n          const selectableInputAriaProps = selectableInputAriaLabel\n            ? { 'aria-label': selectableInputAriaLabel }\n            : { 'aria-labelledby': ariaLabelledBy };\n\n          return (\n            <li\n              id={id}\n              className={css(\n                styles.dataListItem,\n                isExpanded && styles.modifiers.expanded,\n                isSelectable && styles.modifiers.selectable,\n                selectedDataListItemId && isSelected && styles.modifiers.selected,\n                className\n              )}\n              aria-labelledby={ariaLabelledBy}\n              {...(isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown })}\n              {...(isSelectable && isSelected && { 'aria-selected': true })}\n              {...props}\n              {...dragProps}\n            >\n              {selectableRow && (\n                <input\n                  className=\"pf-screen-reader\"\n                  type=\"radio\"\n                  checked={isSelected}\n                  onChange={event => selectableRow.onChange(id, event)}\n                  tabIndex={-1}\n                  {...selectableInputAriaProps}\n                />\n              )}\n              {React.Children.map(\n                children,\n                child =>\n                  React.isValidElement(child) &&\n                  React.cloneElement(child as React.ReactElement<any>, {\n                    rowid: ariaLabelledBy\n                  })\n              )}\n            </li>\n          );\n        }}\n      </DataListContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}