{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCheck = _a => {\n  var {\n      className = '',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onChange = (checked, event) => {},\n      isValid = true,\n      isDisabled = false,\n      isChecked = false,\n      checked = false,\n      defaultChecked,\n      otherControls = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n  const check = React.createElement(\"div\", {\n    className: css(styles.dataListCheck)\n  }, React.createElement(\"input\", Object.assign({}, props, {\n    type: \"checkbox\",\n    onChange: event => onChange(event.currentTarget.checked, event),\n    \"aria-invalid\": !isValid,\n    disabled: isDisabled\n  }, [true, false].includes(defaultChecked) && {\n    defaultChecked\n  }, ![true, false].includes(defaultChecked) && {\n    checked: isChecked || checked\n  })));\n  return React.createElement(React.Fragment, null, !otherControls && React.createElement(\"div\", {\n    className: css(styles.dataListItemControl, className)\n  }, check), otherControls && check);\n};\nDataListCheck.displayName = 'DataListCheck';","map":{"version":3,"names":["React","css","styles","DataListCheck","_a","className","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","props","__rest","check","createElement","dataListCheck","Object","assign","type","currentTarget","disabled","includes","Fragment","dataListItemControl","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DataList\\DataListCheck.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\n\nexport interface DataListCheckProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'checked'> {\n  /** Additional classes added to the DataList item checkbox */\n  className?: string;\n  /** Flag to show if the DataList checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the DataList checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  isChecked?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  checked?: boolean;\n  /** Flag to set default value of DataList checkbox when it is uncontrolled by React state.\n   * To make the DataList checkbox controlled, instead use the isChecked prop, but do not use both.\n   */\n  defaultChecked?: boolean;\n  /** A callback for when the DataList checkbox selection changes */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Aria-labelledby of the DataList checkbox */\n  'aria-labelledby': string;\n  /** Flag to indicate if other controls are used in the DataListItem */\n  otherControls?: boolean;\n}\n\nexport const DataListCheck: React.FunctionComponent<DataListCheckProps> = ({\n  className = '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange = (checked: boolean, event: React.FormEvent<HTMLInputElement>) => {},\n  isValid = true,\n  isDisabled = false,\n  isChecked = false,\n  checked = false,\n  defaultChecked,\n  otherControls = false,\n  ...props\n}: DataListCheckProps) => {\n  const check = (\n    <div className={css(styles.dataListCheck)}>\n      <input\n        {...props}\n        type=\"checkbox\"\n        onChange={event => onChange(event.currentTarget.checked, event)}\n        aria-invalid={!isValid}\n        disabled={isDisabled}\n        {...([true, false].includes(defaultChecked) && { defaultChecked })}\n        {...(![true, false].includes(defaultChecked) && { checked: isChecked || checked })}\n      />\n    </div>\n  );\n  return (\n    <React.Fragment>\n      {!otherControls && <div className={css(styles.dataListItemControl, className)}>{check}</div>}\n      {otherControls && check}\n    </React.Fragment>\n  );\n};\nDataListCheck.displayName = 'DataListCheck';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,4DAA4D;AA+B/E,OAAO,MAAMC,aAAa,GAAiDC,EAWtD,IAAI;MAXkD;MACzEC,SAAS,GAAG,EAAE;MACd;MACAC,QAAQ,GAAGA,CAACC,OAAgB,EAAEC,KAAwC,KAAI,CAAE,CAAC;MAC7EC,OAAO,GAAG,IAAI;MACdC,UAAU,GAAG,KAAK;MAClBC,SAAS,GAAG,KAAK;MACjBJ,OAAO,GAAG,KAAK;MACfK,cAAc;MACdC,aAAa,GAAG;IAAK,IAAAT,EAEF;IADhBU,KAAK,GAAAC,MAAA,CAAAX,EAAA,EAViE,6GAW1E,CADS;EAER,MAAMY,KAAK,GACThB,KAAA,CAAAiB,aAAA;IAAKZ,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACgB,aAAa;EAAC,GACvClB,KAAA,CAAAiB,aAAA,UAAAE,MAAA,CAAAC,MAAA,KACMN,KAAK;IACTO,IAAI,EAAC,UAAU;IACff,QAAQ,EAAEE,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACc,aAAa,CAACf,OAAO,EAAEC,KAAK,CAAC;IAAA,gBACjD,CAACC,OAAO;IACtBc,QAAQ,EAAEb;EAAU,GACf,CAAC,IAAI,EAAE,KAAK,CAAC,CAACc,QAAQ,CAACZ,cAAc,CAAC,IAAI;IAAEA;EAAc,CAAE,EAC5D,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAACY,QAAQ,CAACZ,cAAc,CAAC,IAAI;IAAEL,OAAO,EAAEI,SAAS,IAAIJ;EAAO,CAAG,EAClF,CAEL;EACD,OACEP,KAAA,CAAAiB,aAAA,CAACjB,KAAK,CAACyB,QAAQ,QACZ,CAACZ,aAAa,IAAIb,KAAA,CAAAiB,aAAA;IAAKZ,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACwB,mBAAmB,EAAErB,SAAS;EAAC,GAAGW,KAAK,CAAO,EAC3FH,aAAa,IAAIG,KAAK,CACR;AAErB,CAAC;AACDb,aAAa,CAACwB,WAAW,GAAG,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}