{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = _a => {\n  var {\n      id,\n      type,\n      value = '',\n      filename = '',\n      onChange = () => {},\n      onBrowseButtonClick = () => {},\n      onClearButtonClick = () => {},\n      onTextAreaClick,\n      onTextChange,\n      onTextAreaBlur,\n      textAreaPlaceholder = '',\n      className = '',\n      isDisabled = false,\n      isReadOnly = false,\n      isLoading = false,\n      spinnerAriaValueText,\n      isRequired = false,\n      isDragActive = false,\n      validated = 'default',\n      'aria-label': ariaLabel = 'File upload',\n      filenamePlaceholder = 'Drag a file here or browse to upload',\n      filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n      browseButtonText = 'Browse...',\n      clearButtonText = 'Clear',\n      isClearButtonDisabled = !filename && !value,\n      containerRef = null,\n      allowEditingUploadedText = false,\n      hideDefaultPreview = false,\n      children = null\n    } = _a,\n    props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"onTextAreaClick\", \"onTextChange\", \"onTextAreaBlur\", \"textAreaPlaceholder\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n  const onTextAreaChange = (newValue, event) => {\n    onChange(newValue, filename, event);\n    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(newValue);\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className),\n    ref: containerRef\n  }, props), React.createElement(\"div\", {\n    className: styles.fileUploadFileSelect\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n    : true,\n    isDisabled: isDisabled,\n    id: `${id}-filename`,\n    name: `${id}-filename`,\n    \"aria-label\": filenameAriaLabel,\n    placeholder: filenamePlaceholder,\n    \"aria-describedby\": `${id}-browse-button`,\n    value: filename\n  }), React.createElement(Button, {\n    id: `${id}-browse-button`,\n    variant: ButtonVariant.control,\n    onClick: onBrowseButtonClick,\n    isDisabled: isDisabled\n  }, browseButtonText), React.createElement(Button, {\n    variant: ButtonVariant.control,\n    isDisabled: isDisabled || isClearButtonDisabled,\n    onClick: onClearButtonClick\n  }, clearButtonText))), React.createElement(\"div\", {\n    className: styles.fileUploadFileDetails\n  }, !hideDefaultPreview && type === fileReaderType.text && React.createElement(TextArea, {\n    readOnly: isReadOnly || !!filename && !allowEditingUploadedText,\n    disabled: isDisabled,\n    isRequired: isRequired,\n    resizeOrientation: TextAreResizeOrientation.vertical,\n    validated: validated,\n    id: id,\n    name: id,\n    \"aria-label\": ariaLabel,\n    value: value,\n    onChange: onTextAreaChange,\n    onClick: onTextAreaClick,\n    onBlur: onTextAreaBlur,\n    placeholder: textAreaPlaceholder\n  }), isLoading && React.createElement(\"div\", {\n    className: styles.fileUploadFileDetailsSpinner\n  }, React.createElement(Spinner, {\n    size: spinnerSize.lg,\n    \"aria-valuetext\": spinnerAriaValueText\n  }))), children);\n};\nFileUploadField.displayName = 'FileUploadField';","map":{"version":3,"names":["React","styles","css","InputGroup","TextInput","Button","ButtonVariant","TextArea","TextAreResizeOrientation","Spinner","spinnerSize","fileReaderType","FileUploadField","_a","id","type","value","filename","onChange","onBrowseButtonClick","onClearButtonClick","onTextAreaClick","onTextChange","onTextAreaBlur","textAreaPlaceholder","className","isDisabled","isReadOnly","isLoading","spinnerAriaValueText","isRequired","isDragActive","validated","ariaLabel","filenamePlaceholder","filenameAriaLabel","browseButtonText","clearButtonText","isClearButtonDisabled","containerRef","allowEditingUploadedText","hideDefaultPreview","children","props","__rest","onTextAreaChange","newValue","event","createElement","Object","assign","fileUpload","modifiers","dragHover","loading","ref","fileUploadFileSelect","name","placeholder","variant","control","onClick","fileUploadFileDetails","text","readOnly","disabled","resizeOrientation","vertical","onBlur","fileUploadFileDetailsSpinner","size","lg","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\FileUpload\\FileUploadField.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\n\n/** A more customizable file upload component for implementing custom logic. Drag and drop\n * functionality is not built in by default.\n */\n\nexport interface FileUploadFieldProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  /** Flag to allow editing of a text file's contents after it is selected from disk. */\n  allowEditingUploadedText?: boolean;\n  /** Aria-label for the text area. */\n  'aria-label'?: string;\n  /** Text for the browse button. */\n  browseButtonText?: string;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n  /** Additional classes added to the file upload field container element. */\n  className?: string;\n  /** Text for the clear button. */\n  clearButtonText?: string;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** Aria-label for the read-only filename field. */\n  filenameAriaLabel?: string;\n  /** Placeholder string to display in the empty filename field. */\n  filenamePlaceholder?: string;\n  /** Flag to hide the built-in preview of the file (where available). If true, you can use\n   * the children property to render an alternate preview.\n   */\n  hideDefaultPreview?: boolean;\n  /** Unique id for the text area. Also used to generate ids for accessible labels. */\n  id: string;\n  /** Flag to disable the clear button. */\n  isClearButtonDisabled?: boolean;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** A callback for when the text area value changes. */\n  onChange?: (\n    value: string,\n    filename: string,\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement> // User typed in the TextArea\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // User clicked Clear button\n  ) => void;\n  /** Aria-valuetext for the loading spinner. */\n  spinnerAriaValueText?: string;\n  /** What type of file. Determines what is is expected by the value property (a string for\n   * 'text' and 'dataURL', or a File object otherwise).\n   */\n  type?: 'text' | 'dataURL';\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Value of the file's contents (string if text file, File object otherwise). */\n  value?: string | File;\n\n  // Props available in FileUploadField but not FileUpload:\n\n  /** A reference object to attach to the file upload field container element. */\n  containerRef?: React.Ref<HTMLDivElement>;\n  /** Flag to show if a file is being dragged over the file upload field. */\n  isDragActive?: boolean;\n  /** A callback for when the browse button is clicked. */\n  onBrowseButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** A callback for when the clear button is clicked. */\n  onClearButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Callback for when focus is lost on the text area field. */\n  onTextAreaBlur?: (event?: any) => void;\n  /** A callback for when the text area is clicked. Can also be set via the onClick property\n   * of the file upload component. */\n  onTextAreaClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;\n  /** Text area text changed. */\n  onTextChange?: (text: string) => void;\n  /** Placeholder string to display in the empty text area field. */\n  textAreaPlaceholder?: string;\n}\n\nexport const FileUploadField: React.FunctionComponent<FileUploadFieldProps> = ({\n  id,\n  type,\n  value = '',\n  filename = '',\n  onChange = () => {},\n  onBrowseButtonClick = () => {},\n  onClearButtonClick = () => {},\n  onTextAreaClick,\n  onTextChange,\n  onTextAreaBlur,\n  textAreaPlaceholder = '',\n  className = '',\n  isDisabled = false,\n  isReadOnly = false,\n  isLoading = false,\n  spinnerAriaValueText,\n  isRequired = false,\n  isDragActive = false,\n  validated = 'default' as 'success' | 'error' | 'default',\n  'aria-label': ariaLabel = 'File upload',\n  filenamePlaceholder = 'Drag a file here or browse to upload',\n  filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n  browseButtonText = 'Browse...',\n  clearButtonText = 'Clear',\n  isClearButtonDisabled = !filename && !value,\n  containerRef = null as React.Ref<HTMLDivElement>,\n  allowEditingUploadedText = false,\n  hideDefaultPreview = false,\n  children = null,\n\n  ...props\n}: FileUploadFieldProps) => {\n  const onTextAreaChange = (newValue: string, event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(newValue, filename, event);\n    onTextChange?.(newValue);\n  };\n  return (\n    <div\n      className={css(\n        styles.fileUpload,\n        isDragActive && styles.modifiers.dragHover,\n        isLoading && styles.modifiers.loading,\n        className\n      )}\n      ref={containerRef}\n      {...props}\n    >\n      <div className={styles.fileUploadFileSelect}>\n        <InputGroup>\n          <TextInput\n            isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n            isDisabled={isDisabled}\n            id={`${id}-filename`}\n            name={`${id}-filename`}\n            aria-label={filenameAriaLabel}\n            placeholder={filenamePlaceholder}\n            aria-describedby={`${id}-browse-button`}\n            value={filename}\n          />\n          <Button\n            id={`${id}-browse-button`}\n            variant={ButtonVariant.control}\n            onClick={onBrowseButtonClick}\n            isDisabled={isDisabled}\n          >\n            {browseButtonText}\n          </Button>\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={isDisabled || isClearButtonDisabled}\n            onClick={onClearButtonClick}\n          >\n            {clearButtonText}\n          </Button>\n        </InputGroup>\n      </div>\n      <div className={styles.fileUploadFileDetails}>\n        {!hideDefaultPreview && type === fileReaderType.text && (\n          <TextArea\n            readOnly={isReadOnly || (!!filename && !allowEditingUploadedText)}\n            disabled={isDisabled}\n            isRequired={isRequired}\n            resizeOrientation={TextAreResizeOrientation.vertical}\n            validated={validated}\n            id={id}\n            name={id}\n            aria-label={ariaLabel}\n            value={value as string}\n            onChange={onTextAreaChange}\n            onClick={onTextAreaClick}\n            onBlur={onTextAreaBlur}\n            placeholder={textAreaPlaceholder}\n          />\n        )}\n        {isLoading && (\n          <div className={styles.fileUploadFileDetailsSpinner}>\n            <Spinner size={spinnerSize.lg} aria-valuetext={spinnerAriaValueText} />\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\nFileUploadField.displayName = 'FileUploadField';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}