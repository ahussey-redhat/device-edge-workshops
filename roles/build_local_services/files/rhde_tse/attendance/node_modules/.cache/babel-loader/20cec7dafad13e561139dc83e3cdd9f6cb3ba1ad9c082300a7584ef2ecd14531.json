{"ast":null,"code":"import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport const AdvancedSearchMenu = _ref => {\n  let {\n    className,\n    parentRef,\n    parentInputRef,\n    value = '',\n    attributes = [],\n    formAdditionalItems,\n    hasWordsAttrLabel = 'Has words',\n    advancedSearchDelimiter,\n    getAttrValueMap,\n    onChange,\n    onSearch,\n    onClear,\n    resetButtonLabel = 'Reset',\n    submitSearchButtonLabel = 'Search',\n    isSearchMenuOpen,\n    onToggleAdvancedMenu\n  } = _ref;\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n  const onDocClick = event => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  const onEscPress = event => {\n    if (isSearchMenuOpen && event.key === KeyTypes.Escape && parentRef && parentRef.current.contains(event.target)) {\n      onToggleAdvancedMenu(event);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n  const onSearchHandler = event => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  const handleValueChange = (attribute, newValue, event) => {\n    const newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(_ref2 => {\n      let [k, v] = _ref2;\n      if (v.trim() !== '') {\n        /* Wrap the value in quotes if it contains spaces */\n        const quoteWrappedValue = v.includes(' ') ? `'${v.replace(/(^'|'$)/g, '')}'` : v;\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;\n        } else {\n          updatedValue = `${updatedValue} ${quoteWrappedValue}`;\n        }\n      }\n    });\n    if (onChange) {\n      onChange(event, updatedValue.replace(/^\\s+/g, ''));\n    }\n  };\n  const getValue = attribute => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n  const buildFormGroups = () => {\n    const formGroups = [];\n    attributes.forEach((attribute, index) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, randomId => React.createElement(FormGroup, {\n      label: hasWordsAttrLabel,\n      fieldId: randomId\n    }, React.createElement(TextInput, {\n      type: \"text\",\n      id: randomId,\n      value: getValue('haswords'),\n      onChange: (value, evt) => handleValueChange('haswords', value, evt)\n    }))));\n    return formGroups;\n  };\n  return isSearchMenuOpen ? React.createElement(Panel, {\n    variant: \"raised\",\n    className: css(className)\n  }, React.createElement(PanelMain, null, React.createElement(PanelMainBody, null, React.createElement(Form, null, buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler,\n    isDisabled: !value\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel)))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';","map":{"version":3,"names":["React","Button","ActionGroup","Form","FormGroup","TextInput","GenerateId","KeyTypes","Panel","PanelMain","PanelMainBody","css","AdvancedSearchMenu","_ref","className","parentRef","parentInputRef","value","attributes","formAdditionalItems","hasWordsAttrLabel","advancedSearchDelimiter","getAttrValueMap","onChange","onSearch","onClear","resetButtonLabel","submitSearchButtonLabel","isSearchMenuOpen","onToggleAdvancedMenu","firstAttrRef","useRef","putFocusBackOnInput","setPutFocusBackOnInput","useState","useEffect","length","console","error","current","focus","document","addEventListener","onDocClick","onEscPress","cleanup","removeEventListener","event","clickedWithinSearchInput","contains","target","key","Escape","onSearchHandler","preventDefault","handleValueChange","attribute","newValue","newMap","updatedValue","Object","entries","forEach","_ref2","k","v","trim","quoteWrappedValue","includes","replace","getValue","map","hasOwnProperty","buildFormGroups","formGroups","index","display","queryAttr","attr","push","createElement","label","fieldId","ref","type","id","evt","randomId","variant","onClick","isDisabled","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\SearchInput\\AdvancedSearchMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { SearchInputSearchAttribute } from './SearchInput';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\n\nexport interface AdvancedSearchMenuProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props.\n   */\n  advancedSearchDelimiter?: string;\n  /** Array of attribute values used for dynamically generated advanced search. */\n  attributes?: string[] | SearchInputSearchAttribute[];\n  /** Additional classes added to the advanced search menu. */\n  className?: string;\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a form group component for automatic formatting. */\n  formAdditionalItems?: React.ReactNode;\n  /** Function which builds an attribute-value map by parsing the value in the search input. */\n  getAttrValueMap?: () => { [key: string]: string };\n  /** Attribute label for strings unassociated with one of the provided listed attributes. */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Flag for toggling the open/close state of the advanced search menu. */\n  isSearchMenuOpen?: boolean;\n  /** A callback for when the input value changes. */\n  onChange?: (event: React.FormEvent<HTMLInputElement>, value: string) => void;\n  /** A callback for when the user clicks the clear button. */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the search button is clicked. */\n  onSearch?: (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    value: string,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the open advanced search button is clicked. */\n  onToggleAdvancedMenu?: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Ref of the input element within the search input. */\n  parentInputRef?: React.RefObject<any>;\n  /** Ref of the div wrapping the whole search input. */\n  parentRef?: React.RefObject<any>;\n  /** Label for the button which resets the advanced search form and clears the search input. */\n  resetButtonLabel?: string;\n  /** Label for the button which calls the onSearch event handler. */\n  submitSearchButtonLabel?: string;\n  /** Value of the search input. */\n  value?: string;\n}\n\nexport const AdvancedSearchMenu: React.FunctionComponent<AdvancedSearchMenuProps> = ({\n  className,\n  parentRef,\n  parentInputRef,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  getAttrValueMap,\n  onChange,\n  onSearch,\n  onClear,\n  resetButtonLabel = 'Reset',\n  submitSearchButtonLabel = 'Search',\n  isSearchMenuOpen,\n  onToggleAdvancedMenu\n}: AdvancedSearchMenuProps) => {\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: Event) => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target as Node);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    if (\n      isSearchMenuOpen &&\n      event.key === KeyTypes.Escape &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggleAdvancedMenu(event as any);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const handleValueChange = (attribute: string, newValue: string, event: React.FormEvent<HTMLInputElement>) => {\n    const newMap = getAttrValueMap();\n\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        /* Wrap the value in quotes if it contains spaces */\n        const quoteWrappedValue = v.includes(' ') ? `'${v.replace(/(^'|'$)/g, '')}'` : v;\n\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;\n        } else {\n          updatedValue = `${updatedValue} ${quoteWrappedValue}`;\n        }\n      }\n    });\n\n    if (onChange) {\n      onChange(event, updatedValue.replace(/^\\s+/g, ''));\n    }\n  };\n\n  const getValue = (attribute: string) => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  const buildFormGroups = () => {\n    const formGroups = [] as React.ReactNode[];\n    attributes.forEach((attribute: string | SearchInputSearchAttribute, index: number) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              ref={firstAttrRef}\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      } else {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      }\n    });\n    formGroups.push(\n      <GenerateId key={'hasWords'}>\n        {randomId => (\n          <FormGroup label={hasWordsAttrLabel} fieldId={randomId}>\n            <TextInput\n              type=\"text\"\n              id={randomId}\n              value={getValue('haswords')}\n              onChange={(value, evt) => handleValueChange('haswords', value, evt)}\n            />\n          </FormGroup>\n        )}\n      </GenerateId>\n    );\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? (\n    <Panel variant=\"raised\" className={css(className)}>\n      <PanelMain>\n        <PanelMainBody>\n          <Form>\n            {buildFormGroups()}\n            {formAdditionalItems ? formAdditionalItems : null}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" onClick={onSearchHandler} isDisabled={!value}>\n                {submitSearchButtonLabel}\n              </Button>\n              {!!onClear && (\n                <Button variant=\"link\" type=\"reset\" onClick={onClear}>\n                  {resetButtonLabel}\n                </Button>\n              )}\n            </ActionGroup>\n          </Form>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  ) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}