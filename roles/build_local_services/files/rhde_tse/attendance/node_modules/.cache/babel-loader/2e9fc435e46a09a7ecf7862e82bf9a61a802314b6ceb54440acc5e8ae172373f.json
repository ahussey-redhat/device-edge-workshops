{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport class ToolbarToggleGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.isContentPopup = () => {\n      const viewportSize = canUseDOM ? window.innerWidth : 1200;\n      const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        toggleIcon,\n        variant,\n        visibility,\n        visiblity,\n        breakpoint,\n        alignment,\n        spacer,\n        spaceItems,\n        className,\n        children\n      } = _a,\n      props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n    return React.createElement(PageContext.Consumer, null, _ref => {\n      let {\n        width,\n        getBreakpoint\n      } = _ref;\n      return React.createElement(ToolbarContext.Consumer, null, _ref2 => {\n        let {\n          isExpanded,\n          toggleIsExpanded\n        } = _ref2;\n        return React.createElement(ToolbarContentContext.Consumer, null, _ref3 => {\n          let {\n            expandableContentRef,\n            expandableContentId\n          } = _ref3;\n          if (expandableContentRef.current && expandableContentRef.current.classList) {\n            if (isExpanded) {\n              expandableContentRef.current.classList.add(styles.modifiers.expanded);\n            } else {\n              expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n            }\n          }\n          const breakpointMod = {};\n          breakpointMod[breakpoint] = 'show';\n          return React.createElement(\"div\", Object.assign({\n            className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n          }, props), React.createElement(\"div\", {\n            className: css(styles.toolbarToggle)\n          }, React.createElement(Button, Object.assign({\n            variant: \"plain\",\n            onClick: toggleIsExpanded,\n            \"aria-label\": \"Show Filters\"\n          }, isExpanded && {\n            'aria-expanded': true\n          }, {\n            \"aria-haspopup\": isExpanded && this.isContentPopup(),\n            \"aria-controls\": expandableContentId\n          }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n        });\n      });\n    });\n  }\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"names":["React","ReactDOM","styles","css","ToolbarContext","ToolbarContentContext","Button","globalBreakpointLg","formatBreakpointMods","toCamel","canUseDOM","PageContext","ToolbarToggleGroup","Component","constructor","isContentPopup","viewportSize","window","innerWidth","lgBreakpointValue","parseInt","value","render","_a","props","toggleIcon","variant","visibility","visiblity","breakpoint","alignment","spacer","spaceItems","className","children","__rest","console","error","undefined","warn","createElement","Consumer","_ref","width","getBreakpoint","_ref2","isExpanded","toggleIsExpanded","_ref3","expandableContentRef","expandableContentId","current","classList","add","modifiers","expanded","remove","breakpointMod","Object","assign","toolbarGroup","toggleGroup","toolbarToggle","onClick","createPortal","firstElementChild","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Toolbar\\ToolbarToggleGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroupProps } from './ToolbarGroup';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\n\nexport interface ToolbarToggleGroupProps extends ToolbarGroupProps {\n  /** An icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** Controls when filters are shown and when the toggle button is hidden. */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n}\n\nexport class ToolbarToggleGroup extends React.Component<ToolbarToggleGroupProps> {\n  static displayName = 'ToolbarToggleGroup';\n  isContentPopup = () => {\n    const viewportSize = canUseDOM ? window.innerWidth : 1200;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  };\n\n  render() {\n    const {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children,\n      ...props\n    } = this.props;\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <ToolbarContext.Consumer>\n            {({ isExpanded, toggleIsExpanded }) => (\n              <ToolbarContentContext.Consumer>\n                {({ expandableContentRef, expandableContentId }) => {\n                  if (expandableContentRef.current && expandableContentRef.current.classList) {\n                    if (isExpanded) {\n                      expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                    } else {\n                      expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                    }\n                  }\n\n                  const breakpointMod: {\n                    md?: 'show';\n                    lg?: 'show';\n                    xl?: 'show';\n                    '2xl'?: 'show';\n                  } = {};\n                  breakpointMod[breakpoint] = 'show';\n\n                  return (\n                    <div\n                      className={css(\n                        styles.toolbarGroup,\n                        styles.modifiers.toggleGroup,\n                        variant &&\n                          styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n                        formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n                        className\n                      )}\n                      {...props}\n                    >\n                      <div className={css(styles.toolbarToggle)}>\n                        <Button\n                          variant=\"plain\"\n                          onClick={toggleIsExpanded}\n                          aria-label=\"Show Filters\"\n                          {...(isExpanded && { 'aria-expanded': true })}\n                          aria-haspopup={isExpanded && this.isContentPopup()}\n                          aria-controls={expandableContentId}\n                        >\n                          {toggleIcon}\n                        </Button>\n                      </div>\n                      {isExpanded\n                        ? (ReactDOM.createPortal(\n                            children,\n                            expandableContentRef.current.firstElementChild\n                          ) as React.ReactElement)\n                        : children}\n                    </div>\n                  );\n                }}\n              </ToolbarContentContext.Consumer>\n            )}\n          </ToolbarContext.Consumer>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}