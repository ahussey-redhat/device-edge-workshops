{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n  TextAreaReadOnlyVariant[\"default\"] = \"default\";\n  TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nexport class TextAreaBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.setAutoHeight = field => {\n      field.style.setProperty(heightToken.name, 'inherit');\n      const computed = window.getComputedStyle(field);\n      // Calculate the height\n      const height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, `${height}px`);\n    };\n    this.handleChange = event => {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      const field = event.currentTarget;\n      if (this.props.autoResize && canUseDOM) {\n        this.setAutoHeight(field);\n      }\n      if (this.props.onChange) {\n        this.props.onChange(field.value, event);\n      }\n    };\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n  componentDidMount() {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (this.props.autoResize && canUseDOM) {\n      const field = inputRef.current;\n      this.setAutoHeight(field);\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        value,\n        validated,\n        isRequired,\n        isDisabled,\n        isIconSprite,\n        isReadOnly,\n        readOnlyVariant,\n        resizeOrientation,\n        innerRef,\n        disabled,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize,\n        onChange\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\"]);\n    const orientation = `resize${capitalize(resizeOrientation)}`;\n    return React.createElement(\"textarea\", Object.assign({\n      className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n      onChange: this.handleChange\n    }, typeof this.props.defaultValue !== 'string' && {\n      value\n    }, {\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled || disabled,\n      readOnly: !!readOnlyVariant || isReadOnly,\n      ref: innerRef || this.inputRef\n    }, props));\n  }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => React.createElement(TextAreaBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextArea.displayName = 'TextArea';","map":{"version":3,"names":["React","styles","heightToken","css","capitalize","ValidatedOptions","canUseDOM","TextAreResizeOrientation","TextAreaReadOnlyVariant","TextAreaBase","Component","constructor","props","inputRef","createRef","setAutoHeight","field","style","setProperty","name","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","handleChange","event","currentTarget","autoResize","onChange","value","id","console","error","componentDidMount","innerRef","current","render","_a","className","validated","isRequired","isDisabled","isIconSprite","isReadOnly","readOnlyVariant","resizeOrientation","disabled","__rest","orientation","createElement","Object","assign","formControl","modifiers","iconSprite","plain","both","success","warning","defaultValue","required","readOnly","ref","displayName","defaultProps","TextArea","forwardRef"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\TextArea\\TextArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\n\nexport enum TextAreResizeOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical',\n  both = 'both'\n}\n\nexport enum TextAreaReadOnlyVariant {\n  default = 'default',\n  plain = 'plain'\n}\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange' | 'ref'> {\n  /** Additional classes added to the text area. */\n  className?: string;\n  /** Flag to show if the text area is required. */\n  isRequired?: boolean;\n  /** Flag to show if the text area is disabled. */\n  isDisabled?: boolean;\n  /** @deprecated Use readOnlyVariant instead. Flag to show if the text area is read only. */\n  isReadOnly?: boolean;\n  /** Read only variant. */\n  readOnlyVariant?: 'default' | 'plain';\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Flag to modify height based on contents. */\n  autoResize?: boolean;\n  /** Value to indicate if the text area is modified to show that validation state.\n   * If set to success, text area will be modified to indicate valid state.\n   * If set to error, text area will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Value of the text area. */\n  value?: string | number;\n  /** A callback for when the text area value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Sets the orientation to limit the resize to */\n  resizeOrientation?: 'horizontal' | 'vertical' | 'both';\n  /** Custom flag to show that the text area requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the text area. */\n  innerRef?: React.RefObject<any>;\n}\n\nexport class TextAreaBase extends React.Component<TextAreaProps> {\n  static displayName = 'TextArea';\n  static defaultProps: TextAreaProps = {\n    innerRef: React.createRef<HTMLTextAreaElement>(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null as string\n  };\n\n  inputRef = React.createRef<HTMLTextAreaElement>();\n\n  private setAutoHeight = (field: HTMLTextAreaElement) => {\n    field.style.setProperty(heightToken.name, 'inherit');\n    const computed = window.getComputedStyle(field);\n    // Calculate the height\n    const height =\n      parseInt(computed.getPropertyValue('border-top-width')) +\n      parseInt(computed.getPropertyValue('padding-top')) +\n      field.scrollHeight +\n      parseInt(computed.getPropertyValue('padding-bottom')) +\n      parseInt(computed.getPropertyValue('border-bottom-width'));\n    field.style.setProperty(heightToken.name, `${height}px`);\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  componentDidMount(): void {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (this.props.autoResize && canUseDOM) {\n      const field = inputRef.current;\n      this.setAutoHeight(field);\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n    const field = event.currentTarget;\n    if (this.props.autoResize && canUseDOM) {\n      this.setAutoHeight(field);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(field.value, event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      readOnlyVariant,\n      resizeOrientation,\n      innerRef,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const orientation = `resize${capitalize(resizeOrientation)}` as 'resizeVertical' | 'resizeHorizontal';\n    return (\n      <textarea\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          readOnlyVariant === 'plain' && styles.modifiers.plain,\n          className,\n          resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation],\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string' && { value })}\n        aria-invalid={validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled || disabled}\n        readOnly={!!readOnlyVariant || isReadOnly}\n        ref={innerRef || this.inputRef}\n        {...props}\n      />\n    );\n  }\n}\n\nexport const TextArea = React.forwardRef((props: TextAreaProps, ref: React.Ref<HTMLTextAreaElement>) => (\n  <TextAreaBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextArea.displayName = 'TextArea';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}