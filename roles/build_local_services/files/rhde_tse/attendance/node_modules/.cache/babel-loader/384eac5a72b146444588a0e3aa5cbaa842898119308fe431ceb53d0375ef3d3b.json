{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/PageContext';\nexport class Toolbar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.chipGroupContentRef = React.createRef();\n    this.staticFilterInfo = {};\n    this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: canUseDOM ? window.innerWidth : 1200,\n      ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n    };\n    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n    this.toggleIsExpanded = () => {\n      this.setState(prevState => ({\n        isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n      }));\n    };\n    this.closeExpandableContent = e => {\n      if (e.target.innerWidth !== this.state.windowWidth) {\n        this.setState(() => ({\n          isManagedToggleExpanded: false,\n          windowWidth: e.target.innerWidth\n        }));\n      }\n    };\n    this.updateNumberFilters = (categoryName, numberOfFilters) => {\n      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        this.staticFilterInfo = filterInfoToUpdate;\n        this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n    this.renderToolbar = randomId => {\n      const _a = this.props,\n        {\n          clearAllFilters,\n          clearFiltersButtonText,\n          collapseListedFiltersBreakpoint,\n          isExpanded: isExpandedProp,\n          toggleIsExpanded,\n          className,\n          children,\n          isFullHeight,\n          isStatic,\n          inset,\n          usePageInsets,\n          isSticky,\n          ouiaId,\n          numberOfFiltersText,\n          customChipGroupContent\n        } = _a,\n        props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n      const {\n        isManagedToggleExpanded\n      } = this.state;\n      const isToggleManaged = this.isToggleManaged();\n      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n      const numberOfFilters = this.getNumberOfFilters();\n      const showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(PageContext.Consumer, null, _ref => {\n        let {\n          width,\n          getBreakpoint\n        } = _ref;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className),\n          id: randomId\n        }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props), React.createElement(ToolbarContext.Provider, {\n          value: {\n            isExpanded,\n            toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n            chipGroupContentRef: this.chipGroupContentRef,\n            updateNumberFilters: this.updateNumberFilters,\n            numberOfFilters,\n            clearAllFilters,\n            clearFiltersButtonText,\n            showClearFiltersButton,\n            toolbarId: randomId,\n            customChipGroupContent\n          }\n        }, children, React.createElement(ToolbarChipGroupContent, {\n          isExpanded: isExpanded,\n          chipGroupContentRef: this.chipGroupContentRef,\n          clearAllFilters: clearAllFilters,\n          showClearFiltersButton: showClearFiltersButton,\n          clearFiltersButtonText: clearFiltersButtonText,\n          numberOfFilters: numberOfFilters,\n          numberOfFiltersText: numberOfFiltersText,\n          collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint,\n          customChipGroupContent: customChipGroupContent\n        })));\n      });\n    };\n  }\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n  render() {\n    return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId));\n  }\n}\nToolbar.displayName = 'Toolbar';","map":{"version":3,"names":["React","styles","GenerateId","css","ToolbarContext","ToolbarChipGroupContent","formatBreakpointMods","canUseDOM","getDefaultOUIAId","getOUIAProps","PageContext","Toolbar","Component","constructor","chipGroupContentRef","createRef","staticFilterInfo","state","isManagedToggleExpanded","filterInfo","windowWidth","window","innerWidth","ouiaStateId","displayName","isToggleManaged","props","isExpanded","toggleIsExpanded","setState","prevState","closeExpandableContent","e","target","updateNumberFilters","categoryName","numberOfFilters","filterInfoToUpdate","Object","assign","hasOwnProperty","getNumberOfFilters","values","reduce","acc","cur","renderToolbar","randomId","_a","clearAllFilters","clearFiltersButtonText","collapseListedFiltersBreakpoint","isExpandedProp","className","children","isFullHeight","isStatic","inset","usePageInsets","isSticky","ouiaId","numberOfFiltersText","customChipGroupContent","__rest","showClearFiltersButton","createElement","Consumer","_ref","width","getBreakpoint","toolbar","modifiers","fullHeight","static","pageInsets","sticky","id","undefined","Provider","value","toolbarId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Toolbar\\Toolbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/PageContext';\n\nexport interface ToolbarProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Custom content appended to the filter generated chip group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Classes applied to root element of the data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the data toolbar */\n  children?: React.ReactNode;\n  /** Id of the data toolbar */\n  id?: string;\n  /** Flag indicating the toolbar height should expand to the full height of the container */\n  isFullHeight?: boolean;\n  /** Flag indicating the toolbar is static */\n  isStatic?: boolean;\n  /** Flag indicating the toolbar should use the Page insets */\n  usePageInsets?: boolean;\n  /** Flag indicating the toolbar should stick to the top of its container */\n  isSticky?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nexport interface ToolbarState {\n  /** Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.\n   *  Indicates whether or not the toggle group is expanded. */\n  isManagedToggleExpanded: boolean;\n  /** Object managing information about how many chips are in each chip group */\n  filterInfo: FilterInfo;\n  /** Used to keep track of window width so we can collapse expanded content when window is resizing */\n  windowWidth: number;\n  ouiaStateId: string;\n}\n\ninterface FilterInfo {\n  [key: string]: number;\n}\n\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState> {\n  static displayName = 'Toolbar';\n  chipGroupContentRef = React.createRef<HTMLDivElement>();\n  staticFilterInfo = {};\n  state = {\n    isManagedToggleExpanded: false,\n    filterInfo: {},\n    windowWidth: canUseDOM ? window.innerWidth : 1200,\n    ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n  };\n\n  isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n  toggleIsExpanded = () => {\n    this.setState(prevState => ({\n      isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n    }));\n  };\n\n  closeExpandableContent = (e: any) => {\n    if (e.target.innerWidth !== this.state.windowWidth) {\n      this.setState(() => ({\n        isManagedToggleExpanded: false,\n        windowWidth: e.target.innerWidth\n      }));\n    }\n  };\n\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  updateNumberFilters = (categoryName: string, numberOfFilters: number) => {\n    const filterInfoToUpdate: FilterInfo = { ...this.staticFilterInfo };\n    if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n      filterInfoToUpdate[categoryName] = numberOfFilters;\n      this.staticFilterInfo = filterInfoToUpdate;\n      this.setState({ filterInfo: filterInfoToUpdate });\n    }\n  };\n\n  getNumberOfFilters = () =>\n    Object.values(this.state.filterInfo).reduce((acc: any, cur: any) => acc + cur, 0) as number;\n\n  renderToolbar = (randomId: string) => {\n    const {\n      clearAllFilters,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      isExpanded: isExpandedProp,\n      toggleIsExpanded,\n      className,\n      children,\n      isFullHeight,\n      isStatic,\n      inset,\n      usePageInsets,\n      isSticky,\n      ouiaId,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const { isManagedToggleExpanded } = this.state;\n\n    const isToggleManaged = this.isToggleManaged();\n    const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n    const numberOfFilters = this.getNumberOfFilters();\n    const showClearFiltersButton = numberOfFilters > 0;\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbar,\n              isFullHeight && styles.modifiers.fullHeight,\n              isStatic && styles.modifiers.static,\n              usePageInsets && styles.modifiers.pageInsets,\n              isSticky && styles.modifiers.sticky,\n              formatBreakpointMods(inset, styles, '', getBreakpoint(width)),\n              className\n            )}\n            id={randomId}\n            {...getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n            {...props}\n          >\n            <ToolbarContext.Provider\n              value={{\n                isExpanded,\n                toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                chipGroupContentRef: this.chipGroupContentRef,\n                updateNumberFilters: this.updateNumberFilters,\n                numberOfFilters,\n                clearAllFilters,\n                clearFiltersButtonText,\n                showClearFiltersButton,\n                toolbarId: randomId,\n                customChipGroupContent\n              }}\n            >\n              {children}\n              <ToolbarChipGroupContent\n                isExpanded={isExpanded}\n                chipGroupContentRef={this.chipGroupContentRef}\n                clearAllFilters={clearAllFilters}\n                showClearFiltersButton={showClearFiltersButton}\n                clearFiltersButtonText={clearFiltersButtonText}\n                numberOfFilters={numberOfFilters}\n                numberOfFiltersText={numberOfFiltersText}\n                collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n                customChipGroupContent={customChipGroupContent}\n              />\n            </ToolbarContext.Provider>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  };\n\n  render() {\n    return this.props.id ? (\n      this.renderToolbar(this.props.id)\n    ) : (\n      <GenerateId>{randomId => this.renderToolbar(randomId)}</GenerateId>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}