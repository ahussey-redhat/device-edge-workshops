{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\nexport const DualListSelectorControlsWrapperBase = _a => {\n  var {\n      innerRef,\n      children = null,\n      className,\n      'aria-label': ariaLabel = 'Controls for moving options between lists'\n    } = _a,\n    props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label']);\n  const ref = React.useRef(null);\n  const wrapperRef = innerRef || ref;\n  // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n  const handleKeys = event => {\n    if (!wrapperRef.current || wrapperRef.current !== event.target.closest('.pf-c-dual-list-selector__controls') && !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(event.target.closest('.pf-c-dual-list-selector__controls'))) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const controls = Array.from(wrapperRef.current.getElementsByTagName('BUTTON')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, controls, element => activeElement.contains(element), element => element, undefined, undefined, true, false);\n  };\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorControls, className),\n    tabIndex: 0,\n    ref: wrapperRef,\n    \"aria-label\": ariaLabel\n  }, props), children);\n};\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\nexport const DualListSelectorControlsWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorControlsWrapperBase, Object.assign({\n  innerRef: ref,\n  role: \"group\"\n}, props)));\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';","map":{"version":3,"names":["React","styles","css","handleArrows","DualListSelectorControlsWrapperBase","_a","innerRef","children","className","ariaLabel","props","__rest","ref","useRef","wrapperRef","handleKeys","event","current","target","closest","Array","from","getElementsByClassName","includes","stopImmediatePropagation","controls","getElementsByTagName","filter","el","classList","contains","activeElement","document","element","undefined","useEffect","window","addEventListener","removeEventListener","createElement","Object","assign","dualListSelectorControls","tabIndex","displayName","DualListSelectorControlsWrapper","forwardRef","role"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DualListSelector\\DualListSelectorControlsWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\n\n/** Acts as the container for the DualListSelectorControl sub-components. */\n\nexport interface DualListSelectorControlsWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything that can be rendered inside of the wrapper. */\n  children?: React.ReactNode;\n  /** Additional classes added to the wrapper. */\n  className?: string;\n  /** @hide Forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** Accessible label for the dual list selector controls wrapper. */\n  'aria-label'?: string;\n}\n\nexport const DualListSelectorControlsWrapperBase: React.FunctionComponent<DualListSelectorControlsWrapperProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel = 'Controls for moving options between lists',\n  ...props\n}: DualListSelectorControlsWrapperProps) => {\n  const ref = React.useRef(null);\n  const wrapperRef = innerRef || ref;\n  // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !wrapperRef.current ||\n      (wrapperRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls') &&\n        !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n\n    const controls = (Array.from(wrapperRef.current.getElementsByTagName('BUTTON')) as Element[]).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      controls,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => element,\n      undefined,\n      undefined,\n      true,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n\n  return (\n    <div\n      className={css(styles.dualListSelectorControls, className)}\n      tabIndex={0}\n      ref={wrapperRef}\n      aria-label={ariaLabel}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\n\nexport const DualListSelectorControlsWrapper = React.forwardRef(\n  (props: DualListSelectorControlsWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorControlsWrapperBase innerRef={ref as React.MutableRefObject<any>} role=\"group\" {...props} />\n  )\n);\n\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,6EAA6E;AAChG,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,YAAY,QAAQ,eAAe;AAe5C,OAAO,MAAMC,mCAAmC,GAAmEC,EAM5E,IAAI;MANwE;MACjHC,QAAQ;MACRC,QAAQ,GAAG,IAAI;MACfC,SAAS;MACT,YAAY,EAAEC,SAAS,GAAG;IAA2C,IAAAJ,EAEhC;IADlCK,KAAK,GAAAC,MAAA,CAAAN,EAAA,EALyG,mDAMlH,CADS;EAER,MAAMO,GAAG,GAAGZ,KAAK,CAACa,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMC,UAAU,GAAGR,QAAQ,IAAIM,GAAG;EAClC;EACA;EACA,MAAMG,UAAU,GAAIC,KAAoB,IAAI;IAC1C,IACE,CAACF,UAAU,CAACG,OAAO,IAClBH,UAAU,CAACG,OAAO,KAAMD,KAAK,CAACE,MAAsB,CAACC,OAAO,CAAC,oCAAoC,CAAC,IACjG,CAACC,KAAK,CAACC,IAAI,CAACP,UAAU,CAACG,OAAO,CAACK,sBAAsB,CAAC,mCAAmC,CAAC,CAAC,CAACC,QAAQ,CACjGP,KAAK,CAACE,MAAsB,CAACC,OAAO,CAAC,oCAAoC,CAAC,CAC3E,EACJ;MACA;;IAEFH,KAAK,CAACQ,wBAAwB,EAAE;IAEhC,MAAMC,QAAQ,GAAIL,KAAK,CAACC,IAAI,CAACP,UAAU,CAACG,OAAO,CAACS,oBAAoB,CAAC,QAAQ,CAAC,CAAe,CAACC,MAAM,CAClGC,EAAE,IAAI,CAACA,EAAE,CAACC,SAAS,CAACC,QAAQ,CAAC,eAAe,CAAC,CAC9C;IACD,MAAMC,aAAa,GAAGC,QAAQ,CAACD,aAAa;IAC5C5B,YAAY,CACVa,KAAK,EACLS,QAAQ,EACPQ,OAAgB,IAAKF,aAAa,CAACD,QAAQ,CAACG,OAAO,CAAC,EACpDA,OAAgB,IAAKA,OAAO,EAC7BC,SAAS,EACTA,SAAS,EACT,IAAI,EACJ,KAAK,CACN;EACH,CAAC;EAEDlC,KAAK,CAACmC,SAAS,CAAC,MAAK;IACnBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEtB,UAAU,CAAC;IAC9C,OAAO,MAAK;MACVqB,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEvB,UAAU,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,CAACD,UAAU,CAACG,OAAO,CAAC,CAAC;EAExB,OACEjB,KAAA,CAAAuC,aAAA,QAAAC,MAAA,CAAAC,MAAA;IACEjC,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACyC,wBAAwB,EAAElC,SAAS,CAAC;IAC1DmC,QAAQ,EAAE,CAAC;IACX/B,GAAG,EAAEE,UAAU;IAAA,cACHL;EAAS,GACjBC,KAAK,GAERH,QAAQ,CACL;AAEV,CAAC;AAEDH,mCAAmC,CAACwC,WAAW,GAAG,qCAAqC;AAEvF,OAAO,MAAMC,+BAA+B,GAAG7C,KAAK,CAAC8C,UAAU,CAC7D,CAACpC,KAA2C,EAAEE,GAA8B,KAC1EZ,KAAA,CAAAuC,aAAA,CAACnC,mCAAmC,EAAAoC,MAAA,CAAAC,MAAA;EAACnC,QAAQ,EAAEM,GAAkC;EAAEmC,IAAI,EAAC;AAAO,GAAKrC,KAAK,EAC1G,CACF;AAEDmC,+BAA+B,CAACD,WAAW,GAAG,iCAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}