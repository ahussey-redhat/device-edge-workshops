{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\nexport const Label = _a => {\n  var {\n      children,\n      className = '',\n      color = 'grey',\n      variant = 'filled',\n      isCompact = false,\n      isEditable = false,\n      editableProps,\n      isTruncated = false,\n      tooltipPosition,\n      icon,\n      onClose,\n      onEditCancel,\n      onEditComplete,\n      closeBtn,\n      closeBtnAriaLabel,\n      closeBtnProps,\n      href,\n      isOverflowLabel,\n      render\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"color\", \"variant\", \"isCompact\", \"isEditable\", \"editableProps\", \"isTruncated\", \"tooltipPosition\", \"icon\", \"onClose\", \"onEditCancel\", \"onEditComplete\", \"closeBtn\", \"closeBtnAriaLabel\", \"closeBtnProps\", \"href\", \"isOverflowLabel\", \"render\"]);\n  const [isEditableActive, setIsEditableActive] = useState(false);\n  const [currValue, setCurrValue] = useState(children);\n  const editableButtonRef = React.useRef();\n  const editableInputRef = React.useRef();\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n  const onDocMouseDown = event => {\n    if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(event, editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n  };\n  const onKeyDown = event => {\n    var _a, _b;\n    const key = event.key;\n    if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {\n      return;\n    }\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(event, editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n      (_a = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      // Reset div text to initial children prop - pre-edit\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children;\n        onEditCancel && onEditCancel(event, children);\n      }\n      setIsEditableActive(false);\n      (_b = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true);\n      // Set cursor position to end of text\n      const el = event.target;\n      const range = document.createRange();\n      const sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n  const LabelComponent = isOverflowLabel ? 'button' : 'span';\n  const button = closeBtn ? closeBtn : React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: \"plain\",\n    onClick: onClose,\n    \"aria-label\": closeBtnAriaLabel || `Close ${children}`\n  }, closeBtnProps), React.createElement(TimesIcon, null));\n  const textRef = React.createRef();\n  // ref to apply tooltip when rendered is used\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  useIsomorphicLayoutEffect(() => {\n    const currTextRef = isEditable ? editableButtonRef : textRef;\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  const content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n    className: css(styles.labelIcon)\n  }, icon), isTruncated && React.createElement(\"span\", {\n    ref: textRef,\n    className: css(styles.labelText)\n  }, children), !isTruncated && children);\n  React.useEffect(() => {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n  const updateVal = () => {\n    setCurrValue(editableInputRef.current.value);\n  };\n  let labelComponentChild = React.createElement(\"span\", {\n    className: css(styles.labelContent)\n  }, content);\n  if (href) {\n    labelComponentChild = React.createElement(\"a\", {\n      className: css(styles.labelContent),\n      href: href\n    }, content);\n  } else if (isEditable) {\n    labelComponentChild = React.createElement(\"button\", Object.assign({\n      ref: editableButtonRef,\n      className: css(styles.labelContent),\n      onClick: e => {\n        setIsEditableActive(true);\n        e.stopPropagation();\n      }\n    }, editableProps), content);\n  }\n  if (render) {\n    labelComponentChild = React.createElement(React.Fragment, null, isTooltipVisible && React.createElement(Tooltip, {\n      reference: componentRef,\n      content: children,\n      position: tooltipPosition\n    }), render({\n      className: styles.labelContent,\n      content,\n      componentRef\n    }));\n  } else if (isTooltipVisible) {\n    labelComponentChild = React.createElement(Tooltip, {\n      content: children,\n      position: tooltipPosition\n    }, labelComponentChild);\n  }\n  return React.createElement(LabelComponent, Object.assign({}, props, {\n    className: css(styles.label, colorStyles[color], variant === 'outline' && styles.modifiers.outline, isOverflowLabel && styles.modifiers.overflow, isCompact && styles.modifiers.compact, isEditable && labelGrpStyles.modifiers.editable, isEditableActive && styles.modifiers.editableActive, className)\n  }), !isEditableActive && labelComponentChild, !isEditableActive && onClose && button, isEditableActive && React.createElement(\"input\", Object.assign({\n    className: css(styles.labelContent),\n    type: \"text\",\n    id: \"editable-input\",\n    ref: editableInputRef,\n    value: currValue,\n    onChange: updateVal\n  }, editableProps)));\n};\nLabel.displayName = 'Label';","map":{"version":3,"names":["React","useState","styles","labelGrpStyles","Button","Tooltip","css","TimesIcon","useIsomorphicLayoutEffect","colorStyles","blue","modifiers","cyan","green","orange","purple","red","gold","grey","Label","_a","children","className","color","variant","isCompact","isEditable","editableProps","isTruncated","tooltipPosition","icon","onClose","onEditCancel","onEditComplete","closeBtn","closeBtnAriaLabel","closeBtnProps","href","isOverflowLabel","render","props","__rest","isEditableActive","setIsEditableActive","currValue","setCurrValue","editableButtonRef","useRef","editableInputRef","useEffect","document","addEventListener","onDocMouseDown","onKeyDown","removeEventListener","event","current","contains","target","value","key","preventDefault","stopImmediatePropagation","focus","_b","el","range","createRange","sel","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","LabelComponent","button","createElement","Object","assign","type","onClick","textRef","createRef","componentRef","isTooltipVisible","setIsTooltipVisible","currTextRef","offsetWidth","scrollWidth","content","Fragment","labelIcon","ref","labelText","updateVal","labelComponentChild","labelContent","e","stopPropagation","reference","position","label","outline","overflow","compact","editable","editableActive","id","onChange","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Label\\Label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport interface LabelProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Content rendered inside the label. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label. */\n  className?: string;\n  /** Color of the label. */\n  color?: 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey' | 'gold';\n  /** Variant of the label. */\n  variant?: 'outline' | 'filled';\n  /** Flag indicating the label is compact. */\n  isCompact?: boolean;\n  /** @beta Flag indicating the label is editable. */\n  isEditable?: boolean;\n  /** @beta Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control. */\n  editableProps?: any;\n  /** @beta Callback when an editable label completes an edit. */\n  onEditComplete?: (event: MouseEvent | KeyboardEvent, newText: string) => void;\n  /** @beta Callback when an editable label cancels an edit. */\n  onEditCancel?: (event: KeyboardEvent, previousText: string) => void;\n  /** Flag indicating the label text should be truncated. */\n  isTruncated?: boolean;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Icon added to the left of the label text. */\n  icon?: React.ReactNode;\n  /** Close click callback for removable labels. If present, label will have a close button. */\n  onClose?: (event: React.MouseEvent) => void;\n  /** Node for custom close button. */\n  closeBtn?: React.ReactNode;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional properties for the default close button. */\n  closeBtnProps?: any;\n  /** Href for a label that is a link. If present, the label will change to an anchor element. */\n  href?: string;\n  /** Flag indicating if the label is an overflow label */\n  isOverflowLabel?: boolean;\n  /** Forwards the label content and className to rendered function.  Use this prop for react router support.*/\n  render?: ({\n    className,\n    content,\n    componentRef\n  }: {\n    className: string;\n    content: React.ReactNode;\n    componentRef: any;\n  }) => React.ReactNode;\n}\n\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\n\nexport const Label: React.FunctionComponent<LabelProps> = ({\n  children,\n  className = '',\n  color = 'grey',\n  variant = 'filled',\n  isCompact = false,\n  isEditable = false,\n  editableProps,\n  isTruncated = false,\n  tooltipPosition,\n  icon,\n  onClose,\n  onEditCancel,\n  onEditComplete,\n  closeBtn,\n  closeBtnAriaLabel,\n  closeBtnProps,\n  href,\n  isOverflowLabel,\n  render,\n  ...props\n}: LabelProps) => {\n  const [isEditableActive, setIsEditableActive] = useState<boolean>(false);\n  const [currValue, setCurrValue] = useState(children);\n  const editableButtonRef = React.useRef<HTMLButtonElement>();\n  const editableInputRef = React.useRef<HTMLInputElement>();\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  const onDocMouseDown = (event: MouseEvent) => {\n    if (\n      isEditableActive &&\n      editableInputRef &&\n      editableInputRef.current &&\n      !editableInputRef.current.contains(event.target as Node)\n    ) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(event, editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (\n      (!isEditableActive &&\n        (!editableButtonRef ||\n          !editableButtonRef.current ||\n          !editableButtonRef.current.contains(event.target as Node))) ||\n      (isEditableActive &&\n        (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target as Node)))\n    ) {\n      return;\n    }\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(event, editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n      editableButtonRef?.current?.focus();\n    }\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      // Reset div text to initial children prop - pre-edit\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children as string;\n        onEditCancel && onEditCancel(event, children as string);\n      }\n      setIsEditableActive(false);\n      editableButtonRef?.current?.focus();\n    }\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true);\n\n      // Set cursor position to end of text\n      const el = event.target as HTMLElement;\n      const range = document.createRange();\n      const sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n\n  const LabelComponent = (isOverflowLabel ? 'button' : 'span') as any;\n\n  const button = closeBtn ? (\n    closeBtn\n  ) : (\n    <Button\n      type=\"button\"\n      variant=\"plain\"\n      onClick={onClose}\n      aria-label={closeBtnAriaLabel || `Close ${children}`}\n      {...closeBtnProps}\n    >\n      <TimesIcon />\n    </Button>\n  );\n  const textRef = React.createRef<any>();\n  // ref to apply tooltip when rendered is used\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  useIsomorphicLayoutEffect(() => {\n    const currTextRef = isEditable ? editableButtonRef : textRef;\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  const content = (\n    <React.Fragment>\n      {icon && <span className={css(styles.labelIcon)}>{icon}</span>}\n      {isTruncated && (\n        <span ref={textRef} className={css(styles.labelText)}>\n          {children}\n        </span>\n      )}\n      {!isTruncated && children}\n    </React.Fragment>\n  );\n\n  React.useEffect(() => {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n\n  const updateVal = () => {\n    setCurrValue(editableInputRef.current.value);\n  };\n\n  let labelComponentChild = <span className={css(styles.labelContent)}>{content}</span>;\n\n  if (href) {\n    labelComponentChild = (\n      <a className={css(styles.labelContent)} href={href}>\n        {content}\n      </a>\n    );\n  } else if (isEditable) {\n    labelComponentChild = (\n      <button\n        ref={editableButtonRef}\n        className={css(styles.labelContent)}\n        onClick={(e: React.MouseEvent) => {\n          setIsEditableActive(true);\n          e.stopPropagation();\n        }}\n        {...editableProps}\n      >\n        {content}\n      </button>\n    );\n  }\n\n  if (render) {\n    labelComponentChild = (\n      <React.Fragment>\n        {isTooltipVisible && <Tooltip reference={componentRef} content={children} position={tooltipPosition} />}\n        {render({\n          className: styles.labelContent,\n          content,\n          componentRef\n        })}\n      </React.Fragment>\n    );\n  } else if (isTooltipVisible) {\n    labelComponentChild = (\n      <Tooltip content={children} position={tooltipPosition}>\n        {labelComponentChild}\n      </Tooltip>\n    );\n  }\n\n  return (\n    <LabelComponent\n      {...props}\n      className={css(\n        styles.label,\n        colorStyles[color],\n        variant === 'outline' && styles.modifiers.outline,\n        isOverflowLabel && styles.modifiers.overflow,\n        isCompact && styles.modifiers.compact,\n        isEditable && labelGrpStyles.modifiers.editable,\n        isEditableActive && styles.modifiers.editableActive,\n        className\n      )}\n    >\n      {!isEditableActive && labelComponentChild}\n      {!isEditableActive && onClose && button}\n      {isEditableActive && (\n        <input\n          className={css(styles.labelContent)}\n          type=\"text\"\n          id=\"editable-input\"\n          ref={editableInputRef}\n          value={currValue}\n          onChange={updateVal}\n          {...editableProps}\n        />\n      )}\n    </LabelComponent>\n  );\n};\nLabel.displayName = 'Label';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}