{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel)\n    }, React.createElement(\"span\", {\n      id: id\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel),\n      id: id\n    }, categoryName);\n  }\n  render() {\n    const _a = this.props,\n      {\n        categoryName,\n        children,\n        className,\n        isClosable,\n        closeBtnAriaLabel,\n        'aria-label': ariaLabel,\n        onClick,\n        onOverflowChipClick,\n        numChips,\n        expandedText,\n        collapsedText,\n        ouiaId,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen,\n        tooltipPosition\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n    const {\n      isOpen\n    } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: React.Children.count(children) - numChips\n    });\n    const renderChipGroup = id => {\n      const chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.chipGroup, className, categoryName && styles.modifiers.category),\n        role: \"group\"\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n        className: css(styles.chipGroupMain)\n      }, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.chipGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), chipArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem),\n        key: i\n      }, child)), numChildren > numChips && React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem)\n      }, React.createElement(Chip, {\n        isOverflowChip: true,\n        onClick: event => {\n          this.toggleCollapse();\n          onOverflowChipClick(event);\n        },\n        component: \"button\"\n      }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n        className: css(styles.chipGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`,\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      }))));\n    };\n    return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n  }\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  onOverflowChipClick: _e => undefined,\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"names":["React","styles","css","Button","Chip","Tooltip","TimesCircleIcon","fillTemplate","GenerateId","getOUIAProps","ChipGroup","Component","constructor","props","headingRef","createRef","toggleCollapse","setState","prevState","isOpen","isTooltipVisible","Boolean","current","offsetWidth","scrollWidth","state","defaultIsOpen","componentDidMount","renderLabel","id","categoryName","tooltipPosition","createElement","position","content","tabIndex","ref","className","chipGroupLabel","render","_a","children","isClosable","closeBtnAriaLabel","ariaLabel","onClick","onOverflowChipClick","numChips","expandedText","collapsedText","ouiaId","rest","__rest","numChildren","Children","count","collapsedTextResult","remaining","renderChipGroup","chipArray","toArray","slice","Object","assign","chipGroup","modifiers","category","role","displayName","chipGroupMain","chipGroupList","map","child","i","chipGroupListItem","key","isOverflowChip","event","component","chipGroupClose","variant","randomId","defaultProps","_e","undefined"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\ChipGroup\\ChipGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLUListElement>, OUIAProps {\n  /** Content rendered inside the chip group. Should be <Chip> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for chip group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of chips to show before overflow */\n  numChips?: number;\n  /** Flag if chip group can be closed*/\n  isClosable?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the chip group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Function that is called when clicking on the overflow (expand/collapse) chip button */\n  onOverflowChipClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  static displayName = 'ChipGroup';\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    onOverflowChipClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.chipGroupLabel)}>\n          <span id={id}>{categoryName}</span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.chipGroupLabel)} id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = (id: string) => {\n      const chipArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numChips)\n        : React.Children.toArray(children);\n\n      return (\n        <div\n          className={css(styles.chipGroup, className, categoryName && styles.modifiers.category)}\n          role=\"group\"\n          {...(categoryName && { 'aria-labelledby': id })}\n          {...(!categoryName && { 'aria-label': ariaLabel })}\n          {...getOUIAProps(ChipGroup.displayName, ouiaId)}\n        >\n          <div className={css(styles.chipGroupMain)}>\n            {categoryName && this.renderLabel(id)}\n            <ul\n              className={css(styles.chipGroupList)}\n              {...(categoryName && { 'aria-labelledby': id })}\n              {...(!categoryName && { 'aria-label': ariaLabel })}\n              role=\"list\"\n              {...rest}\n            >\n              {chipArray.map((child, i) => (\n                <li className={css(styles.chipGroupListItem)} key={i}>\n                  {child}\n                </li>\n              ))}\n              {numChildren > numChips && (\n                <li className={css(styles.chipGroupListItem)}>\n                  <Chip\n                    isOverflowChip\n                    onClick={event => {\n                      this.toggleCollapse();\n                      onOverflowChipClick(event);\n                    }}\n                    component=\"button\"\n                  >\n                    {isOpen ? expandedText : collapsedTextResult}\n                  </Chip>\n                </li>\n              )}\n            </ul>\n          </div>\n          {isClosable && (\n            <div className={css(styles.chipGroupClose)}>\n              <Button\n                variant=\"plain\"\n                aria-label={closeBtnAriaLabel}\n                onClick={onClick}\n                id={`remove_group_${id}`}\n                aria-labelledby={`remove_group_${id} ${id}`}\n                ouiaId={ouiaId || closeBtnAriaLabel}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return numChildren === 0 ? null : <GenerateId>{randomId => renderChipGroup(this.props.id || randomId)}</GenerateId>;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}