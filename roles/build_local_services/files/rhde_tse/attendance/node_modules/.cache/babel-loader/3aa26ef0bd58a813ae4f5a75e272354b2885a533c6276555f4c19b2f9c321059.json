{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport const MultipleFileUploadStatusItem = _a => {\n  var {\n      className,\n      file,\n      fileIcon,\n      onReadStarted = () => {},\n      onReadFinished = () => {},\n      onReadSuccess = () => {},\n      onReadFail = () => {},\n      onClearClick = () => {},\n      customFileHandler,\n      fileName,\n      fileSize,\n      progressValue,\n      progressVariant,\n      progressAriaLabel,\n      progressAriaLabelledBy,\n      progressId,\n      progressAriaLiveMessage,\n      buttonAriaLabel = 'Remove from list',\n      progressHelperText\n    } = _a,\n    props = __rest(_a, [\"className\", \"file\", \"fileIcon\", \"onReadStarted\", \"onReadFinished\", \"onReadSuccess\", \"onReadFail\", \"onClearClick\", \"customFileHandler\", \"fileName\", \"fileSize\", \"progressValue\", \"progressVariant\", \"progressAriaLabel\", \"progressAriaLabelledBy\", \"progressId\", \"progressAriaLiveMessage\", \"buttonAriaLabel\", \"progressHelperText\"]);\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState();\n  function readFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage(data.loaded / data.total * 100);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file).then(data => {\n        setLoadResult('success');\n        setLoadPercentage(100);\n        onReadFinished(file);\n        onReadSuccess(data, file);\n      }).catch(error => {\n        onReadFinished(file);\n        onReadFail(error, file);\n        setLoadResult('danger');\n      });\n    }\n  }, []);\n  const getHumanReadableFileSize = size => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n  const value = progressValue || loadPercentage;\n  const variant = progressVariant || loadResult;\n  const title = React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgress\n  }, React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ''), React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressSize\n  }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0)));\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.multipleFileUploadStatusItem, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemIcon\n  }, fileIcon || React.createElement(FileIcon, null)), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemMain\n  }, React.createElement(\"div\", {\n    className: \"pf-screen-reader\",\n    \"aria-live\": \"polite\"\n  }, progressAriaLiveMessage && typeof progressAriaLiveMessage === 'function' && progressAriaLiveMessage(+loadPercentage.toFixed(2)), progressAriaLiveMessage && typeof progressAriaLiveMessage === 'string' && progressAriaLiveMessage, !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`), React.createElement(Progress, {\n    title: title,\n    value: value,\n    variant: variant,\n    \"aria-label\": progressAriaLabel,\n    \"aria-labelledby\": progressAriaLabelledBy,\n    id: progressId,\n    helperText: progressHelperText\n  })), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemClose\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": buttonAriaLabel,\n    onClick: onClearClick\n  }, React.createElement(TimesCircleIcon, null))));\n};\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';","map":{"version":3,"names":["React","styles","css","Progress","Button","FileIcon","TimesCircleIcon","MultipleFileUploadStatusItem","_a","className","file","fileIcon","onReadStarted","onReadFinished","onReadSuccess","onReadFail","onClearClick","customFileHandler","fileName","fileSize","progressValue","progressVariant","progressAriaLabel","progressAriaLabelledBy","progressId","progressAriaLiveMessage","buttonAriaLabel","progressHelperText","props","__rest","loadPercentage","setLoadPercentage","useState","loadResult","setLoadResult","readFile","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","onprogress","data","lengthComputable","loaded","total","readAsDataURL","useEffect","then","catch","getHumanReadableFileSize","size","prefixes","prefixUnit","length","Math","round","value","variant","title","createElement","multipleFileUploadStatusItemProgress","multipleFileUploadStatusItemProgressText","name","multipleFileUploadStatusItemProgressSize","Object","assign","multipleFileUploadStatusItem","multipleFileUploadStatusItemIcon","multipleFileUploadStatusItemMain","toFixed","floor","id","helperText","multipleFileUploadStatusItemClose","onClick","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\MultipleFileUpload\\MultipleFileUploadStatusItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\n/** Automatically reads an uploaded file to render a visual representation of it, including\n * its name, size, and read status. This sub-component also allows custom reading of files\n * via various callbacks which will override the automatic reading behavior.\n */\n\nexport interface MultipleFileUploadStatusItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Class to add to outer div */\n  className?: string;\n  /** Adds accessibility text to the status item deletion button */\n  buttonAriaLabel?: string;\n  /** The file object being represented by the status item */\n  file?: File;\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader successfully reads the file */\n  onReadSuccess?: (data: string, file: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFail?: (error: DOMException, onReadFail: File) => void;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n\n  // Props to bypass built in behavior\n\n  /** A callback to process file reading in a custom way */\n  customFileHandler?: (file: File) => void;\n  /** A custom icon to show in place of the generic file icon */\n  fileIcon?: React.ReactNode;\n  /** A custom name to display for the file rather than using built in functionality to auto-fill it */\n  fileName?: string;\n  /** A custom file size to display for the file rather than using built in functionality to auto-fill it */\n  fileSize?: number;\n  /** A custom value to display for the progress component rather than using built in functionality to auto-fill it */\n  progressValue?: number;\n  /** A custom variant to apply to the progress component rather than using built in functionality to auto-fill it */\n  progressVariant?: 'danger' | 'success' | 'warning';\n\n  // Props passed through to the progress component\n\n  /** Adds accessible text to the progress bar. Required when title not used and there is not any label associated with the progress bar */\n  progressAriaLabel?: string;\n  /** Associates the progress bar with it's label for accessibility purposes. Required when title not used */\n  progressAriaLabelledBy?: string;\n  /** Modifies the text announced by assistive technologies when the progress bar updates. */\n  progressAriaLiveMessage?: string | ((loadPercentage: number) => string);\n  /** Unique identifier for progress. Generated if not specified. */\n  progressId?: string;\n  /** @beta Additional content related to the status item. */\n  progressHelperText?: React.ReactNode;\n}\n\nexport const MultipleFileUploadStatusItem: React.FunctionComponent<MultipleFileUploadStatusItemProps> = ({\n  className,\n  file,\n  fileIcon,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadSuccess = () => {},\n  onReadFail = () => {},\n  onClearClick = () => {},\n  customFileHandler,\n  fileName,\n  fileSize,\n  progressValue,\n  progressVariant,\n  progressAriaLabel,\n  progressAriaLabelledBy,\n  progressId,\n  progressAriaLiveMessage,\n  buttonAriaLabel = 'Remove from list',\n  progressHelperText,\n  ...props\n}: MultipleFileUploadStatusItemProps) => {\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState<undefined | 'danger' | 'success'>();\n\n  function readFile(file: File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage((data.loaded / data.total) * 100);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file)\n        .then(data => {\n          setLoadResult('success');\n          setLoadPercentage(100);\n          onReadFinished(file);\n          onReadSuccess(data as string, file);\n        })\n        .catch((error: DOMException) => {\n          onReadFinished(file);\n          onReadFail(error, file);\n          setLoadResult('danger');\n        });\n    }\n  }, []);\n\n  const getHumanReadableFileSize = (size: number) => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n\n  const value = progressValue || loadPercentage;\n  const variant = progressVariant || loadResult;\n\n  const title = (\n    <span className={styles.multipleFileUploadStatusItemProgress}>\n      <span className={styles.multipleFileUploadStatusItemProgressText}>{fileName || file?.name || ''}</span>\n      <span className={styles.multipleFileUploadStatusItemProgressSize}>\n        {fileSize || getHumanReadableFileSize(file?.size || 0)}\n      </span>\n    </span>\n  );\n\n  return (\n    <li className={css(styles.multipleFileUploadStatusItem, className)} {...props}>\n      <div className={styles.multipleFileUploadStatusItemIcon}>{fileIcon || <FileIcon />}</div>\n      <div className={styles.multipleFileUploadStatusItemMain}>\n        <div className=\"pf-screen-reader\" aria-live=\"polite\">\n          {progressAriaLiveMessage &&\n            typeof progressAriaLiveMessage === 'function' &&\n            progressAriaLiveMessage(+loadPercentage.toFixed(2))}\n          {progressAriaLiveMessage && typeof progressAriaLiveMessage === 'string' && progressAriaLiveMessage}\n          {!progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`}\n        </div>\n        <Progress\n          title={title}\n          value={value}\n          variant={variant}\n          aria-label={progressAriaLabel}\n          aria-labelledby={progressAriaLabelledBy}\n          id={progressId}\n          helperText={progressHelperText}\n        />\n      </div>\n      <div className={styles.multipleFileUploadStatusItemClose}>\n        <Button variant=\"plain\" aria-label={buttonAriaLabel} onClick={onClearClick}>\n          <TimesCircleIcon />\n        </Button>\n      </div>\n    </li>\n  );\n};\n\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}