{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\nexport const DataListContext = React.createContext({\n  isSelectable: false\n});\nconst moveItem = (arr, i1, toIndex) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\nexport class DataList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dragFinished = false;\n    this.html5DragDrop = false;\n    this.arrayCopy = React.Children.toArray(this.props.children);\n    this.ref = React.createRef();\n    this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n    this.getIndex = id => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    this.move = itemOrder => {\n      const ulNode = this.ref.current;\n      const nodes = Array.from(ulNode.children);\n      if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n        return;\n      }\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n      itemOrder.forEach(id => {\n        ulNode.appendChild(nodes.find(n => n.id === id));\n      });\n    };\n    this.dragStart0 = el => {\n      const {\n        onDragStart\n      } = this.props;\n      const draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n      this.setState({\n        draggedItemId,\n        dragging: true\n      });\n      onDragStart && onDragStart(draggedItemId);\n    };\n    this.dragStart = evt => {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n      this.dragStart0(evt.currentTarget);\n    };\n    this.onDragCancel = () => {\n      this.move(this.props.itemOrder);\n      Array.from(this.ref.current.children).forEach(el => {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n      if (this.props.onDragCancel) {\n        this.props.onDragCancel();\n      }\n    };\n    this.dragLeave = evt => {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!this.isValidDrop(evt)) {\n        this.move(this.props.itemOrder);\n        this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n    this.dragEnd0 = el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n    this.dragEnd = evt => {\n      this.dragEnd0(evt.target);\n    };\n    this.isValidDrop = evt => {\n      const ulRect = this.ref.current.getBoundingClientRect();\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n    this.drop = evt => {\n      if (this.isValidDrop(evt)) {\n        this.props.onDragFinish(this.state.tempItemOrder);\n      } else {\n        this.onDragCancel();\n      }\n    };\n    this.dragOver0 = id => {\n      const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n      if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n        const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n        this.move(tempItemOrder);\n        this.setState({\n          draggingToItemIndex,\n          tempItemOrder\n        });\n      }\n    };\n    this.dragOver = evt => {\n      evt.preventDefault();\n      const curListItem = evt.target.closest('li');\n      if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        this.dragOver0(curListItem.id);\n      }\n    };\n    this.handleDragButtonKeys = evt => {\n      const {\n        dragging\n      } = this.state;\n      if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n        if (dragging) {\n          evt.preventDefault();\n        }\n        return;\n      }\n      evt.preventDefault();\n      const dragItem = evt.target.closest('li');\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          this.setState({\n            dragging: false\n          });\n          this.dragFinished = true;\n          if (evt.key === 'Enter') {\n            this.dragEnd0(dragItem);\n            this.props.onDragFinish(this.state.tempItemOrder);\n          } else {\n            this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          const nextSelection = dragItem.previousSibling;\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          const nextSelection = dragItem.nextSibling;\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        }\n      }\n    };\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n  componentDidUpdate(oldProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        onSelectDataListItem,\n        selectedDataListItemId,\n        isCompact,\n        wrapModifier,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onDragStart,\n        onDragMove,\n        onDragCancel,\n        onDragFinish,\n        gridBreakpoint,\n        itemOrder,\n        selectableRow\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n    const {\n      dragging\n    } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n    const updateSelectedDataListItem = id => {\n      onSelectDataListItem(id);\n    };\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n    return React.createElement(DataListContext.Provider, {\n      value: {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        selectableRow,\n        isDraggable: this.html5DragDrop,\n        dragStart: this.dragStart,\n        dragEnd: this.dragEnd,\n        drop: this.drop,\n        dragKeyHandler: this.handleDragButtonKeys\n      }\n    }, React.createElement(\"ul\", Object.assign({\n      className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n      style: props.style\n    }, props, dragProps, {\n      ref: this.ref\n    }), children));\n  }\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"names":["React","css","styles","stylesGrid","gridBreakpointClasses","none","modifiers","gridNone","always","sm","gridSm","md","gridMd","lg","gridLg","xl","gridXl","grid_2xl","DataListWrapModifier","DataListContext","createContext","isSelectable","moveItem","arr","i1","toIndex","fromIndex","indexOf","temp","splice","DataList","Component","constructor","props","dragFinished","html5DragDrop","arrayCopy","Children","toArray","children","ref","createRef","state","tempItemOrder","draggedItemId","draggingToItemIndex","dragging","getIndex","id","Array","from","current","findIndex","item","move","itemOrder","ulNode","nodes","map","node","every","i","firstChild","removeChild","lastChild","forEach","appendChild","find","n","dragStart0","el","onDragStart","classList","add","ghostRow","setAttribute","setState","dragStart","evt","dataTransfer","effectAllowed","setData","currentTarget","onDragCancel","remove","dragOver","dragLeave","isValidDrop","dragEnd0","dragEnd","target","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","drop","onDragFinish","dragOver0","preventDefault","curListItem","closest","contains","handleDragButtonKeys","includes","key","dragItem","nextSelection","previousSibling","querySelector","dataListItemDraggableButton","focus","nextSibling","Boolean","onDragMove","console","warn","componentDidUpdate","oldProps","render","_a","className","onSelectDataListItem","selectedDataListItemId","isCompact","wrapModifier","gridBreakpoint","selectableRow","__rest","undefined","updateSelectedDataListItem","dragProps","onDragOver","onDrop","onDragLeave","createElement","Provider","value","isDraggable","dragKeyHandler","Object","assign","dataList","compact","style","displayName","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DataList\\DataList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid', // Placeholder per https://github.com/patternfly/patternfly-react/issues/4965#issuecomment-704984236\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\n\nexport enum DataListWrapModifier {\n  nowrap = 'nowrap',\n  truncate = 'truncate',\n  breakWord = 'breakWord'\n}\n\nexport interface SelectableRowObject {\n  /** Callback that executes when the screen reader accessible element receives a change event */\n  onChange: (id: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport interface DataListProps extends Omit<React.HTMLProps<HTMLUListElement>, 'onDragStart' | 'ref'> {\n  /** Content rendered inside the DataList list */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList list */\n  className?: string;\n  /** Adds accessible text to the DataList list */\n  'aria-label': string;\n  /** Optional callback to make DataList selectable, fired when DataListItem selected */\n  onSelectDataListItem?: (id: string) => void;\n  /** @deprecated Optional callback to make DataList draggable, fired when dragging ends */\n  onDragFinish?: (newItemOrder: string[]) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging starts */\n  onDragStart?: (id: string) => void;\n  /** @deprecated Optional informational callback for dragging, fired when an item moves */\n  onDragMove?: (oldIndex: number, newIndex: number) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging is cancelled */\n  onDragCancel?: () => void;\n  /** Id of DataList item currently selected */\n  selectedDataListItemId?: string;\n  /** Flag indicating if DataList should have compact styling */\n  isCompact?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakpoint?: 'none' | 'always' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Determines which wrapping modifier to apply to the DataList */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** @deprecated Order of items in a draggable DataList */\n  itemOrder?: string[];\n  /** Object that causes the data list to render hidden inputs which improve selectable item a11y */\n  selectableRow?: SelectableRowObject;\n}\n\ninterface DataListState {\n  draggedItemId: string;\n  draggingToItemIndex: number;\n  dragging: boolean;\n  tempItemOrder: string[];\n}\n\ninterface DataListContextProps {\n  isSelectable: boolean;\n  selectedDataListItemId: string;\n  updateSelectedDataListItem: (id: string) => void;\n  selectableRow?: SelectableRowObject;\n  isDraggable: boolean;\n  dragStart: (e: React.DragEvent) => void;\n  dragEnd: (e: React.DragEvent) => void;\n  drop: (e: React.DragEvent) => void;\n  dragKeyHandler: (e: React.KeyboardEvent) => void;\n}\n\nexport const DataListContext = React.createContext<Partial<DataListContextProps>>({\n  isSelectable: false\n});\n\nconst moveItem = (arr: string[], i1: string, toIndex: number) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n\n  return arr;\n};\n\nexport class DataList extends React.Component<DataListProps, DataListState> {\n  static displayName = 'DataList';\n  static defaultProps: PickOptional<DataListProps> = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n  };\n  dragFinished: boolean = false;\n  html5DragDrop: boolean = false;\n  arrayCopy: React.ReactElement[] = React.Children.toArray(this.props.children) as React.ReactElement[];\n  ref = React.createRef<HTMLUListElement>();\n\n  state: DataListState = {\n    tempItemOrder: [],\n    draggedItemId: null,\n    draggingToItemIndex: null,\n    dragging: false\n  };\n\n  constructor(props: DataListProps) {\n    super(props);\n\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n\n  componentDidUpdate(oldProps: DataListProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  getIndex = (id: string) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n  move = (itemOrder: string[]) => {\n    const ulNode = this.ref.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n      return;\n    }\n    while (ulNode.firstChild) {\n      ulNode.removeChild(ulNode.lastChild);\n    }\n\n    itemOrder.forEach(id => {\n      ulNode.appendChild(nodes.find(n => n.id === id));\n    });\n  };\n\n  dragStart0 = (el: HTMLElement) => {\n    const { onDragStart } = this.props;\n    const draggedItemId = el.id;\n\n    el.classList.add(styles.modifiers.ghostRow);\n    el.setAttribute('aria-pressed', 'true');\n    this.setState({\n      draggedItemId,\n      dragging: true\n    });\n    onDragStart && onDragStart(draggedItemId);\n  };\n\n  dragStart = (evt: React.DragEvent) => {\n    evt.dataTransfer.effectAllowed = 'move';\n    evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n    this.dragStart0(evt.currentTarget as HTMLElement);\n  };\n\n  onDragCancel = () => {\n    this.move(this.props.itemOrder);\n    Array.from(this.ref.current.children).forEach(el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n    });\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n\n    if (this.props.onDragCancel) {\n      this.props.onDragCancel();\n    }\n  };\n\n  dragLeave = (evt: React.DragEvent) => {\n    // This event false fires when we call `this.move()`, so double check we're out of zone\n    if (!this.isValidDrop(evt)) {\n      this.move(this.props.itemOrder);\n      this.setState({\n        draggingToItemIndex: null\n      });\n    }\n  };\n\n  dragEnd0 = (el: HTMLElement) => {\n    el.classList.remove(styles.modifiers.ghostRow);\n    el.classList.remove(styles.modifiers.dragOver);\n    el.setAttribute('aria-pressed', 'false');\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n  };\n\n  dragEnd = (evt: React.DragEvent) => {\n    this.dragEnd0(evt.target as HTMLElement);\n  };\n\n  isValidDrop = (evt: React.DragEvent) => {\n    const ulRect = this.ref.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  drop = (evt: React.DragEvent) => {\n    if (this.isValidDrop(evt)) {\n      this.props.onDragFinish(this.state.tempItemOrder);\n    } else {\n      this.onDragCancel();\n    }\n  };\n\n  dragOver0 = (id: string) => {\n    const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n      const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n      this.move(tempItemOrder);\n\n      this.setState({\n        draggingToItemIndex,\n        tempItemOrder\n      });\n    }\n  };\n\n  dragOver = (evt: React.DragEvent): string | null => {\n    evt.preventDefault();\n\n    const curListItem = (evt.target as HTMLElement).closest('li');\n    if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n      // We're going nowhere, don't bother calling `dragOver0`\n      return null;\n    } else {\n      this.dragOver0(curListItem.id);\n    }\n  };\n\n  handleDragButtonKeys = (evt: React.KeyboardEvent) => {\n    const { dragging } = this.state;\n    if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n      if (dragging) {\n        evt.preventDefault();\n      }\n      return;\n    }\n    evt.preventDefault();\n\n    const dragItem = (evt.target as Element).closest('li');\n\n    if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n      this.dragStart0(dragItem);\n    } else if (dragging) {\n      if (evt.key === 'Escape' || evt.key === 'Enter') {\n        this.setState({\n          dragging: false\n        });\n        this.dragFinished = true;\n        if (evt.key === 'Enter') {\n          this.dragEnd0(dragItem);\n          this.props.onDragFinish(this.state.tempItemOrder);\n        } else {\n          this.onDragCancel();\n        }\n      } else if (evt.key === 'ArrowUp') {\n        const nextSelection = dragItem.previousSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      } else if (evt.key === 'ArrowDown') {\n        const nextSelection = dragItem.nextSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      }\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder,\n      selectableRow,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const { dragging } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n\n    const updateSelectedDataListItem = (id: string) => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n\n    return (\n      <DataListContext.Provider\n        value={{\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }}\n      >\n        <ul\n          className={css(\n            styles.dataList,\n            isCompact && styles.modifiers.compact,\n            gridBreakpointClasses[gridBreakpoint],\n            wrapModifier && styles.modifiers[wrapModifier],\n            dragging && styles.modifiers.dragOver,\n            className\n          )}\n          style={props.style}\n          {...props}\n          {...dragProps}\n          ref={this.ref}\n        >\n          {children}\n        </ul>\n      </DataListContext.Provider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}