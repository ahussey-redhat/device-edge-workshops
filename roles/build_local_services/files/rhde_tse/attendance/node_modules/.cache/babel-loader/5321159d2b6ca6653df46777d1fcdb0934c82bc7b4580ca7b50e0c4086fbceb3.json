{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.toggle = React.createRef();\n    this.componentDidMount = () => {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n    this.componentWillUnmount = () => {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle\n      } = this.props;\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n    this.onEscPress = event => {\n      const {\n        isOpen,\n        onToggle\n      } = this.props;\n      if (isOpen && event.key === KeyTypes.Escape) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        onEnter\n      } = this.props;\n      if (event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter) {\n        return;\n      }\n      event.preventDefault();\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        toggleText,\n        isOpen,\n        onToggle,\n        id,\n        isPlain,\n        isText,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive,\n        onEnter,\n        parentRef\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n    return React.createElement(\"button\", Object.assign({}, props, {\n      id: id,\n      ref: this.toggle,\n      className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n      type: \"button\",\n      onClick: event => onToggle(event, !isOpen),\n      \"aria-expanded\": isOpen,\n      onKeyDown: this.onKeyDown\n    }), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleText)\n    }, toggleText), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    })));\n  }\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: () => undefined,\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: (event, value) => undefined\n};","map":{"version":3,"names":["React","CaretDownIcon","styles","css","KeyTypes","ContextSelectorToggle","Component","constructor","toggle","createRef","componentDidMount","document","addEventListener","onDocClick","onEscPress","componentWillUnmount","removeEventListener","event","isOpen","parentRef","onToggle","props","current","contains","target","focus","key","Escape","onKeyDown","onEnter","Tab","Enter","preventDefault","Space","render","_a","className","toggleText","id","isPlain","isText","isActive","__rest","createElement","Object","assign","ref","contextSelectorToggle","modifiers","active","plain","text","type","onClick","contextSelectorToggleText","contextSelectorToggleIcon","displayName","defaultProps","undefined","value"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\ContextSelector\\ContextSelectorToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Component or string that will be used in the context selector.\n   * This prop is placed in a button, and cannot contain any interactive elements\n   */\n  toggleText?: React.ReactNode;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static displayName = 'ContextSelectorToggle';\n  static defaultProps: PickOptional<ContextSelectorToggleProps> = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef?.current && !parentRef.current.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onEscPress = (event: any) => {\n    const { isOpen, onToggle } = this.props;\n    if (isOpen && event.key === KeyTypes.Escape) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.key === KeyTypes.Tab && !isOpen) || event.key !== KeyTypes.Enter) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n      onToggle(null, !isOpen);\n    } else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isActive && styles.modifiers.active,\n          isPlain && styles.modifiers.plain,\n          isText && styles.modifiers.text,\n          className\n        )}\n        type=\"button\"\n        onClick={event => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <span className={css(styles.contextSelectorToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </button>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}