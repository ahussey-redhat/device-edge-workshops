{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\nconst SearchInputBase = _a => {\n  var {\n      className,\n      value = '',\n      attributes = [],\n      formAdditionalItems,\n      hasWordsAttrLabel = 'Has words',\n      advancedSearchDelimiter,\n      placeholder,\n      hint,\n      onChange,\n      onSearch,\n      onClear,\n      onToggleAdvancedSearch,\n      isAdvancedSearchOpen,\n      resultsCount,\n      onNextClick,\n      onPreviousClick,\n      innerRef,\n      expandableInput,\n      'aria-label': ariaLabel = 'Search input',\n      resetButtonLabel = 'Reset',\n      openMenuButtonAriaLabel = 'Open advanced search',\n      previousNavigationButtonAriaLabel = 'Previous',\n      isPreviousNavigationButtonDisabled = false,\n      isNextNavigationButtonDisabled = false,\n      nextNavigationButtonAriaLabel = 'Next',\n      submitSearchButtonLabel = 'Search',\n      isDisabled = false,\n      appendTo,\n      removeFindDomNode = false,\n      zIndex = 9999,\n      type = 'text',\n      name\n    } = _a,\n    props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", \"expandableInput\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\", \"appendTo\", \"removeFindDomNode\", \"zIndex\", \"type\", \"name\"]);\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const ref = React.useRef(null);\n  const searchInputInputRef = innerRef || ref;\n  const searchInputExpandableToggleRef = React.useRef(null);\n  const [focusAfterExpandChange, setFocusAfterExpandChange] = React.useState(false);\n  const {\n    isExpanded,\n    onToggleExpand,\n    toggleAriaLabel\n  } = expandableInput || {};\n  React.useEffect(() => {\n    var _a, _b;\n    // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n    // expansion toggle is fired without focusing on mount\n    if (!focusAfterExpandChange) {\n      return;\n    } else if (isExpanded) {\n      (_a = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    setFocusAfterExpandChange(false);\n  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n  const onChangeHandler = (event, value) => {\n    if (onChange) {\n      onChange(event, value);\n    }\n    setSearchValue(value);\n  };\n  const onToggle = e => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n  const onSearchHandler = event => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n  const splitStringExceptInQuotes = str => {\n    let quoteType;\n    return str.match(/\\\\?.|^$/g).reduce((p, c) => {\n      if (c === \"'\" || c === '\"') {\n        if (!quoteType) {\n          quoteType = c;\n        }\n        if (c === quoteType) {\n          p.quote = !p.quote;\n        }\n      } else if (!p.quote && c === ' ') {\n        p.a.push('');\n      } else {\n        p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n      }\n      return p;\n    }, {\n      a: ['']\n    }).a;\n  };\n  const getAttrValueMap = () => {\n    const attrValue = {};\n    const pairs = splitStringExceptInQuotes(searchValue);\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n  const onEnter = event => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n  const onClearInput = e => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n  const onExpandHandler = event => {\n    setSearchValue('');\n    onToggleExpand(event, isExpanded);\n    setFocusAfterExpandChange(true);\n  };\n  const renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);\n  const buildTextInputGroup = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(TextInputGroup, Object.assign({\n      isDisabled: isDisabled\n    }, searchInputProps), React.createElement(TextInputGroupMain, {\n      hint: hint,\n      icon: React.createElement(SearchIcon, null),\n      innerRef: searchInputInputRef,\n      value: searchValue,\n      placeholder: placeholder,\n      \"aria-label\": ariaLabel,\n      onKeyDown: onEnter,\n      onChange: onChangeHandler,\n      type: type,\n      name: name\n    }), renderUtilities && React.createElement(TextInputGroupUtilities, null, resultsCount && React.createElement(Badge, {\n      isRead: true\n    }, resultsCount), !!onNextClick && !!onPreviousClick && React.createElement(\"div\", {\n      className: \"pf-c-text-input-group__group\"\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": previousNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isPreviousNavigationButtonDisabled,\n      onClick: onPreviousClick\n    }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": nextNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isNextNavigationButtonDisabled,\n      onClick: onNextClick\n    }, React.createElement(AngleDownIcon, null))), !!onClear && !expandableInput && React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      isDisabled: isDisabled,\n      \"aria-label\": resetButtonLabel,\n      onClick: onClearInput\n    }, React.createElement(TimesIcon, null))));\n  };\n  const expandableToggle = React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded,\n    icon: isExpanded ? React.createElement(TimesIcon, null) : React.createElement(SearchIcon, null),\n    onClick: onExpandHandler,\n    ref: searchInputExpandableToggleRef\n  });\n  const buildExpandableSearchInput = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), expandableToggle);\n  };\n  const buildSearchTextInputGroup = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    if (expandableInput) {\n      return buildExpandableSearchInput(Object.assign({}, searchInputProps));\n    }\n    return buildTextInputGroup(Object.assign({}, searchInputProps));\n  };\n  const buildSearchTextInputGroupWithExtraButtons = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), (attributes.length > 0 || onToggleAdvancedSearch) && React.createElement(Button, {\n      className: isSearchMenuOpen && 'pf-m-expanded',\n      variant: ButtonVariant.control,\n      \"aria-label\": openMenuButtonAriaLabel,\n      onClick: onToggle,\n      isDisabled: isDisabled,\n      \"aria-expanded\": isSearchMenuOpen\n    }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n      type: \"submit\",\n      variant: ButtonVariant.control,\n      \"aria-label\": submitSearchButtonLabel,\n      onClick: onSearchHandler,\n      isDisabled: isDisabled || !searchValue\n    }, React.createElement(ArrowRightIcon, null)), expandableInput && expandableToggle);\n  };\n  const searchInputProps = Object.assign(Object.assign({}, props), {\n    className: className && css(className),\n    innerRef: searchInputRef\n  });\n  if (!!expandableInput && !isExpanded) {\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), expandableToggle);\n  }\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      const AdvancedSearch = React.createElement(\"div\", null, React.createElement(AdvancedSearchMenu, {\n        value: value,\n        parentRef: searchInputRef,\n        parentInputRef: searchInputInputRef,\n        onSearch: onSearch,\n        onClear: onClear,\n        onChange: onChange,\n        onToggleAdvancedMenu: onToggle,\n        resetButtonLabel: resetButtonLabel,\n        submitSearchButtonLabel: submitSearchButtonLabel,\n        attributes: attributes,\n        formAdditionalItems: formAdditionalItems,\n        hasWordsAttrLabel: hasWordsAttrLabel,\n        advancedSearchDelimiter: advancedSearchDelimiter,\n        getAttrValueMap: getAttrValueMap,\n        isSearchMenuOpen: isSearchMenuOpen\n      }));\n      const AdvancedSearchWithPopper = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), React.createElement(Popper, {\n        trigger: buildSearchTextInputGroupWithExtraButtons(),\n        popper: AdvancedSearch,\n        isVisible: isSearchMenuOpen,\n        enableFlip: true,\n        appendTo: () => appendTo || searchInputRef.current,\n        removeFindDomNode: removeFindDomNode,\n        zIndex: zIndex\n      }));\n      const AdvancedSearchInline = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), buildSearchTextInputGroupWithExtraButtons(), AdvancedSearch);\n      return appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n    }\n    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => React.createElement(SearchInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"names":["React","css","Button","ButtonVariant","Badge","AngleDownIcon","AngleUpIcon","TimesIcon","SearchIcon","CaretDownIcon","ArrowRightIcon","AdvancedSearchMenu","TextInputGroup","TextInputGroupMain","TextInputGroupUtilities","InputGroup","Popper","SearchInputBase","_a","className","value","attributes","formAdditionalItems","hasWordsAttrLabel","advancedSearchDelimiter","placeholder","hint","onChange","onSearch","onClear","onToggleAdvancedSearch","isAdvancedSearchOpen","resultsCount","onNextClick","onPreviousClick","innerRef","expandableInput","ariaLabel","resetButtonLabel","openMenuButtonAriaLabel","previousNavigationButtonAriaLabel","isPreviousNavigationButtonDisabled","isNextNavigationButtonDisabled","nextNavigationButtonAriaLabel","submitSearchButtonLabel","isDisabled","appendTo","removeFindDomNode","zIndex","type","name","props","__rest","isSearchMenuOpen","setIsSearchMenuOpen","useState","searchValue","setSearchValue","searchInputRef","useRef","ref","searchInputInputRef","searchInputExpandableToggleRef","focusAfterExpandChange","setFocusAfterExpandChange","isExpanded","onToggleExpand","toggleAriaLabel","useEffect","current","focus","_b","length","console","error","onChangeHandler","event","onToggle","e","isOpen","onSearchHandler","preventDefault","getAttrValueMap","splitStringExceptInQuotes","str","quoteType","match","reduce","p","c","quote","a","push","replace","attrValue","pairs","map","pair","splitPair","split","haswords","hasOwnProperty","onEnter","key","onClearInput","onExpandHandler","renderUtilities","buildTextInputGroup","arguments","undefined","searchInputProps","createElement","Object","assign","icon","onKeyDown","isRead","variant","plain","onClick","expandableToggle","buildExpandableSearchInput","buildSearchTextInputGroup","buildSearchTextInputGroupWithExtraButtons","control","AdvancedSearch","parentRef","parentInputRef","onToggleAdvancedMenu","AdvancedSearchWithPopper","trigger","popper","isVisible","enableFlip","AdvancedSearchInline","displayName","SearchInput","forwardRef"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\SearchInput\\SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\n\n/** Properties for adding search attributes to an advanced search input. These properties must\n * be passed in as an object within an array to the search input component's attribute properrty.\n */\n\nexport interface SearchInputSearchAttribute {\n  /** The search attribute's value to be provided in the search input's query string.\n   * It should have no spaces and be unique for every attribute.\n   */\n  attr: string;\n  /** The search attribute's display name. It is used to label the field in the advanced\n   * search menu.\n   */\n  display: React.ReactNode;\n}\n\n/** Properties for creating an expandable search input. These properties should be passed into\n * the search input component's expandableInput property.\n */\n\nexport interface SearchInputExpandable {\n  /** Flag to indicate if the search input is expanded. */\n  isExpanded: boolean;\n  /** Callback function to toggle the expandable search input. */\n  onToggleExpand: (event: React.SyntheticEvent<HTMLButtonElement>, isExpanded: boolean) => void;\n  /** An accessible label for the expandable search input toggle. */\n  toggleAriaLabel: string;\n}\n\n/** The main search input component. */\n\nexport interface SearchInputProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'results' | 'ref'> {\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props.\n   */\n  advancedSearchDelimiter?: string;\n  /** The container to append the menu to.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * appendTo={() => document.body}\n   * appendTo={document.getElementById('target')}\n   */\n  appendTo?: HTMLElement | (() => HTMLElement) | 'inline';\n  /** An accessible label for the search input. */\n  'aria-label'?: string;\n  /** Array of attribute values used for dynamically generated advanced search. */\n  attributes?: string[] | SearchInputSearchAttribute[];\n  /** Additional classes added to the search input. */\n  className?: string;\n  /** Object that makes the search input expandable/collapsible. */\n  expandableInput?: SearchInputExpandable;\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a form group component for automatic formatting. */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes. */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** A suggestion for autocompleting. */\n  hint?: string;\n  /** Type of the input */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** @hide A reference object to attach to the input box. */\n  innerRef?: React.RefObject<any>;\n  /** A flag for controlling the open state of a custom advanced search implementation. */\n  isAdvancedSearchOpen?: boolean;\n  /** Flag indicating if search input is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating if the next navigation button is disabled. */\n  isNextNavigationButtonDisabled?: boolean;\n  /** Flag indicating if the previous navigation button is disabled. */\n  isPreviousNavigationButtonDisabled?: boolean;\n  /** Accessible label for the button to navigate to next result. */\n  nextNavigationButtonAriaLabel?: string;\n  /** A callback for when the input value changes. */\n  onChange?: (event: React.FormEvent<HTMLInputElement>, value: string) => void;\n  /** A callback for when the user clicks the clear button. */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the user clicks to navigate to next result. */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the user clicks to navigate to previous result. */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the search button is clicked. */\n  onSearch?: (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    value: string,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the open advanced search button is clicked. */\n  onToggleAdvancedSearch?: (event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void;\n  /** Accessible label for the button which opens the advanced search form menu. */\n  openMenuButtonAriaLabel?: string;\n  /** Placeholder text of the search input. */\n  placeholder?: string;\n  /** Accessible label for the button to navigate to previous result. */\n  previousNavigationButtonAriaLabel?: string;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the advanced search form when appendTo is not inline. */\n  zIndex?: number;\n  /** Label for the button which resets the advanced search form and clears the search input. */\n  resetButtonLabel?: string;\n  /** The number of search results returned. Either a total number of results,\n   * or a string representing the current result over the total number of results. i.e. \"1 / 5\". */\n  resultsCount?: number | string;\n  /** Label for the button which calls the onSearch event handler. */\n  submitSearchButtonLabel?: string;\n  /** Value of the search input. */\n  value?: string;\n  /** Name attribue for the search input */\n  name?: string;\n}\n\nconst SearchInputBase: React.FunctionComponent<SearchInputProps> = ({\n  className,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  placeholder,\n  hint,\n  onChange,\n  onSearch,\n  onClear,\n  onToggleAdvancedSearch,\n  isAdvancedSearchOpen,\n  resultsCount,\n  onNextClick,\n  onPreviousClick,\n  innerRef,\n  expandableInput,\n  'aria-label': ariaLabel = 'Search input',\n  resetButtonLabel = 'Reset',\n  openMenuButtonAriaLabel = 'Open advanced search',\n  previousNavigationButtonAriaLabel = 'Previous',\n  isPreviousNavigationButtonDisabled = false,\n  isNextNavigationButtonDisabled = false,\n  nextNavigationButtonAriaLabel = 'Next',\n  submitSearchButtonLabel = 'Search',\n  isDisabled = false,\n  appendTo,\n  removeFindDomNode = false,\n  zIndex = 9999,\n  type = 'text',\n  name,\n  ...props\n}: SearchInputProps) => {\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const ref = React.useRef(null);\n  const searchInputInputRef = innerRef || ref;\n  const searchInputExpandableToggleRef = React.useRef(null);\n  const [focusAfterExpandChange, setFocusAfterExpandChange] = React.useState(false);\n\n  const { isExpanded, onToggleExpand, toggleAriaLabel } = expandableInput || {};\n\n  React.useEffect(() => {\n    // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n    // expansion toggle is fired without focusing on mount\n    if (!focusAfterExpandChange) {\n      return;\n    } else if (isExpanded) {\n      searchInputInputRef?.current?.focus();\n    } else {\n      searchInputExpandableToggleRef?.current?.focus();\n    }\n    setFocusAfterExpandChange(false);\n  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  const onChangeHandler = (event: React.FormEvent<HTMLInputElement>, value: string) => {\n    if (onChange) {\n      onChange(event, value);\n    }\n    setSearchValue(value);\n  };\n\n  const onToggle = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n\n  const splitStringExceptInQuotes = (str: string) => {\n    let quoteType: string;\n\n    return str.match(/\\\\?.|^$/g).reduce(\n      (p: any, c: string) => {\n        if (c === \"'\" || c === '\"') {\n          if (!quoteType) {\n            quoteType = c;\n          }\n          if (c === quoteType) {\n            p.quote = !p.quote;\n          }\n        } else if (!p.quote && c === ' ') {\n          p.a.push('');\n        } else {\n          p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n        }\n        return p;\n      },\n      { a: [''] }\n    ).a;\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue: { [key: string]: string } = {};\n    const pairs = splitStringExceptInQuotes(searchValue);\n    pairs.map((pair: string) => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords')\n          ? `${attrValue.haswords} ${splitPair[0]}`\n          : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const onEnter = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  const onClearInput = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  const onExpandHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    setSearchValue('');\n    onToggleExpand(event, isExpanded);\n    setFocusAfterExpandChange(true);\n  };\n\n  const renderUtilities =\n    value && (resultsCount || (!!onNextClick && !!onPreviousClick) || (!!onClear && !expandableInput));\n\n  const buildTextInputGroup = ({ ...searchInputProps } = {}) => (\n    <TextInputGroup isDisabled={isDisabled} {...searchInputProps}>\n      <TextInputGroupMain\n        hint={hint}\n        icon={<SearchIcon />}\n        innerRef={searchInputInputRef}\n        value={searchValue}\n        placeholder={placeholder}\n        aria-label={ariaLabel}\n        onKeyDown={onEnter}\n        onChange={onChangeHandler}\n        type={type}\n        name={name}\n      />\n      {renderUtilities && (\n        <TextInputGroupUtilities>\n          {resultsCount && <Badge isRead>{resultsCount}</Badge>}\n          {!!onNextClick && !!onPreviousClick && (\n            <div className=\"pf-c-text-input-group__group\">\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={previousNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isPreviousNavigationButtonDisabled}\n                onClick={onPreviousClick}\n              >\n                <AngleUpIcon />\n              </Button>\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={nextNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isNextNavigationButtonDisabled}\n                onClick={onNextClick}\n              >\n                <AngleDownIcon />\n              </Button>\n            </div>\n          )}\n          {!!onClear && !expandableInput && (\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled}\n              aria-label={resetButtonLabel}\n              onClick={onClearInput}\n            >\n              <TimesIcon />\n            </Button>\n          )}\n        </TextInputGroupUtilities>\n      )}\n    </TextInputGroup>\n  );\n\n  const expandableToggle = (\n    <Button\n      variant={ButtonVariant.plain}\n      aria-label={toggleAriaLabel}\n      aria-expanded={isExpanded}\n      icon={isExpanded ? <TimesIcon /> : <SearchIcon />}\n      onClick={onExpandHandler}\n      ref={searchInputExpandableToggleRef}\n    />\n  );\n\n  const buildExpandableSearchInput = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildTextInputGroup()}\n      {expandableToggle}\n    </InputGroup>\n  );\n\n  const buildSearchTextInputGroup = ({ ...searchInputProps } = {}) => {\n    if (expandableInput) {\n      return buildExpandableSearchInput({ ...searchInputProps });\n    }\n\n    return buildTextInputGroup({ ...searchInputProps });\n  };\n\n  const buildSearchTextInputGroupWithExtraButtons = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildTextInputGroup()}\n      {(attributes.length > 0 || onToggleAdvancedSearch) && (\n        <Button\n          className={isSearchMenuOpen && 'pf-m-expanded'}\n          variant={ButtonVariant.control}\n          aria-label={openMenuButtonAriaLabel}\n          onClick={onToggle}\n          isDisabled={isDisabled}\n          aria-expanded={isSearchMenuOpen}\n        >\n          <CaretDownIcon />\n        </Button>\n      )}\n      {!!onSearch && (\n        <Button\n          type=\"submit\"\n          variant={ButtonVariant.control}\n          aria-label={submitSearchButtonLabel}\n          onClick={onSearchHandler}\n          isDisabled={isDisabled || !searchValue}\n        >\n          <ArrowRightIcon />\n        </Button>\n      )}\n      {expandableInput && expandableToggle}\n    </InputGroup>\n  );\n\n  const searchInputProps = {\n    ...props,\n    className: className && css(className),\n    innerRef: searchInputRef\n  };\n\n  if (!!expandableInput && !isExpanded) {\n    return <InputGroup {...searchInputProps}>{expandableToggle}</InputGroup>;\n  }\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      const AdvancedSearch = (\n        <div>\n          <AdvancedSearchMenu\n            value={value}\n            parentRef={searchInputRef}\n            parentInputRef={searchInputInputRef}\n            onSearch={onSearch}\n            onClear={onClear}\n            onChange={onChange}\n            onToggleAdvancedMenu={onToggle}\n            resetButtonLabel={resetButtonLabel}\n            submitSearchButtonLabel={submitSearchButtonLabel}\n            attributes={attributes}\n            formAdditionalItems={formAdditionalItems}\n            hasWordsAttrLabel={hasWordsAttrLabel}\n            advancedSearchDelimiter={advancedSearchDelimiter}\n            getAttrValueMap={getAttrValueMap}\n            isSearchMenuOpen={isSearchMenuOpen}\n          />\n        </div>\n      );\n\n      const AdvancedSearchWithPopper = (\n        <div className={css(className)} ref={searchInputRef} {...props}>\n          <Popper\n            trigger={buildSearchTextInputGroupWithExtraButtons()}\n            popper={AdvancedSearch}\n            isVisible={isSearchMenuOpen}\n            enableFlip={true}\n            appendTo={() => appendTo || searchInputRef.current}\n            removeFindDomNode={removeFindDomNode}\n            zIndex={zIndex}\n          />\n        </div>\n      );\n\n      const AdvancedSearchInline = (\n        <div className={css(className)} ref={searchInputRef} {...props}>\n          {buildSearchTextInputGroupWithExtraButtons()}\n          {AdvancedSearch}\n        </div>\n      );\n\n      return appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n    }\n    return buildSearchTextInputGroupWithExtraButtons({ ...searchInputProps });\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\n\nexport const SearchInput = React.forwardRef((props: SearchInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <SearchInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nSearchInput.displayName = 'SearchInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}