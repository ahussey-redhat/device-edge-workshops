{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport const ClipboardCopyButton = _a => {\n  var {\n      onClick,\n      exitDelay = 0,\n      entryDelay = 300,\n      maxWidth = '100px',\n      position = 'top',\n      'aria-label': ariaLabel = 'Copyable input',\n      id,\n      textId,\n      children,\n      variant = 'control',\n      onTooltipHidden = () => {},\n      removeFindDomNode = false\n    } = _a,\n    props = __rest(_a, [\"onClick\", \"exitDelay\", \"entryDelay\", \"maxWidth\", \"position\", 'aria-label', \"id\", \"textId\", \"children\", \"variant\", \"onTooltipHidden\", \"removeFindDomNode\"]);\n  return React.createElement(Tooltip, {\n    trigger: \"mouseenter focus click\",\n    exitDelay: exitDelay,\n    entryDelay: entryDelay,\n    maxWidth: maxWidth,\n    position: position,\n    \"aria-live\": \"polite\",\n    aria: \"none\",\n    content: React.createElement(\"div\", null, children),\n    onTooltipHidden: onTooltipHidden,\n    removeFindDomNode: removeFindDomNode\n  }, React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: variant,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": `${id} ${textId}`\n  }, props), React.createElement(CopyIcon, null)));\n};\nClipboardCopyButton.displayName = 'ClipboardCopyButton';","map":{"version":3,"names":["React","CopyIcon","Button","Tooltip","ClipboardCopyButton","_a","onClick","exitDelay","entryDelay","maxWidth","position","ariaLabel","id","textId","children","variant","onTooltipHidden","removeFindDomNode","props","__rest","createElement","trigger","aria","content","Object","assign","type","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\ClipboardCopy\\ClipboardCopyButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { PopoverPosition } from '../Popover';\n\nexport interface ClipboardCopyButtonProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Callback for the copy when the button is clicked */\n  onClick: (event: React.MouseEvent) => void;\n  /** Content of the copy button */\n  children: React.ReactNode;\n  /** ID of the copy button */\n  id: string;\n  /** ID of the content that is being copied */\n  textId: string;\n  /** Additional classes added to the copy button */\n  className?: string;\n  /** Exit delay on the copy button tooltip */\n  exitDelay?: number;\n  /** Entry delay on the copy button tooltip */\n  entryDelay?: number;\n  /** Max width of the copy button tooltip */\n  maxWidth?: string;\n  /** Position of the copy button tooltip */\n  position?:\n    | TooltipPosition\n    | PopoverPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** Aria-label for the copy button */\n  'aria-label'?: string;\n  /** Variant of the copy button */\n  variant?: 'control' | 'plain';\n  /** Callback when tooltip's hide transition has finished executing */\n  onTooltipHidden?: () => void;\n}\n\nexport const ClipboardCopyButton: React.FunctionComponent<ClipboardCopyButtonProps> = ({\n  onClick,\n  exitDelay = 0,\n  entryDelay = 300,\n  maxWidth = '100px',\n  position = 'top',\n  'aria-label': ariaLabel = 'Copyable input',\n  id,\n  textId,\n  children,\n  variant = 'control',\n  onTooltipHidden = () => {},\n  removeFindDomNode = false,\n  ...props\n}: ClipboardCopyButtonProps) => (\n  <Tooltip\n    trigger=\"mouseenter focus click\"\n    exitDelay={exitDelay}\n    entryDelay={entryDelay}\n    maxWidth={maxWidth}\n    position={position}\n    aria-live=\"polite\"\n    aria=\"none\"\n    content={<div>{children}</div>}\n    onTooltipHidden={onTooltipHidden}\n    removeFindDomNode={removeFindDomNode}\n  >\n    <Button\n      type=\"button\"\n      variant={variant}\n      onClick={onClick}\n      aria-label={ariaLabel}\n      id={id}\n      aria-labelledby={`${id} ${textId}`}\n      {...props}\n    >\n      <CopyIcon />\n    </Button>\n  </Tooltip>\n);\nClipboardCopyButton.displayName = 'ClipboardCopyButton';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,kDAAkD;AACvE,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,OAAO,QAAyB,YAAY;AAgDrD,OAAO,MAAMC,mBAAmB,GAAuDC,EAc5D,IAAI;MAdwD;MACrFC,OAAO;MACPC,SAAS,GAAG,CAAC;MACbC,UAAU,GAAG,GAAG;MAChBC,QAAQ,GAAG,OAAO;MAClBC,QAAQ,GAAG,KAAK;MAChB,YAAY,EAAEC,SAAS,GAAG,gBAAgB;MAC1CC,EAAE;MACFC,MAAM;MACNC,QAAQ;MACRC,OAAO,GAAG,SAAS;MACnBC,eAAe,GAAGA,CAAA,KAAK,CAAE,CAAC;MAC1BC,iBAAiB,GAAG;IAAK,IAAAZ,EAEA;IADtBa,KAAK,GAAAC,MAAA,CAAAd,EAAA,EAb6E,2JActF,CADS;EACsB,OAC9BL,KAAA,CAAAoB,aAAA,CAACjB,OAAO;IACNkB,OAAO,EAAC,wBAAwB;IAChCd,SAAS,EAAEA,SAAS;IACpBC,UAAU,EAAEA,UAAU;IACtBC,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAAA,aACR,QAAQ;IAClBY,IAAI,EAAC,MAAM;IACXC,OAAO,EAAEvB,KAAA,CAAAoB,aAAA,cAAMN,QAAQ,CAAO;IAC9BE,eAAe,EAAEA,eAAe;IAChCC,iBAAiB,EAAEA;EAAiB,GAEpCjB,KAAA,CAAAoB,aAAA,CAAClB,MAAM,EAAAsB,MAAA,CAAAC,MAAA;IACLC,IAAI,EAAC,QAAQ;IACbX,OAAO,EAAEA,OAAO;IAChBT,OAAO,EAAEA,OAAO;IAAA,cACJK,SAAS;IACrBC,EAAE,EAAEA,EAAE;IAAA,mBACW,GAAGA,EAAE,IAAIC,MAAM;EAAE,GAC9BK,KAAK,GAETlB,KAAA,CAAAoB,aAAA,CAACnB,QAAQ,OAAG,CACL,CACD;CACX;AACDG,mBAAmB,CAACuB,WAAW,GAAG,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}