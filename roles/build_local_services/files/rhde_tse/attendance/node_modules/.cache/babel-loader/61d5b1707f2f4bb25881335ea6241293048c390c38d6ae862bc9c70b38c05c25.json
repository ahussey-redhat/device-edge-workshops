{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\nexport class Toggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.buttonRef = React.createRef();\n    this.componentDidMount = () => {\n      document.addEventListener('click', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n    this.componentWillUnmount = () => {\n      document.removeEventListener('click', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle,\n        getMenuRef\n      } = this.props;\n      const menuRef = getMenuRef && getMenuRef();\n      const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);\n      }\n    };\n    this.onEscPress = event => {\n      var _a, _b, _c;\n      const {\n        parentRef,\n        getMenuRef\n      } = this.props;\n      const menuRef = getMenuRef && getMenuRef();\n      const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n      if (this.props.isOpen && (event.key === KeyTypes.Escape || event.key === 'Tab') && (escFromToggle || escFromWithinMenu)) {\n        (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, false, event);\n        (_c = this.buttonRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n      }\n    };\n    this.onKeyDown = event => {\n      var _a, _b, _c, _d, _e, _f;\n      if (event.key === 'Tab' && !this.props.isOpen) {\n        return;\n      }\n      if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n        event.preventDefault();\n        (_b = (_a = this.props).onToggle) === null || _b === void 0 ? void 0 : _b.call(_a, !this.props.isOpen, event);\n      } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n        event.preventDefault();\n        (_d = (_c = this.props).onToggle) === null || _d === void 0 ? void 0 : _d.call(_c, !this.props.isOpen, event);\n        (_f = (_e = this.props).onEnter) === null || _f === void 0 ? void 0 : _f.call(_e);\n      }\n    };\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        isOpen,\n        isDisabled,\n        isPlain,\n        isText,\n        isPrimary,\n        isSplitButton,\n        toggleVariant,\n        onToggle,\n        'aria-haspopup': ariaHasPopup,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive,\n        bubbleEvent,\n        onEnter,\n        parentRef,\n        getMenuRef,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        id,\n        type\n      } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n    return React.createElement(DropdownContext.Consumer, null, _ref => {\n      let {\n        toggleClass\n      } = _ref;\n      return React.createElement(\"button\", Object.assign({}, props, {\n        id: id,\n        ref: this.buttonRef,\n        className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, toggleVariant && buttonVariantStyles[toggleVariant], className),\n        type: type || 'button',\n        onClick: event => onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event),\n        \"aria-expanded\": isOpen,\n        \"aria-haspopup\": ariaHasPopup,\n        onKeyDown: event => this.onKeyDown(event),\n        disabled: isDisabled\n      }), children);\n    });\n  }\n}\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isDisabled: false,\n  isPlain: false,\n  isText: false,\n  isPrimary: false,\n  isSplitButton: false,\n  onToggle: () => {},\n  onEnter: () => {},\n  bubbleEvent: false\n};","map":{"version":3,"names":["React","styles","DropdownContext","css","KeyTypes","buttonVariantStyles","default","primary","modifiers","secondary","Toggle","Component","constructor","buttonRef","createRef","componentDidMount","document","addEventListener","onDocClick","onEscPress","componentWillUnmount","removeEventListener","event","isOpen","parentRef","onToggle","getMenuRef","props","menuRef","clickedOnToggle","current","contains","target","clickedWithinMenu","escFromToggle","escFromWithinMenu","key","Escape","_b","_a","call","_c","focus","onKeyDown","bubbleEvent","stopPropagation","preventDefault","_d","_f","_e","onEnter","render","className","children","isDisabled","isPlain","isText","isPrimary","isSplitButton","toggleVariant","ariaHasPopup","isActive","id","type","__rest","createElement","Consumer","_ref","toggleClass","Object","assign","ref","dropdownToggleButton","dropdownToggle","active","plain","text","onClick","disabled","displayName","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Dropdown\\Toggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToggleProps {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (\n    isOpen: boolean,\n    event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** Callback called when the Enter key is pressed */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Display the toggle with a primary button style */\n  isPrimary?: boolean;\n  /** Style the toggle as a child of a split button */\n  isSplitButton?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** Flag for aria popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\n\nexport class Toggle extends React.Component<ToggleProps> {\n  static displayName = 'Toggle';\n  private buttonRef = React.createRef<HTMLButtonElement>();\n\n  static defaultProps: PickOptional<ToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isText: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: () => {},\n    onEnter: () => {},\n    bubbleEvent: false\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('click', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    const { isOpen, parentRef, onToggle, getMenuRef } = this.props;\n    const menuRef = getMenuRef && getMenuRef();\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n      onToggle?.(false, event);\n    }\n  };\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, getMenuRef } = this.props;\n    const menuRef = getMenuRef && getMenuRef();\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (\n      this.props.isOpen &&\n      (event.key === KeyTypes.Escape || event.key === 'Tab') &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      this.props.onToggle?.(false, event);\n      this.buttonRef.current?.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !this.props.isOpen) {\n      return;\n    }\n    if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle?.(!this.props.isOpen, event);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle?.(!this.props.isOpen, event);\n      this.props.onEnter?.();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isOpen,\n      isDisabled,\n      isPlain,\n      isText,\n      isPrimary,\n      isSplitButton,\n      toggleVariant,\n      onToggle,\n      'aria-haspopup': ariaHasPopup,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      bubbleEvent,\n      onEnter,\n      parentRef,\n      getMenuRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      id,\n      type,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Consumer>\n        {({ toggleClass }) => (\n          <button\n            {...props}\n            id={id}\n            ref={this.buttonRef}\n            className={css(\n              isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              isText && styles.modifiers.text,\n              isPrimary && styles.modifiers.primary,\n              toggleVariant && buttonVariantStyles[toggleVariant],\n              className\n            )}\n            type={type || 'button'}\n            onClick={event => onToggle?.(!isOpen, event)}\n            aria-expanded={isOpen}\n            aria-haspopup={ariaHasPopup}\n            onKeyDown={event => this.onKeyDown(event)}\n            disabled={isDisabled}\n          >\n            {children}\n          </button>\n        )}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}