{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n(function (spinnerSize) {\n  spinnerSize[\"sm\"] = \"sm\";\n  spinnerSize[\"md\"] = \"md\";\n  spinnerSize[\"lg\"] = \"lg\";\n  spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\nexport const Spinner = _a => {\n  var {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      className = '',\n      size = 'xl',\n      'aria-valuetext': ariaValueText = 'Loading...',\n      isSVG = false,\n      diameter,\n      isInline = false,\n      'aria-label': ariaLabel,\n      'aria-labelledBy': ariaLabelledBy\n    } = _a,\n    props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n  const Component = isSVG ? 'svg' : 'span';\n  return React.createElement(Component, Object.assign({\n    className: css(styles.spinner, isInline ? styles.modifiers.inline : styles.modifiers[size], className),\n    role: \"progressbar\",\n    \"aria-valuetext\": ariaValueText\n  }, isSVG && {\n    viewBox: '0 0 100 100'\n  }, diameter && {\n    style: {\n      '--pf-c-spinner--diameter': diameter\n    }\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, ariaLabelledBy && {\n    'aria-labelledBy': ariaLabelledBy\n  }, !ariaLabel && !ariaLabelledBy && {\n    'aria-label': 'Contents'\n  }, props), isSVG ? React.createElement(\"circle\", {\n    className: styles.spinnerPath,\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"none\"\n  }) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.spinnerClipper)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerLeadBall)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerTailBall)\n  })));\n};\nSpinner.displayName = 'Spinner';","map":{"version":3,"names":["React","styles","css","spinnerSize","Spinner","_a","className","size","ariaValueText","isSVG","diameter","isInline","ariaLabel","ariaLabelledBy","props","__rest","Component","createElement","Object","assign","spinner","modifiers","inline","role","viewBox","style","spinnerPath","cx","cy","r","fill","Fragment","spinnerClipper","spinnerLeadBall","spinnerTailBall","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Spinner\\Spinner.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\n\nexport enum spinnerSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl'\n}\n\nexport interface SpinnerProps extends Omit<React.HTMLProps<HTMLSpanElement>, 'size'> {\n  /** Additional classes added to the Spinner. */\n  className?: string;\n  /** Size variant of progress. */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Text describing that current loading status or progress */\n  'aria-valuetext'?: string;\n  /** Whether to use an SVG (new) rather than a span (old) */\n  isSVG?: boolean;\n  /** Diameter of spinner set as CSS variable */\n  diameter?: string;\n  /** @beta Indicates the spinner is inline and the size should inherit the text font size. This will override the size prop. */\n  isInline?: boolean;\n  /** Accessible label to describe what is loading */\n  'aria-label'?: string;\n  /** Id of element which describes what is being loaded */\n  'aria-labelledBy'?: string;\n}\n\nexport const Spinner: React.FunctionComponent<SpinnerProps> = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  className = '',\n  size = 'xl',\n  'aria-valuetext': ariaValueText = 'Loading...',\n  isSVG = false,\n  diameter,\n  isInline = false,\n  'aria-label': ariaLabel,\n  'aria-labelledBy': ariaLabelledBy,\n  ...props\n}: SpinnerProps) => {\n  const Component = isSVG ? 'svg' : ('span' as any);\n\n  return (\n    <Component\n      className={css(styles.spinner, isInline ? styles.modifiers.inline : styles.modifiers[size], className)}\n      role=\"progressbar\"\n      aria-valuetext={ariaValueText}\n      {...(isSVG && { viewBox: '0 0 100 100' })}\n      {...(diameter && { style: { '--pf-c-spinner--diameter': diameter } })}\n      {...(ariaLabel && { 'aria-label': ariaLabel })}\n      {...(ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy })}\n      {...(!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' })}\n      {...props}\n    >\n      {isSVG ? (\n        <circle className={styles.spinnerPath} cx=\"50\" cy=\"50\" r=\"45\" fill=\"none\" />\n      ) : (\n        <React.Fragment>\n          <span className={css(styles.spinnerClipper)} />\n          <span className={css(styles.spinnerLeadBall)} />\n          <span className={css(styles.spinnerTailBall)} />\n        </React.Fragment>\n      )}\n    </Component>\n  );\n};\nSpinner.displayName = 'Spinner';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,yDAAyD;AAC5E,SAASC,GAAG,QAAQ,0BAA0B;AAE9C,WAAYC,WAKX;AALD,WAAYA,WAAW;EACrBA,WAAA,aAAS;EACTA,WAAA,aAAS;EACTA,WAAA,aAAS;EACTA,WAAA,aAAS;AACX,CAAC,EALWA,WAAW,KAAXA,WAAW;AA0BvB,OAAO,MAAMC,OAAO,GAA2CC,EAWhD,IAAI;MAX4C;MAC7D;MACAC,SAAS,GAAG,EAAE;MACdC,IAAI,GAAG,IAAI;MACX,gBAAgB,EAAEC,aAAa,GAAG,YAAY;MAC9CC,KAAK,GAAG,KAAK;MACbC,QAAQ;MACRC,QAAQ,GAAG,KAAK;MAChB,YAAY,EAAEC,SAAS;MACvB,iBAAiB,EAAEC;IAAc,IAAAR,EAEpB;IADVS,KAAK,GAAAC,MAAA,CAAAV,EAAA,EAVqD,yGAW9D,CADS;EAER,MAAMW,SAAS,GAAGP,KAAK,GAAG,KAAK,GAAI,MAAc;EAEjD,OACET,KAAA,CAAAiB,aAAA,CAACD,SAAS,EAAAE,MAAA,CAAAC,MAAA;IACRb,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACmB,OAAO,EAAET,QAAQ,GAAGV,MAAM,CAACoB,SAAS,CAACC,MAAM,GAAGrB,MAAM,CAACoB,SAAS,CAACd,IAAI,CAAC,EAAED,SAAS,CAAC;IACtGiB,IAAI,EAAC,aAAa;IAAA,kBACFf;EAAa,GACxBC,KAAK,IAAI;IAAEe,OAAO,EAAE;EAAa,CAAE,EACnCd,QAAQ,IAAI;IAAEe,KAAK,EAAE;MAAE,0BAA0B,EAAEf;IAAQ;EAAE,CAAE,EAC/DE,SAAS,IAAI;IAAE,YAAY,EAAEA;EAAS,CAAE,EACxCC,cAAc,IAAI;IAAE,iBAAiB,EAAEA;EAAc,CAAE,EACvD,CAACD,SAAS,IAAI,CAACC,cAAc,IAAI;IAAE,YAAY,EAAE;EAAU,CAAE,EAC9DC,KAAK,GAERL,KAAK,GACJT,KAAA,CAAAiB,aAAA;IAAQX,SAAS,EAAEL,MAAM,CAACyB,WAAW;IAAEC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAACC,CAAC,EAAC,IAAI;IAACC,IAAI,EAAC;EAAM,EAAG,GAE5E9B,KAAA,CAAAiB,aAAA,CAACjB,KAAK,CAAC+B,QAAQ,QACb/B,KAAA,CAAAiB,aAAA;IAAMX,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAAC+B,cAAc;EAAC,EAAI,EAC/ChC,KAAA,CAAAiB,aAAA;IAAMX,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACgC,eAAe;EAAC,EAAI,EAChDjC,KAAA,CAAAiB,aAAA;IAAMX,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACiC,eAAe;EAAC,EAAI,CAEnD,CACS;AAEhB,CAAC;AACD9B,OAAO,CAAC+B,WAAW,GAAG,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}