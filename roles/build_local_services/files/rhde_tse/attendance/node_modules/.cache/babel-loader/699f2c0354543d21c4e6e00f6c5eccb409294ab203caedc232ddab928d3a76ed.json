{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const DropdownToggle = _a => {\n  var {\n      id = '',\n      children = null,\n      className = '',\n      isOpen = false,\n      parentRef = null,\n      getMenuRef = null,\n      isDisabled = false,\n      isPlain = false,\n      isText = false,\n      isPrimary = false,\n      toggleVariant = 'default',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onToggle = _isOpen => undefined,\n      icon = null,\n      toggleIndicator: ToggleIndicator = CaretDownIcon,\n      splitButtonItems,\n      splitButtonVariant = 'checkbox',\n      'aria-haspopup': ariaHasPopup,\n      ouiaId,\n      ouiaSafe,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ref\n    } = _a,\n    // Types of Ref are different for React.FunctionComponent vs React.Component\n    props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"toggleVariant\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = React.createElement(DropdownContext.Consumer, null, _ref => {\n    let {\n      toggleTextClass,\n      toggleIndicatorClass,\n      toggleIconClass\n    } = _ref;\n    return React.createElement(Toggle, Object.assign({}, props, {\n      id: id,\n      className: className,\n      isOpen: isOpen,\n      parentRef: parentRef,\n      getMenuRef: getMenuRef,\n      isActive: isActive,\n      isDisabled: isDisabled,\n      isPlain: isPlain,\n      isText: isText,\n      isPrimary: isPrimary,\n      toggleVariant: toggleVariant,\n      onToggle: onToggle,\n      \"aria-haspopup\": ariaHasPopup\n    }, ouiaProps, splitButtonItems && {\n      isSplitButton: true,\n      'aria-label': props['aria-label'] || 'Select'\n    }), icon && React.createElement(\"span\", {\n      className: css(toggleIconClass)\n    }, icon), children && React.createElement(\"span\", {\n      className: ToggleIndicator && css(toggleTextClass)\n    }, children), ToggleIndicator && React.createElement(\"span\", {\n      className: css(!splitButtonItems && toggleIndicatorClass)\n    }, React.createElement(ToggleIndicator, null)));\n  });\n  if (splitButtonItems) {\n    return React.createElement(\"div\", {\n      className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary, toggleVariant === 'secondary' && splitButtonVariant === 'action' && styles.modifiers.secondary, isDisabled && styles.modifiers.disabled)\n    }, splitButtonItems, toggle);\n  }\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';","map":{"version":3,"names":["React","CaretDownIcon","Toggle","styles","DropdownContext","css","useOUIAProps","DropdownToggle","_a","id","children","className","isOpen","parentRef","getMenuRef","isDisabled","isPlain","isText","isPrimary","toggleVariant","isActive","onToggle","_isOpen","undefined","icon","toggleIndicator","ToggleIndicator","splitButtonItems","splitButtonVariant","ariaHasPopup","ouiaId","ouiaSafe","ref","props","__rest","ouiaProps","displayName","toggle","createElement","Consumer","_ref","toggleTextClass","toggleIndicatorClass","toggleIconClass","Object","assign","isSplitButton","dropdownToggle","modifiers","splitButton","action","primary","secondary","disabled"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Dropdown\\DropdownToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface DropdownToggleProps extends React.HTMLProps<HTMLButtonElement>, OUIAProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle button */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle button */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (value: boolean, event: any) => void;\n  /** Element which wraps toggle */\n  parentRef?: HTMLElement;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Whether or not the <div> has a disabled state */\n  isDisabled?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Whether or not the dropdown toggle button should have primary button styling */\n  isPrimary?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** An image to display within the dropdown toggle, appearing before any component children */\n  icon?: React.ReactNode;\n  /** The icon to display for the toggle, appearing after any component children. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  toggleIndicator?: React.ElementType | null;\n  /** Elements to display before the toggle button. When included, renders the toggle as a split button. */\n  splitButtonItems?: React.ReactNode[];\n  /** Variant of split button toggle */\n  splitButtonVariant?: 'action' | 'checkbox';\n  /** Accessible label for the dropdown toggle button */\n  'aria-label'?: string;\n  /** Accessibility property to indicate correct has popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Callback called when the Enter key is pressed */\n  onEnter?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nexport const DropdownToggle: React.FunctionComponent<DropdownToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  parentRef = null,\n  getMenuRef = null,\n  isDisabled = false,\n  isPlain = false,\n  isText = false,\n  isPrimary = false,\n  toggleVariant = 'default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  icon = null,\n  toggleIndicator: ToggleIndicator = CaretDownIcon,\n  splitButtonItems,\n  splitButtonVariant = 'checkbox',\n  'aria-haspopup': ariaHasPopup,\n  ouiaId,\n  ouiaSafe,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ...props\n}: DropdownToggleProps) => {\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = (\n    <DropdownContext.Consumer>\n      {({ toggleTextClass, toggleIndicatorClass, toggleIconClass }) => (\n        <Toggle\n          {...props}\n          id={id}\n          className={className}\n          isOpen={isOpen}\n          parentRef={parentRef}\n          getMenuRef={getMenuRef}\n          isActive={isActive}\n          isDisabled={isDisabled}\n          isPlain={isPlain}\n          isText={isText}\n          isPrimary={isPrimary}\n          toggleVariant={toggleVariant}\n          onToggle={onToggle}\n          aria-haspopup={ariaHasPopup}\n          {...ouiaProps}\n          {...(splitButtonItems && { isSplitButton: true, 'aria-label': props['aria-label'] || 'Select' })}\n        >\n          {icon && <span className={css(toggleIconClass)}>{icon}</span>}\n          {children && <span className={ToggleIndicator && css(toggleTextClass)}>{children}</span>}\n          {ToggleIndicator && (\n            <span className={css(!splitButtonItems && toggleIndicatorClass)}>\n              <ToggleIndicator />\n            </span>\n          )}\n        </Toggle>\n      )}\n    </DropdownContext.Consumer>\n  );\n\n  if (splitButtonItems) {\n    return (\n      <div\n        className={css(\n          styles.dropdownToggle,\n          styles.modifiers.splitButton,\n          splitButtonVariant === 'action' && styles.modifiers.action,\n          (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary,\n          toggleVariant === 'secondary' && splitButtonVariant === 'action' && styles.modifiers.secondary,\n          isDisabled && styles.modifiers.disabled\n        )}\n      >\n        {splitButtonItems}\n        {toggle}\n      </div>\n    );\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}