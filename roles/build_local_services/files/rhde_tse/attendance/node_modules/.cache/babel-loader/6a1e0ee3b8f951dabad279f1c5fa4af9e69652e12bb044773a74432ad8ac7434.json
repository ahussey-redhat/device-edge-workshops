{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorListWrapperBase = _a => {\n  var {\n      className,\n      children,\n      'aria-labelledby': ariaLabelledBy,\n      innerRef,\n      options = [],\n      selectedOptions = [],\n      onOptionSelect,\n      displayOption,\n      id = getUniqueId('dual-list-selector-list'),\n      isDisabled = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const ref = React.useRef(null);\n  const menuRef = innerRef || ref;\n  const {\n    isTree\n  } = React.useContext(DualListSelectorContext);\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = event => {\n    if (!menuRef.current || menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') && !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu'))) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input')) : Array.from(menuRef.current.getElementsByTagName('LI')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, validOptions, element => activeElement.contains(element), element => {\n      if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n        setFocusedOption(element.id);\n      } else {\n        setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n      }\n      return element;\n    }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n  };\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorMenu, className),\n    ref: menuRef,\n    tabIndex: 0\n  }, props), React.createElement(DualListSelectorListContext.Provider, {\n    value: {\n      setFocusedOption,\n      isTree,\n      focusedOption,\n      ariaLabelledBy,\n      displayOption,\n      selectedOptions,\n      id,\n      options,\n      onOptionSelect,\n      isDisabled\n    }\n  }, children ? children : React.createElement(DualListSelectorList, null)));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport const DualListSelectorListWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorListWrapperBase, Object.assign({\n  innerRef: ref\n}, props)));\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';","map":{"version":3,"names":["React","styles","css","getUniqueId","handleArrows","DualListSelectorList","DualListSelectorContext","DualListSelectorListContext","DualListSelectorListWrapperBase","_a","className","children","ariaLabelledBy","innerRef","options","selectedOptions","onOptionSelect","displayOption","id","isDisabled","props","__rest","focusedOption","setFocusedOption","useState","ref","useRef","menuRef","isTree","useContext","handleKeys","event","current","target","closest","Array","from","getElementsByClassName","includes","stopImmediatePropagation","validOptions","querySelectorAll","getElementsByTagName","filter","el","classList","contains","activeElement","document","element","undefined","useEffect","window","addEventListener","removeEventListener","createElement","Object","assign","dualListSelectorMenu","tabIndex","Provider","value","displayName","DualListSelectorListWrapper","forwardRef"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DualListSelector\\DualListSelectorListWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Id of the dual list selector list */\n  id?: string;\n  /** Accessibly label for the list */\n  'aria-labelledby': string;\n  /** @hide forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => void;\n  /** @hide Function to determine if an option should be displayed depending on a dynamically built filter value */\n  displayOption?: (option: React.ReactNode) => boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListWrapperBase: React.FunctionComponent<DualListSelectorListWrapperProps> = ({\n  className,\n  children,\n  'aria-labelledby': ariaLabelledBy,\n  innerRef,\n  options = [],\n  selectedOptions = [],\n  onOptionSelect,\n  displayOption,\n  id = getUniqueId('dual-list-selector-list'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorListWrapperProps) => {\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const ref = React.useRef(null);\n  const menuRef = innerRef || ref;\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !menuRef.current ||\n      (menuRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu') &&\n        !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree\n      ? (Array.from(\n          menuRef.current.querySelectorAll(\n            '.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input'\n          )\n        ) as Element[])\n      : (Array.from(menuRef.current.getElementsByTagName('LI')) as Element[]).filter(\n          el => !el.classList.contains('pf-m-disabled')\n        );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      validOptions,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => {\n        if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n          setFocusedOption(element.id);\n        } else {\n          setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n        }\n        return element;\n      },\n      ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'],\n      undefined,\n      false,\n      false,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n\n  return (\n    <div className={css(styles.dualListSelectorMenu, className)} ref={menuRef} tabIndex={0} {...props}>\n      <DualListSelectorListContext.Provider\n        value={{\n          setFocusedOption,\n          isTree,\n          focusedOption,\n          ariaLabelledBy,\n          displayOption,\n          selectedOptions,\n          id,\n          options,\n          onOptionSelect,\n          isDisabled\n        }}\n      >\n        {children ? children : <DualListSelectorList />}\n      </DualListSelectorListContext.Provider>\n    </div>\n  );\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\n\nexport const DualListSelectorListWrapper = React.forwardRef(\n  (props: DualListSelectorListWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorListWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}