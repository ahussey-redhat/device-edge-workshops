{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/NumberInput/number-input';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { InputGroup } from '../InputGroup';\nimport { Button } from '../Button';\nimport { KeyTypes, ValidatedOptions } from '../../helpers';\nimport { TextInput } from '../TextInput';\nconst defaultKeyDownHandler = args => event => {\n  if (KeyTypes.ArrowUp === event.key && args.onPlus) {\n    event.preventDefault();\n    args.onPlus(null, args.inputName);\n  }\n  if (KeyTypes.ArrowDown === event.key && args.onMinus) {\n    event.preventDefault();\n    args.onMinus(null, args.inputName);\n  }\n};\nexport const NumberInput = _a => {\n  var {\n      value = 0,\n      className,\n      widthChars,\n      isDisabled = false,\n      validated = ValidatedOptions.default,\n      onMinus = () => {},\n      onChange,\n      onBlur,\n      onPlus = () => {},\n      unit,\n      unitPosition = 'after',\n      min,\n      max,\n      inputName,\n      inputAriaLabel = 'Input',\n      minusBtnAriaLabel = 'Minus',\n      plusBtnAriaLabel = 'Plus',\n      inputProps,\n      minusBtnProps,\n      plusBtnProps,\n      allowEmptyInput = false\n    } = _a,\n    props = __rest(_a, [\"value\", \"className\", \"widthChars\", \"isDisabled\", \"validated\", \"onMinus\", \"onChange\", \"onBlur\", \"onPlus\", \"unit\", \"unitPosition\", \"min\", \"max\", \"inputName\", \"inputAriaLabel\", \"minusBtnAriaLabel\", \"plusBtnAriaLabel\", \"inputProps\", \"minusBtnProps\", \"plusBtnProps\", \"allowEmptyInput\"]);\n  if (!allowEmptyInput) {\n    value = value || 0;\n  }\n  const numberInputUnit = React.createElement(\"div\", {\n    className: css(styles.numberInputUnit)\n  }, unit);\n  const keyDownHandler = inputProps && inputProps.onKeyDown ? inputProps.onKeyDown : defaultKeyDownHandler({\n    inputName,\n    onMinus,\n    onPlus\n  });\n  const handleBlur = event => {\n    event.target.value = Number(event.target.value).toString();\n    if (onChange) {\n      onChange(event);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.numberInput, validated !== 'default' && styles.modifiers.status, className)\n  }, widthChars && {\n    style: Object.assign({\n      '--pf-c-number-input--c-form-control--width-chars': widthChars\n    }, props.style)\n  }, props), unit && unitPosition === 'before' && numberInputUnit, React.createElement(InputGroup, null, React.createElement(Button, Object.assign({\n    variant: \"control\",\n    \"aria-label\": minusBtnAriaLabel,\n    isDisabled: isDisabled || value <= min,\n    onClick: evt => onMinus(evt, inputName)\n  }, minusBtnProps), React.createElement(\"span\", {\n    className: css(styles.numberInputIcon)\n  }, React.createElement(MinusIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(TextInput, Object.assign({}, inputProps, {\n    type: \"number\",\n    value: value,\n    name: inputName,\n    \"aria-label\": inputAriaLabel\n  }, isDisabled && {\n    isDisabled\n  }, onChange && {\n    onChange: (value, event) => onChange(event)\n  }, {\n    onBlur: handleBlur\n  }, !onChange && {\n    isReadOnly: true\n  }, {\n    onKeyDown: keyDownHandler,\n    validated: validated\n  })), React.createElement(Button, Object.assign({\n    variant: \"control\",\n    \"aria-label\": plusBtnAriaLabel,\n    isDisabled: isDisabled || value >= max,\n    onClick: evt => onPlus(evt, inputName)\n  }, plusBtnProps), React.createElement(\"span\", {\n    className: css(styles.numberInputIcon)\n  }, React.createElement(PlusIcon, {\n    \"aria-hidden\": \"true\"\n  })))), unit && unitPosition === 'after' && numberInputUnit);\n};\nNumberInput.displayName = 'NumberInput';","map":{"version":3,"names":["React","styles","css","MinusIcon","PlusIcon","InputGroup","Button","KeyTypes","ValidatedOptions","TextInput","defaultKeyDownHandler","args","event","ArrowUp","key","onPlus","preventDefault","inputName","ArrowDown","onMinus","NumberInput","_a","value","className","widthChars","isDisabled","validated","default","onChange","onBlur","unit","unitPosition","min","max","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","inputProps","minusBtnProps","plusBtnProps","allowEmptyInput","props","__rest","numberInputUnit","createElement","keyDownHandler","onKeyDown","handleBlur","target","Number","toString","Object","assign","numberInput","modifiers","status","style","variant","onClick","evt","numberInputIcon","type","name","isReadOnly","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\NumberInput\\NumberInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/NumberInput/number-input';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { InputGroup } from '../InputGroup';\nimport { Button, ButtonProps } from '../Button';\nimport { KeyTypes, ValidatedOptions } from '../../helpers';\nimport { TextInput } from '../TextInput';\n\nexport interface NumberInputProps extends React.HTMLProps<HTMLDivElement> {\n  /** Value of the number input */\n  value?: number | '';\n  /** Additional classes added to the number input */\n  className?: string;\n  /** Sets the width of the number input to a number of characters */\n  widthChars?: number;\n  /** Indicates the whole number input should be disabled */\n  isDisabled?: boolean;\n  /** Value to indicate if the input is modified to show that validation state\n   * @beta\n   */\n  validated?: 'default' | 'error' | 'warning' | 'success' | ValidatedOptions;\n  /** Callback for the minus button */\n  onMinus?: (event: React.MouseEvent, name?: string) => void;\n  /** Callback for the text input changing */\n  onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n  /** Callback function when text input is blurred (focus leaves) */\n  onBlur?: (event?: any) => void;\n  /** Callback for the plus button */\n  onPlus?: (event: React.MouseEvent, name?: string) => void;\n  /** Adds the given unit to the number input */\n  unit?: React.ReactNode;\n  /** Position of the number input unit in relation to the number input */\n  unitPosition?: 'before' | 'after';\n  /** Minimum value of the number input, disabling the minus button when reached */\n  min?: number;\n  /** Maximum value of the number input, disabling the plus button when reached */\n  max?: number;\n  /** Name of the input */\n  inputName?: string;\n  /** Aria label of the input */\n  inputAriaLabel?: string;\n  /** Aria label of the minus button */\n  minusBtnAriaLabel?: string;\n  /** Aria label of the plus button */\n  plusBtnAriaLabel?: string;\n  /** Additional properties added to the text input */\n  inputProps?: any;\n  /** Additional properties added to the minus button */\n  minusBtnProps?: ButtonProps;\n  /** Additional properties added to the plus button */\n  plusBtnProps?: ButtonProps;\n  /** Allow the user to clear out the input to an empty string (recommended) */\n  allowEmptyInput?: boolean;\n}\n\ntype DefaultKeyDownHandlerArgs = Pick<NumberInputProps, 'inputName' | 'onMinus' | 'onPlus'>;\n\nconst defaultKeyDownHandler = (args: DefaultKeyDownHandlerArgs) => (event: React.KeyboardEvent<HTMLInputElement>) => {\n  if (KeyTypes.ArrowUp === event.key && args.onPlus) {\n    event.preventDefault();\n    args.onPlus(null, args.inputName);\n  }\n  if (KeyTypes.ArrowDown === event.key && args.onMinus) {\n    event.preventDefault();\n    args.onMinus(null, args.inputName);\n  }\n};\n\nexport const NumberInput: React.FunctionComponent<NumberInputProps> = ({\n  value = 0,\n  className,\n  widthChars,\n  isDisabled = false,\n  validated = ValidatedOptions.default,\n  onMinus = () => {},\n  onChange,\n  onBlur,\n  onPlus = () => {},\n  unit,\n  unitPosition = 'after',\n  min,\n  max,\n  inputName,\n  inputAriaLabel = 'Input',\n  minusBtnAriaLabel = 'Minus',\n  plusBtnAriaLabel = 'Plus',\n  inputProps,\n  minusBtnProps,\n  plusBtnProps,\n  allowEmptyInput = false,\n  ...props\n}: NumberInputProps) => {\n  if (!allowEmptyInput) {\n    value = value || 0;\n  }\n  const numberInputUnit = <div className={css(styles.numberInputUnit)}>{unit}</div>;\n  const keyDownHandler =\n    inputProps && inputProps.onKeyDown ? inputProps.onKeyDown : defaultKeyDownHandler({ inputName, onMinus, onPlus });\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.value = Number(event.target.value).toString();\n    if (onChange) {\n      onChange(event);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={css(styles.numberInput, validated !== 'default' && styles.modifiers.status, className)}\n      {...(widthChars && {\n        style: {\n          '--pf-c-number-input--c-form-control--width-chars': widthChars,\n          ...props.style\n        } as React.CSSProperties\n      })}\n      {...props}\n    >\n      {unit && unitPosition === 'before' && numberInputUnit}\n      <InputGroup>\n        <Button\n          variant=\"control\"\n          aria-label={minusBtnAriaLabel}\n          isDisabled={isDisabled || value <= min}\n          onClick={evt => onMinus(evt, inputName)}\n          {...minusBtnProps}\n        >\n          <span className={css(styles.numberInputIcon)}>\n            <MinusIcon aria-hidden=\"true\" />\n          </span>\n        </Button>\n        <TextInput\n          {...inputProps}\n          type=\"number\"\n          value={value}\n          name={inputName}\n          aria-label={inputAriaLabel}\n          {...(isDisabled && { isDisabled })}\n          {...(onChange && { onChange: (value, event) => onChange(event) })}\n          onBlur={handleBlur}\n          {...(!onChange && { isReadOnly: true })}\n          onKeyDown={keyDownHandler}\n          validated={validated}\n        />\n        <Button\n          variant=\"control\"\n          aria-label={plusBtnAriaLabel}\n          isDisabled={isDisabled || value >= max}\n          onClick={evt => onPlus(evt, inputName)}\n          {...plusBtnProps}\n        >\n          <span className={css(styles.numberInputIcon)}>\n            <PlusIcon aria-hidden=\"true\" />\n          </span>\n        </Button>\n      </InputGroup>\n      {unit && unitPosition === 'after' && numberInputUnit}\n    </div>\n  );\n};\nNumberInput.displayName = 'NumberInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}