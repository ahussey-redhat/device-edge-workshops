{"ast":null,"code":"import { __rest } from \"tslib\";\n/* eslint-disable no-console */\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer } from './PageContext';\nexport const PageToggleButton = _a => {\n  var {\n      children,\n      isNavOpen = true,\n      onNavToggle = () => undefined,\n      id = 'nav-toggle'\n    } = _a,\n    props = __rest(_a, [\"children\", \"isNavOpen\", \"onNavToggle\", \"id\"]);\n  return React.createElement(PageContextConsumer, null, _ref => {\n    let {\n      isManagedSidebar,\n      onNavToggle: managedOnNavToggle,\n      isNavOpen: managedIsNavOpen\n    } = _ref;\n    const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n    const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n    return React.createElement(Button, Object.assign({\n      id: id,\n      onClick: navToggle,\n      \"aria-label\": \"Side navigation toggle\",\n      \"aria-expanded\": navOpen ? 'true' : 'false',\n      variant: ButtonVariant.plain\n    }, props), children);\n  });\n};\nPageToggleButton.displayName = 'PageToggleButton';","map":{"version":3,"names":["React","Button","ButtonVariant","PageContextConsumer","PageToggleButton","_a","children","isNavOpen","onNavToggle","undefined","id","props","__rest","createElement","_ref","isManagedSidebar","managedOnNavToggle","managedIsNavOpen","navToggle","navOpen","Object","assign","onClick","variant","plain","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Page\\PageToggleButton.tsx"],"sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport { Button, ButtonProps, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer, PageContextProps } from './PageContext';\n\nexport interface PageToggleButtonProps extends ButtonProps {\n  /** Content of the page toggle button */\n  children?: React.ReactNode;\n  /** True if the side nav is shown  */\n  isNavOpen?: boolean;\n  /** Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */\n  onNavToggle?: () => void;\n  /** Button id */\n  id?: string;\n}\n\nexport const PageToggleButton: React.FunctionComponent<PageToggleButtonProps> = ({\n  children,\n  isNavOpen = true,\n  onNavToggle = () => undefined as any,\n  id = 'nav-toggle',\n  ...props\n}: PageToggleButtonProps) => (\n  <PageContextConsumer>\n    {({ isManagedSidebar, onNavToggle: managedOnNavToggle, isNavOpen: managedIsNavOpen }: PageContextProps) => {\n      const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n      const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n      return (\n        <Button\n          id={id}\n          onClick={navToggle}\n          aria-label=\"Side navigation toggle\"\n          aria-expanded={navOpen ? 'true' : 'false'}\n          variant={ButtonVariant.plain}\n          {...props}\n        >\n          {children}\n        </Button>\n      );\n    }}\n  </PageContextConsumer>\n);\nPageToggleButton.displayName = 'PageToggleButton';\n"],"mappings":";AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAeC,aAAa,QAAQ,yBAAyB;AAC5E,SAASC,mBAAmB,QAA0B,eAAe;AAarE,OAAO,MAAMC,gBAAgB,GAAoDC,EAMzD,IAAI;MANqD;MAC/EC,QAAQ;MACRC,SAAS,GAAG,IAAI;MAChBC,WAAW,GAAGA,CAAA,KAAMC,SAAgB;MACpCC,EAAE,GAAG;IAAY,IAAAL,EAEK;IADnBM,KAAK,GAAAC,MAAA,CAAAP,EAAA,EALuE,8CAMhF,CADS;EACmB,OAC3BL,KAAA,CAAAa,aAAA,CAACV,mBAAmB,QACjBW,IAAA,IAAyG;IAAA,IAAxG;MAAEC,gBAAgB;MAAEP,WAAW,EAAEQ,kBAAkB;MAAET,SAAS,EAAEU;IAAgB,CAAoB,GAAAH,IAAA;IACpG,MAAMI,SAAS,GAAGH,gBAAgB,GAAGC,kBAAkB,GAAGR,WAAW;IACrE,MAAMW,OAAO,GAAGJ,gBAAgB,GAAGE,gBAAgB,GAAGV,SAAS;IAE/D,OACEP,KAAA,CAAAa,aAAA,CAACZ,MAAM,EAAAmB,MAAA,CAAAC,MAAA;MACLX,EAAE,EAAEA,EAAE;MACNY,OAAO,EAAEJ,SAAS;MAAA,cACP,wBAAwB;MAAA,iBACpBC,OAAO,GAAG,MAAM,GAAG,OAAO;MACzCI,OAAO,EAAErB,aAAa,CAACsB;IAAK,GACxBb,KAAK,GAERL,QAAQ,CACF;EAEb,CAAC,CACmB;CACvB;AACDF,gBAAgB,CAACqB,WAAW,GAAG,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}