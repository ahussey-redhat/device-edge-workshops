{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Popper } from '../../helpers';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { TabsContext } from './TabsContext';\nimport { TabTitleText } from './TabTitleText';\nexport const OverflowTab = _a => {\n  var {\n      className,\n      overflowingTabs = [],\n      showTabCount,\n      defaultTitleText = 'More',\n      toggleAriaLabel,\n      removeFindDomNode = false,\n      zIndex = 9999\n    } = _a,\n    props = __rest(_a, [\"className\", \"overflowingTabs\", \"showTabCount\", \"defaultTitleText\", \"toggleAriaLabel\", \"removeFindDomNode\", \"zIndex\"]);\n  const menuRef = React.useRef();\n  const overflowTabRef = React.useRef();\n  const overflowLIRef = React.useRef();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const {\n    localActiveKey,\n    handleTabClick\n  } = React.useContext(TabsContext);\n  const closeMenu = () => {\n    setIsExpanded(false);\n    overflowTabRef.current.focus();\n  };\n  const handleMenuKeys = ev => {\n    var _a;\n    const menuContainsEventTarget = (_a = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(ev.target);\n    if (isExpanded && menuContainsEventTarget && ev.key === 'Escape') {\n      closeMenu();\n    }\n  };\n  const handleClick = ev => {\n    var _a, _b;\n    const clickIsOutsideMenu = !((_a = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(ev.target));\n    const clickIsOutsideOverflowTab = !((_b = overflowTabRef === null || overflowTabRef === void 0 ? void 0 : overflowTabRef.current) === null || _b === void 0 ? void 0 : _b.contains(ev.target));\n    if (isExpanded && clickIsOutsideMenu && clickIsOutsideOverflowTab) {\n      closeMenu();\n    }\n  };\n  React.useEffect(() => {\n    window.addEventListener('click', handleClick);\n    window.addEventListener('keydown', handleMenuKeys);\n    return () => {\n      window.removeEventListener('click', handleClick);\n      window.removeEventListener('keydown', handleMenuKeys);\n    };\n  }, [isExpanded, menuRef, overflowTabRef]);\n  const selectedTab = overflowingTabs.find(tab => tab.eventKey === localActiveKey);\n  const tabTitle = (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.title) ? selectedTab.title : defaultTitleText;\n  const toggleMenu = () => {\n    setIsExpanded(prevIsExpanded => !prevIsExpanded);\n    setTimeout(() => {\n      if (menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled)');\n        firstElement && firstElement.focus();\n      }\n    }, 0);\n  };\n  const overflowTab = React.createElement(\"li\", Object.assign({\n    className: css(styles.tabsItem, 'pf-m-overflow', selectedTab && styles.modifiers.current, className),\n    role: \"presentation\",\n    ref: overflowLIRef\n  }, props), React.createElement(\"button\", {\n    type: \"button\",\n    className: css(styles.tabsLink, isExpanded && styles.modifiers.expanded),\n    onClick: () => toggleMenu(),\n    \"aria-label\": toggleAriaLabel,\n    \"aria-haspopup\": \"menu\",\n    \"aria-expanded\": isExpanded,\n    role: \"tab\",\n    ref: overflowTabRef\n  }, React.createElement(TabTitleText, null, tabTitle, showTabCount && tabTitle === defaultTitleText && ` (${overflowingTabs.length})`), React.createElement(\"span\", {\n    className: styles.tabsLinkToggleIcon\n  }, React.createElement(AngleRightIcon, null))));\n  const tabs = overflowingTabs.map(tab => React.createElement(MenuItem, {\n    key: tab.eventKey,\n    itemId: tab.eventKey,\n    isSelected: localActiveKey === tab.eventKey\n  }, tab.title));\n  const onTabSelect = (event, key) => {\n    closeMenu();\n    const selectedTabRef = overflowingTabs.find(tab => tab.eventKey === key).tabContentRef;\n    handleTabClick(event, key, selectedTabRef);\n  };\n  const overflowMenu = React.createElement(Menu, {\n    ref: menuRef,\n    onSelect: (ev, itemId) => onTabSelect(ev, itemId)\n  }, React.createElement(MenuContent, null, React.createElement(MenuList, null, tabs)));\n  return React.createElement(Popper, {\n    trigger: overflowTab,\n    popper: overflowMenu,\n    isVisible: isExpanded,\n    popperMatchesTriggerWidth: false,\n    appendTo: overflowLIRef.current,\n    removeFindDomNode: removeFindDomNode,\n    zIndex: zIndex\n  });\n};\nOverflowTab.displayName = 'OverflowTab';","map":{"version":3,"names":["React","styles","css","AngleRightIcon","Popper","Menu","MenuContent","MenuList","MenuItem","TabsContext","TabTitleText","OverflowTab","_a","className","overflowingTabs","showTabCount","defaultTitleText","toggleAriaLabel","removeFindDomNode","zIndex","props","__rest","menuRef","useRef","overflowTabRef","overflowLIRef","isExpanded","setIsExpanded","useState","localActiveKey","handleTabClick","useContext","closeMenu","current","focus","handleMenuKeys","ev","menuContainsEventTarget","contains","target","key","handleClick","clickIsOutsideMenu","clickIsOutsideOverflowTab","_b","useEffect","window","addEventListener","removeEventListener","selectedTab","find","tab","eventKey","tabTitle","title","toggleMenu","prevIsExpanded","setTimeout","firstElement","querySelector","overflowTab","createElement","Object","assign","tabsItem","modifiers","role","ref","type","tabsLink","expanded","onClick","length","tabsLinkToggleIcon","tabs","map","itemId","isSelected","onTabSelect","event","selectedTabRef","tabContentRef","overflowMenu","onSelect","trigger","popper","isVisible","popperMatchesTriggerWidth","appendTo","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Tabs\\OverflowTab.tsx"],"sourcesContent":["import React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Popper } from '../../helpers';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { TabsContext } from './TabsContext';\nimport { TabProps } from './Tab';\nimport { TabTitleText } from './TabTitleText';\n\nexport interface OverflowTabProps extends React.HTMLProps<HTMLLIElement> {\n  /** Additional classes added to the overflow tab */\n  className?: string;\n  /** The tabs that should be displayed in the menu */\n  overflowingTabs?: TabProps[];\n  /** Flag which shows the count of overflowing tabs when enabled */\n  showTabCount?: boolean;\n  /** The text which displays when an overflowing tab isn't selected */\n  defaultTitleText?: string;\n  /** The aria label applied to the button which toggles the tab overflow menu */\n  toggleAriaLabel?: string;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the overflow tab */\n  zIndex?: number;\n}\n\nexport const OverflowTab: React.FunctionComponent<OverflowTabProps> = ({\n  className,\n  overflowingTabs = [],\n  showTabCount,\n  defaultTitleText = 'More',\n  toggleAriaLabel,\n  removeFindDomNode = false,\n  zIndex = 9999,\n  ...props\n}: OverflowTabProps) => {\n  const menuRef = React.useRef<HTMLDivElement>();\n  const overflowTabRef = React.useRef<HTMLButtonElement>();\n  const overflowLIRef = React.useRef<HTMLLIElement>();\n\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  const { localActiveKey, handleTabClick } = React.useContext(TabsContext);\n\n  const closeMenu = () => {\n    setIsExpanded(false);\n    overflowTabRef.current.focus();\n  };\n\n  const handleMenuKeys = (ev: KeyboardEvent) => {\n    const menuContainsEventTarget = menuRef?.current?.contains(ev.target as Node);\n    if (isExpanded && menuContainsEventTarget && ev.key === 'Escape') {\n      closeMenu();\n    }\n  };\n\n  const handleClick = (ev: MouseEvent) => {\n    const clickIsOutsideMenu = !menuRef?.current?.contains(ev.target as Node);\n    const clickIsOutsideOverflowTab = !overflowTabRef?.current?.contains(ev.target as Node);\n    if (isExpanded && clickIsOutsideMenu && clickIsOutsideOverflowTab) {\n      closeMenu();\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('click', handleClick);\n    window.addEventListener('keydown', handleMenuKeys);\n\n    return () => {\n      window.removeEventListener('click', handleClick);\n      window.removeEventListener('keydown', handleMenuKeys);\n    };\n  }, [isExpanded, menuRef, overflowTabRef]);\n\n  const selectedTab = overflowingTabs.find(tab => tab.eventKey === localActiveKey);\n  const tabTitle = selectedTab?.title ? selectedTab.title : defaultTitleText;\n\n  const toggleMenu = () => {\n    setIsExpanded(prevIsExpanded => !prevIsExpanded);\n    setTimeout(() => {\n      if (menuRef?.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n  };\n\n  const overflowTab = (\n    <li\n      className={css(styles.tabsItem, 'pf-m-overflow', selectedTab && styles.modifiers.current, className)}\n      role=\"presentation\"\n      ref={overflowLIRef}\n      {...props}\n    >\n      <button\n        type=\"button\"\n        className={css(styles.tabsLink, isExpanded && styles.modifiers.expanded)}\n        onClick={() => toggleMenu()}\n        aria-label={toggleAriaLabel}\n        aria-haspopup=\"menu\"\n        aria-expanded={isExpanded}\n        role=\"tab\"\n        ref={overflowTabRef}\n      >\n        <TabTitleText>\n          {tabTitle}\n          {showTabCount && tabTitle === defaultTitleText && ` (${overflowingTabs.length})`}\n        </TabTitleText>\n        <span className={styles.tabsLinkToggleIcon}>\n          <AngleRightIcon />\n        </span>\n      </button>\n    </li>\n  );\n\n  const tabs = overflowingTabs.map(tab => (\n    <MenuItem key={tab.eventKey} itemId={tab.eventKey} isSelected={localActiveKey === tab.eventKey}>\n      {tab.title}\n    </MenuItem>\n  ));\n\n  const onTabSelect = (event: React.MouseEvent<HTMLElement, MouseEvent>, key: number | string) => {\n    closeMenu();\n    const selectedTabRef = overflowingTabs.find(tab => tab.eventKey === key).tabContentRef;\n    handleTabClick(event, key, selectedTabRef);\n  };\n\n  const overflowMenu = (\n    <Menu ref={menuRef} onSelect={(ev, itemId) => onTabSelect(ev as React.MouseEvent<HTMLElement, MouseEvent>, itemId)}>\n      <MenuContent>\n        <MenuList>{tabs}</MenuList>\n      </MenuContent>\n    </Menu>\n  );\n\n  return (\n    <Popper\n      trigger={overflowTab}\n      popper={overflowMenu}\n      isVisible={isExpanded}\n      popperMatchesTriggerWidth={false}\n      appendTo={overflowLIRef.current}\n      removeFindDomNode={removeFindDomNode}\n      zIndex={zIndex}\n    />\n  );\n};\n\nOverflowTab.displayName = 'OverflowTab';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}