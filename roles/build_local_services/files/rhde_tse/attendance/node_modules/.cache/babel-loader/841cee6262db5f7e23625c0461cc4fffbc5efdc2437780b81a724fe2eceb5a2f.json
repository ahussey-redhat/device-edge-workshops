{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nexport const OptionsToggle = _ref => {\n  let {\n    itemsTitle = 'items',\n    optionsToggle,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    itemsPerPageTitle = 'Items per page',\n    ofWord = 'of',\n    firstIndex = 0,\n    lastIndex = 0,\n    itemCount,\n    widgetId = '',\n    showToggle = true,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle = _isOpen => undefined,\n    isOpen = false,\n    isDisabled = false,\n    parentRef = null,\n    toggleTemplate: ToggleTemplate,\n    onEnter = null,\n    perPageComponent = 'div'\n  } = _ref;\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n  const template = typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex,\n    lastIndex,\n    ofWord,\n    itemCount,\n    itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  });\n  const dropdown = showToggle && React.createElement(React.Fragment, null, isDiv && React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, template), React.createElement(DropdownToggle, Object.assign({\n    onEnter: onEnter,\n    \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount && itemCount <= 0,\n    isOpen: isOpen\n  }, widgetId && {\n    id: `${widgetId}-toggle`\n  }, {\n    className: isDiv ? styles.optionsMenuToggleButton : toggleClasses,\n    parentRef: parentRef,\n    \"aria-haspopup\": \"listbox\"\n  }), !isDiv && template));\n  return isDiv ? React.createElement(\"div\", {\n    className: toggleClasses\n  }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"names":["React","styles","css","fillTemplate","DropdownToggle","OptionsToggle","_ref","itemsTitle","optionsToggle","itemsPerPageTitle","ofWord","firstIndex","lastIndex","itemCount","widgetId","showToggle","onToggle","_isOpen","undefined","isOpen","isDisabled","parentRef","toggleTemplate","ToggleTemplate","onEnter","perPageComponent","isDiv","toggleClasses","optionsMenuToggle","modifiers","disabled","plain","text","template","createElement","dropdown","Fragment","className","optionsMenuToggleText","Object","assign","id","optionsMenuToggleButton","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Pagination\\OptionsToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The first index of the items being paginated. */\n  firstIndex?: number;\n  /** Flag indicating if the options menu is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating if the options menu dropdown is open or not. */\n  isOpen?: boolean;\n  /** The total number of items being paginated. */\n  itemCount?: number;\n  /** The title of the pagination options menu. */\n  itemsPerPageTitle?: string;\n  /** The type or title of the items being paginated. */\n  itemsTitle?: string;\n  /** The last index of the items being paginated. */\n  lastIndex?: number;\n  /** Label for the English word \"of\". */\n  ofWord?: string;\n  /** Callback for toggle open on keyboard entry. */\n  onEnter?: () => void;\n  /** Event function that fires when user clicks the options menu toggle. */\n  onToggle?: (isOpen: boolean) => void;\n  /** Accessible label for the options toggle. */\n  optionsToggle?: string;\n  /** */\n  parentRef?: HTMLElement;\n  /** Component to be used for wrapping the toggle contents. Use \"button\" when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n  /** Flag for indicating whether the toggle should be shown. */\n  showToggle?: boolean;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex,\n   * itemCount, and/or itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Id added to the title of the pagination options menu. */\n  widgetId?: string;\n}\n\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  ofWord = 'of',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate,\n  onEnter = null,\n  perPageComponent = 'div'\n}: OptionsToggleProps) => {\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(\n    styles.optionsMenuToggle,\n    isDisabled && styles.modifiers.disabled,\n    styles.modifiers.plain,\n    styles.modifiers.text\n  );\n\n  const template =\n    typeof ToggleTemplate === 'string' ? (\n      fillTemplate(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })\n    ) : (\n      <ToggleTemplate\n        firstIndex={firstIndex}\n        lastIndex={lastIndex}\n        ofWord={ofWord}\n        itemCount={itemCount}\n        itemsTitle={itemsTitle}\n      />\n    );\n\n  const dropdown = showToggle && (\n    <React.Fragment>\n      {isDiv && <span className={css(styles.optionsMenuToggleText)}>{template}</span>}\n      <DropdownToggle\n        onEnter={onEnter}\n        aria-label={isDiv ? optionsToggle || 'Items per page' : optionsToggle}\n        onToggle={onToggle}\n        isDisabled={isDisabled || (itemCount && itemCount <= 0)}\n        isOpen={isOpen}\n        {...(widgetId && { id: `${widgetId}-toggle` })}\n        className={isDiv ? styles.optionsMenuToggleButton : toggleClasses}\n        parentRef={parentRef}\n        aria-haspopup=\"listbox\"\n      >\n        {!isDiv && template}\n      </DropdownToggle>\n    </React.Fragment>\n  );\n\n  return isDiv ? <div className={toggleClasses}>{dropdown}</div> : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,kEAAkE;AACrF,SAASC,GAAG,QAAQ,0BAA0B;AAE9C,SAASC,YAAY,QAAQ,eAAe;AAE5C,SAASC,cAAc,QAAQ,aAAa;AAwC5C,OAAO,MAAMC,aAAa,GAAgDC,IAAA,IAmBjD;EAAA,IAnBkD;IACzEC,UAAU,GAAG,OAAO;IACpBC,aAAa;IACb;IACAC,iBAAiB,GAAG,gBAAgB;IACpCC,MAAM,GAAG,IAAI;IACbC,UAAU,GAAG,CAAC;IACdC,SAAS,GAAG,CAAC;IACbC,SAAS;IACTC,QAAQ,GAAG,EAAE;IACbC,UAAU,GAAG,IAAI;IACjB;IACAC,QAAQ,GAAIC,OAAgB,IAAKC,SAAgB;IACjDC,MAAM,GAAG,KAAK;IACdC,UAAU,GAAG,KAAK;IAClBC,SAAS,GAAG,IAAI;IAChBC,cAAc,EAAEC,cAAc;IAC9BC,OAAO,GAAG,IAAI;IACdC,gBAAgB,GAAG;EAAK,CACL,GAAAnB,IAAA;EACnB,MAAMoB,KAAK,GAAGD,gBAAgB,KAAK,KAAK;EACxC,MAAME,aAAa,GAAGzB,GAAG,CACvBD,MAAM,CAAC2B,iBAAiB,EACxBR,UAAU,IAAInB,MAAM,CAAC4B,SAAS,CAACC,QAAQ,EACvC7B,MAAM,CAAC4B,SAAS,CAACE,KAAK,EACtB9B,MAAM,CAAC4B,SAAS,CAACG,IAAI,CACtB;EAED,MAAMC,QAAQ,GACZ,OAAOV,cAAc,KAAK,QAAQ,GAChCpB,YAAY,CAACoB,cAAc,EAAE;IAAEZ,UAAU;IAAEC,SAAS;IAAEF,MAAM;IAAEG,SAAS;IAAEN;EAAU,CAAE,CAAC,GAEtFP,KAAA,CAAAkC,aAAA,CAACX,cAAc;IACbZ,UAAU,EAAEA,UAAU;IACtBC,SAAS,EAAEA,SAAS;IACpBF,MAAM,EAAEA,MAAM;IACdG,SAAS,EAAEA,SAAS;IACpBN,UAAU,EAAEA;EAAU,EAEzB;EAEH,MAAM4B,QAAQ,GAAGpB,UAAU,IACzBf,KAAA,CAAAkC,aAAA,CAAClC,KAAK,CAACoC,QAAQ,QACZV,KAAK,IAAI1B,KAAA,CAAAkC,aAAA;IAAMG,SAAS,EAAEnC,GAAG,CAACD,MAAM,CAACqC,qBAAqB;EAAC,GAAGL,QAAQ,CAAQ,EAC/EjC,KAAA,CAAAkC,aAAA,CAAC9B,cAAc,EAAAmC,MAAA,CAAAC,MAAA;IACbhB,OAAO,EAAEA,OAAO;IAAA,cACJE,KAAK,GAAGlB,aAAa,IAAI,gBAAgB,GAAGA,aAAa;IACrEQ,QAAQ,EAAEA,QAAQ;IAClBI,UAAU,EAAEA,UAAU,IAAKP,SAAS,IAAIA,SAAS,IAAI,CAAE;IACvDM,MAAM,EAAEA;EAAM,GACTL,QAAQ,IAAI;IAAE2B,EAAE,EAAE,GAAG3B,QAAQ;EAAS,CAAE,EAAC;IAC9CuB,SAAS,EAAEX,KAAK,GAAGzB,MAAM,CAACyC,uBAAuB,GAAGf,aAAa;IACjEN,SAAS,EAAEA,SAAS;IAAA,iBACN;EAAS,IAEtB,CAACK,KAAK,IAAIO,QAAQ,CACJ,CAEpB;EAED,OAAOP,KAAK,GAAG1B,KAAA,CAAAkC,aAAA;IAAKG,SAAS,EAAEV;EAAa,GAAGQ,QAAQ,CAAO,GAAGA,QAAQ;AAC3E,CAAC;AACD9B,aAAa,CAACsC,WAAW,GAAG,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}