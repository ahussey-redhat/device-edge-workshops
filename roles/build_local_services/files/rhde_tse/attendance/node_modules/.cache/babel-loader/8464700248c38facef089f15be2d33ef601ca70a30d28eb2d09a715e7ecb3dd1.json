{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { formatBreakpointMods, getBreakpoint, getVerticalBreakpoint } from '../../helpers/util';\nimport { PageContextProvider } from './PageContext';\nexport var PageLayouts;\n(function (PageLayouts) {\n  PageLayouts[\"vertical\"] = \"vertical\";\n  PageLayouts[\"horizontal\"] = \"horizontal\";\n})(PageLayouts || (PageLayouts = {}));\nexport class Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mainRef = React.createRef();\n    this.pageRef = React.createRef();\n    this.observer = () => {};\n    this.getWindowWidth = () => {\n      if (canUseDOM) {\n        return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n      } else {\n        return 1200;\n      }\n    };\n    this.isMobile = () =>\n    // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n    this.resize = () => {\n      var _a;\n      const {\n        onPageResize\n      } = this.props;\n      const mobileView = this.isMobile();\n      if (onPageResize) {\n        onPageResize({\n          mobileView,\n          windowSize: this.getWindowWidth()\n        });\n      }\n      if (mobileView !== this.state.mobileView) {\n        this.setState({\n          mobileView\n        });\n      }\n      if ((_a = this.pageRef) === null || _a === void 0 ? void 0 : _a.current) {\n        const currentWidth = this.pageRef.current.clientWidth;\n        const currentHeight = this.pageRef.current.clientHeight;\n        if (this.state.width !== currentWidth) {\n          this.setState({\n            width: currentWidth\n          });\n        }\n        if (this.state.height !== currentHeight) {\n          this.setState({\n            height: currentHeight\n          });\n        }\n      }\n    };\n    this.handleResize = debounce(this.resize, 250);\n    this.handleMainClick = () => {\n      if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n        this.setState({\n          mobileIsNavOpen: false\n        });\n      }\n    };\n    this.onNavToggleMobile = () => {\n      this.setState(prevState => ({\n        mobileIsNavOpen: !prevState.mobileIsNavOpen\n      }));\n    };\n    this.onNavToggleDesktop = () => {\n      this.setState(prevState => ({\n        desktopIsNavOpen: !prevState.desktopIsNavOpen\n      }));\n    };\n    const {\n      isManagedSidebar,\n      defaultManagedSidebarIsOpen\n    } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null,\n      height: null\n    };\n  }\n  componentDidMount() {\n    const {\n      isManagedSidebar,\n      onPageResize\n    } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      }\n      // Initial check if should be shown\n      this.resize();\n    }\n  }\n  componentWillUnmount() {\n    const {\n      isManagedSidebar,\n      onPageResize\n    } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n  render() {\n    const _a = this.props,\n      {\n        breadcrumb,\n        isBreadcrumbWidthLimited,\n        className,\n        children,\n        header,\n        sidebar,\n        notificationDrawer,\n        isNotificationDrawerExpanded,\n        onNotificationDrawerExpand,\n        isTertiaryNavWidthLimited,\n        skipToContent,\n        role,\n        mainContainerId,\n        isManagedSidebar,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        defaultManagedSidebarIsOpen,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onPageResize,\n        getBreakpoint,\n        getVerticalBreakpoint,\n        mainAriaLabel,\n        mainTabIndex,\n        tertiaryNav,\n        isTertiaryNavGrouped,\n        isBreadcrumbGrouped,\n        additionalGroupedContent,\n        groupProps,\n        breadcrumbProps\n      } = _a,\n      rest = __rest(_a, [\"breadcrumb\", \"isBreadcrumbWidthLimited\", \"className\", \"children\", \"header\", \"sidebar\", \"notificationDrawer\", \"isNotificationDrawerExpanded\", \"onNotificationDrawerExpand\", \"isTertiaryNavWidthLimited\", \"skipToContent\", \"role\", \"mainContainerId\", \"isManagedSidebar\", \"defaultManagedSidebarIsOpen\", \"onPageResize\", \"getBreakpoint\", \"getVerticalBreakpoint\", \"mainAriaLabel\", \"mainTabIndex\", \"tertiaryNav\", \"isTertiaryNavGrouped\", \"isBreadcrumbGrouped\", \"additionalGroupedContent\", \"groupProps\", \"breadcrumbProps\"]);\n    const {\n      mobileView,\n      mobileIsNavOpen,\n      desktopIsNavOpen,\n      width,\n      height\n    } = this.state;\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      height,\n      getBreakpoint,\n      getVerticalBreakpoint\n    };\n    let nav = null;\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = React.createElement(\"div\", {\n        className: css(styles.pageMainNav, styles.modifiers.limitWidth)\n      }, React.createElement(\"div\", {\n        className: css(styles.pageMainBody)\n      }, tertiaryNav));\n    } else if (tertiaryNav) {\n      nav = React.createElement(\"div\", {\n        className: css(styles.pageMainNav)\n      }, tertiaryNav);\n    }\n    const crumb = breadcrumb ? React.createElement(\"section\", {\n      className: css(styles.pageMainBreadcrumb, isBreadcrumbWidthLimited && styles.modifiers.limitWidth, formatBreakpointMods(breadcrumbProps === null || breadcrumbProps === void 0 ? void 0 : breadcrumbProps.stickyOnBreakpoint, styles, 'sticky-', getVerticalBreakpoint(height), true))\n    }, isBreadcrumbWidthLimited ? React.createElement(\"div\", {\n      className: css(styles.pageMainBody)\n    }, breadcrumb) : breadcrumb) : null;\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n    const group = isGrouped ? React.createElement(PageGroup, Object.assign({}, groupProps), isTertiaryNavGrouped && nav, isBreadcrumbGrouped && crumb, additionalGroupedContent) : null;\n    const main = React.createElement(\"main\", {\n      ref: this.mainRef,\n      role: role,\n      id: mainContainerId,\n      className: css(styles.pageMain),\n      tabIndex: mainTabIndex,\n      \"aria-label\": mainAriaLabel\n    }, group, !isTertiaryNavGrouped && nav, !isBreadcrumbGrouped && crumb, children);\n    const panelContent = React.createElement(DrawerPanelContent, null, notificationDrawer);\n    return React.createElement(PageContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({\n      ref: this.pageRef\n    }, rest, {\n      className: css(styles.page, width !== null && height !== null && 'pf-m-resize-observer', width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`, height !== null && `pf-m-height-breakpoint-${getVerticalBreakpoint(height)}`, className)\n    }), skipToContent, header, sidebar, notificationDrawer && React.createElement(\"div\", {\n      className: css(styles.pageDrawer)\n    }, React.createElement(Drawer, {\n      isExpanded: isNotificationDrawerExpanded,\n      onExpand: onNotificationDrawerExpand\n    }, React.createElement(DrawerContent, {\n      panelContent: panelContent\n    }, React.createElement(DrawerContentBody, null, main)))), !notificationDrawer && main));\n  }\n}\nPage.displayName = 'Page';\nPage.defaultProps = {\n  isManagedSidebar: false,\n  isBreadcrumbWidthLimited: false,\n  defaultManagedSidebarIsOpen: true,\n  onPageResize: () => null,\n  mainTabIndex: -1,\n  isNotificationDrawerExpanded: false,\n  onNotificationDrawerExpand: () => null,\n  getBreakpoint,\n  getVerticalBreakpoint\n};","map":{"version":3,"names":["React","styles","css","globalBreakpointXl","debounce","canUseDOM","Drawer","DrawerContent","DrawerContentBody","DrawerPanelContent","PageGroup","getResizeObserver","formatBreakpointMods","getBreakpoint","getVerticalBreakpoint","PageContextProvider","PageLayouts","Page","Component","constructor","props","mainRef","createRef","pageRef","observer","getWindowWidth","current","clientWidth","window","innerWidth","isMobile","Number","parseInt","value","resize","onPageResize","mobileView","windowSize","state","setState","_a","currentWidth","currentHeight","clientHeight","width","height","handleResize","handleMainClick","mobileIsNavOpen","onNavToggleMobile","prevState","onNavToggleDesktop","desktopIsNavOpen","isManagedSidebar","defaultManagedSidebarIsOpen","managedSidebarOpen","componentDidMount","currentRef","addEventListener","componentWillUnmount","removeEventListener","render","breadcrumb","isBreadcrumbWidthLimited","className","children","header","sidebar","notificationDrawer","isNotificationDrawerExpanded","onNotificationDrawerExpand","isTertiaryNavWidthLimited","skipToContent","role","mainContainerId","mainAriaLabel","mainTabIndex","tertiaryNav","isTertiaryNavGrouped","isBreadcrumbGrouped","additionalGroupedContent","groupProps","breadcrumbProps","rest","__rest","context","onNavToggle","isNavOpen","nav","createElement","pageMainNav","modifiers","limitWidth","pageMainBody","crumb","pageMainBreadcrumb","stickyOnBreakpoint","isGrouped","group","Object","assign","main","ref","id","pageMain","tabIndex","panelContent","page","pageDrawer","isExpanded","onExpand","displayName","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Page\\Page.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageBreadcrumbProps } from './PageBreadcrumb';\nimport { PageGroup, PageGroupProps } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { formatBreakpointMods, getBreakpoint, getVerticalBreakpoint } from '../../helpers/util';\nimport { PageContextProvider } from './PageContext';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) */\n  notificationDrawer?: React.ReactNode;\n  /** Flag indicating Notification drawer in expanded */\n  isNotificationDrawerExpanded?: boolean;\n  /** Flag indicating if breadcrumb width should be limited */\n  isBreadcrumbWidthLimited?: boolean;\n  /** Callback when notification drawer panel is finished expanding. */\n  onNotificationDrawerExpand?: () => void;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** Sets the value for role on the <main> element */\n  role?: string;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /** tabIndex to use for the [role=\"main\"] element, null to unset it */\n  mainTabIndex?: number | null;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Flag indicating if tertiary nav width should be limited */\n  isTertiaryNavWidthLimited?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: ((object: any) => void) | null;\n  /**\n   * The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\n   * You can override the default getBreakpoint function to return breakpoints at different sizes than the default\n   * You can view the default getBreakpoint function here:\n   * https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts\n   */\n  getBreakpoint?: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /**\n   * The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\n   * You can override the default getVerticalBreakpoint function to return breakpoints at different sizes than the default\n   * You can view the default getVerticalBreakpoint function here:\n   * https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts\n   */\n  getVerticalBreakpoint?: (height: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n  /** Tertiary nav component for the page */\n  tertiaryNav?: React.ReactNode;\n  /** Accessible label, can be used to name main section */\n  mainAriaLabel?: string;\n  /** Flag indicating if the tertiaryNav should be in a group */\n  isTertiaryNavGrouped?: boolean;\n  /** Flag indicating if the breadcrumb should be in a group */\n  isBreadcrumbGrouped?: boolean;\n  /** Additional content of the group */\n  additionalGroupedContent?: React.ReactNode;\n  /** Additional props of the group */\n  groupProps?: PageGroupProps;\n  /** Additional props of the breadcrumb */\n  breadcrumbProps?: PageBreadcrumbProps;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n  width: number;\n  height: number;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n  static displayName = 'Page';\n  static defaultProps: PageProps = {\n    isManagedSidebar: false,\n    isBreadcrumbWidthLimited: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainTabIndex: -1,\n    isNotificationDrawerExpanded: false,\n    onNotificationDrawerExpand: () => null,\n    getBreakpoint,\n    getVerticalBreakpoint\n  };\n  mainRef = React.createRef<HTMLDivElement>();\n  pageRef = React.createRef<HTMLDivElement>();\n  observer: any = () => {};\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null,\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      }\n      // Initial check if should be shown\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n\n  getWindowWidth = () => {\n    if (canUseDOM) {\n      return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n    } else {\n      return 1200;\n    }\n  };\n\n  isMobile = () =>\n    // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n\n  resize = () => {\n    const { onPageResize } = this.props;\n    const mobileView = this.isMobile();\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize: this.getWindowWidth() });\n    }\n    if (mobileView !== this.state.mobileView) {\n      this.setState({ mobileView });\n    }\n    if (this.pageRef?.current) {\n      const currentWidth = this.pageRef.current.clientWidth;\n      const currentHeight = this.pageRef.current.clientHeight;\n\n      if (this.state.width !== currentWidth) {\n        this.setState({ width: currentWidth });\n      }\n      if (this.state.height !== currentHeight) {\n        this.setState({ height: currentHeight });\n      }\n    }\n  };\n\n  handleResize = debounce(this.resize, 250);\n\n  handleMainClick = () => {\n    if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n      this.setState({ mobileIsNavOpen: false });\n    }\n  };\n\n  onNavToggleMobile = () => {\n    this.setState(prevState => ({\n      mobileIsNavOpen: !prevState.mobileIsNavOpen\n    }));\n  };\n\n  onNavToggleDesktop = () => {\n    this.setState(prevState => ({\n      desktopIsNavOpen: !prevState.desktopIsNavOpen\n    }));\n  };\n\n  render() {\n    const {\n      breadcrumb,\n      isBreadcrumbWidthLimited,\n      className,\n      children,\n      header,\n      sidebar,\n      notificationDrawer,\n      isNotificationDrawerExpanded,\n      onNotificationDrawerExpand,\n      isTertiaryNavWidthLimited,\n      skipToContent,\n      role,\n      mainContainerId,\n      isManagedSidebar,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defaultManagedSidebarIsOpen,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onPageResize,\n      getBreakpoint,\n      getVerticalBreakpoint,\n      mainAriaLabel,\n      mainTabIndex,\n      tertiaryNav,\n      isTertiaryNavGrouped,\n      isBreadcrumbGrouped,\n      additionalGroupedContent,\n      groupProps,\n      breadcrumbProps,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen, width, height } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      height,\n      getBreakpoint,\n      getVerticalBreakpoint\n    };\n\n    let nav = null;\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = (\n        <div className={css(styles.pageMainNav, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{tertiaryNav}</div>\n        </div>\n      );\n    } else if (tertiaryNav) {\n      nav = <div className={css(styles.pageMainNav)}>{tertiaryNav}</div>;\n    }\n\n    const crumb = breadcrumb ? (\n      <section\n        className={css(\n          styles.pageMainBreadcrumb,\n          isBreadcrumbWidthLimited && styles.modifiers.limitWidth,\n          formatBreakpointMods(\n            breadcrumbProps?.stickyOnBreakpoint,\n            styles,\n            'sticky-',\n            getVerticalBreakpoint(height),\n            true\n          )\n        )}\n      >\n        {isBreadcrumbWidthLimited ? <div className={css(styles.pageMainBody)}>{breadcrumb}</div> : breadcrumb}\n      </section>\n    ) : null;\n\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n\n    const group = isGrouped ? (\n      <PageGroup {...groupProps}>\n        {isTertiaryNavGrouped && nav}\n        {isBreadcrumbGrouped && crumb}\n        {additionalGroupedContent}\n      </PageGroup>\n    ) : null;\n\n    const main = (\n      <main\n        ref={this.mainRef}\n        role={role}\n        id={mainContainerId}\n        className={css(styles.pageMain)}\n        tabIndex={mainTabIndex}\n        aria-label={mainAriaLabel}\n      >\n        {group}\n        {!isTertiaryNavGrouped && nav}\n        {!isBreadcrumbGrouped && crumb}\n        {children}\n      </main>\n    );\n\n    const panelContent = <DrawerPanelContent>{notificationDrawer}</DrawerPanelContent>;\n\n    return (\n      <PageContextProvider value={context}>\n        <div\n          ref={this.pageRef}\n          {...rest}\n          className={css(\n            styles.page,\n            width !== null && height !== null && 'pf-m-resize-observer',\n            width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`,\n            height !== null && `pf-m-height-breakpoint-${getVerticalBreakpoint(height)}`,\n            className\n          )}\n        >\n          {skipToContent}\n          {header}\n          {sidebar}\n          {notificationDrawer && (\n            <div className={css(styles.pageDrawer)}>\n              <Drawer isExpanded={isNotificationDrawerExpanded} onExpand={onNotificationDrawerExpand}>\n                <DrawerContent panelContent={panelContent}>\n                  <DrawerContentBody>{main}</DrawerContentBody>\n                </DrawerContent>\n              </Drawer>\n            </div>\n          )}\n          {!notificationDrawer && main}\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}