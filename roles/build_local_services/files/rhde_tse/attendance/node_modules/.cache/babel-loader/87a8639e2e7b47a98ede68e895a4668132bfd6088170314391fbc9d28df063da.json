{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectPosition, SelectDirection, SelectFooterTabbableItems } from './selectConstants';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util';\n// seed for the aria-labelledby ID\nlet currentId = 0;\nexport class Select extends React.Component {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.parentRef = React.createRef();\n    this.menuComponentRef = React.createRef();\n    this.filterRef = React.createRef();\n    this.clearRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    this.footerRef = React.createRef();\n    this.state = {\n      focusFirstOption: false,\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      favoritesGroup: [],\n      typeaheadCurrIndex: -1,\n      typeaheadStoredIndex: -1,\n      creatableValue: '',\n      tabbedIntoFavoritesMenu: false,\n      ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n      viewMoreNextIndex: -1\n    };\n    this.getTypeaheadActiveChild = typeaheadCurrIndex => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.hasInlineFilter) {\n        this.refCollection[0][0] = this.filterRef.current;\n      }\n      // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n      if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n        const firstRef = this.refCollection.find(ref =>\n        // If a select option is disabled then ref[0] will be undefined, so we want to return\n        // the first ref that both a) is not null and b) is not disabled.\n        ref !== null && ref[0]);\n        if (firstRef && firstRef[0]) {\n          firstRef[0].focus();\n        }\n      } else if (\n      // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n      this.state.viewMoreNextIndex !== -1 && this.refCollection.length > this.state.viewMoreNextIndex && this.props.loadingVariant !== 'spinner' && this.refCollection[this.state.viewMoreNextIndex][0] && this.props.variant !== 'typeahead' &&\n      // do not hard focus newly added items for typeahead variants\n      this.props.variant !== 'typeaheadmulti') {\n        this.refCollection[this.state.viewMoreNextIndex][0].focus();\n        this.setState({\n          viewMoreNextIndex: -1\n        });\n      }\n      const checkUpdatedChildren = (prevChildren, currChildren) => Array.from(prevChildren).some((prevChild, index) => {\n        const prevChildProps = prevChild.props;\n        const currChild = currChildren[index];\n        const {\n          props: currChildProps\n        } = currChild;\n        if (prevChildProps && currChildProps) {\n          return prevChildProps.value !== currChildProps.value || prevChildProps.label !== currChildProps.label || prevChildProps.isDisabled !== currChildProps.isDisabled || prevChildProps.isPlaceholder !== currChildProps.isPlaceholder;\n        } else {\n          return prevChild !== currChild;\n        }\n      });\n      const hasUpdatedChildren = prevProps.children.length !== this.props.children.length || checkUpdatedChildren(prevProps.children, this.props.children) || this.props.isGrouped && Array.from(prevProps.children).some((prevChild, index) => prevChild.type === SelectGroup && prevChild.props.children && this.props.children[index].props.children && (prevChild.props.children.length !== this.props.children[index].props.children.length || checkUpdatedChildren(prevChild.props.children, this.props.children[index].props.children)));\n      if (hasUpdatedChildren) {\n        this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n      }\n      // for menus with favorites,\n      // if the number of favorites or typeahead filtered children has changed, the generated\n      // list of favorites needs to be updated\n      if (this.props.onFavorite && (this.props.favorites.length !== prevProps.favorites.length || this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n        const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti' ? this.state.typeaheadFilteredChildren : this.props.children;\n        const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n        const favoritesGroup = renderableFavorites.length ? [React.createElement(SelectGroup, {\n          key: \"favorites\",\n          label: this.props.favoritesLabel\n        }, renderableFavorites), React.createElement(Divider, {\n          key: \"favorites-group-divider\"\n        })] : [];\n        this.setState({\n          favoritesGroup\n        });\n      }\n    };\n    this.onEnter = () => {\n      this.setState({\n        focusFirstOption: true\n      });\n    };\n    this.onToggle = (isExpanded, e) => {\n      const {\n        isInputValuePersisted,\n        onSelect,\n        onToggle,\n        hasInlineFilter\n      } = this.props;\n      if (!isExpanded && isInputValuePersisted && onSelect) {\n        onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n      }\n      if (isExpanded && hasInlineFilter) {\n        this.setState({\n          focusFirstOption: true\n        });\n      }\n      onToggle(isExpanded, e);\n    };\n    this.onClose = () => {\n      const {\n        isInputFilterPersisted\n      } = this.props;\n      this.setState(Object.assign(Object.assign({\n        focusFirstOption: false,\n        typeaheadInputValue: null\n      }, !isInputFilterPersisted && {\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      }), {\n        typeaheadCurrIndex: -1,\n        tabbedIntoFavoritesMenu: false,\n        viewMoreNextIndex: -1\n      }));\n    };\n    this.onChange = e => {\n      if (e.target.value.toString() !== '' && !this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n      if (this.props.onTypeaheadInputChanged) {\n        this.props.onTypeaheadInputChanged(e.target.value.toString());\n      }\n      this.setState({\n        typeaheadCurrIndex: -1,\n        typeaheadInputValue: e.target.value,\n        creatableValue: e.target.value\n      });\n      this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n      this.refCollection = [[]];\n    };\n    this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n      let typeaheadFilteredChildren;\n      const {\n        onFilter,\n        isCreatable,\n        isCreateOptionOnTop,\n        onCreateOption,\n        createText,\n        noResultsFoundText,\n        children,\n        isGrouped,\n        isCreateSelectOptionObject,\n        loadingVariant\n      } = this.props;\n      if (onFilter) {\n        /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n         * In this case the e is null but we can get the typeaheadInputValue from the state.\n         */\n        typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n      } else {\n        let input;\n        try {\n          input = new RegExp(typeaheadInputValue.toString(), 'i');\n        } catch (err) {\n          input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        }\n        const childrenArray = React.Children.toArray(children);\n        if (isGrouped) {\n          const childFilter = child => child.props.value && child.props.value.toString && this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? React.Children.map(children, group => {\n            if (React.isValidElement(group) && group.type === SelectGroup) {\n              const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n              if (filteredGroupChildren.length > 0) {\n                return React.cloneElement(group, {\n                  titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                  children: filteredGroupChildren\n                });\n              }\n            } else {\n              return React.Children.toArray(group).filter(childFilter);\n            }\n          }) : childrenArray;\n        } else {\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? childrenArray.filter(child => {\n            const valueToCheck = child.props.value;\n            // Dividers don't have value and should not be filtered\n            if (!valueToCheck) {\n              return true;\n            }\n            const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n            // View more option should be returned as not a match\n            if (loadingVariant !== 'spinner' && (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) === valueToCheck) {\n              return true;\n            }\n            // spinner should be returned as not a match\n            if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n              return true;\n            }\n            if (isSelectOptionObject) {\n              return valueToCheck.compareTo(typeaheadInputValue);\n            } else {\n              return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n            }\n          }) : childrenArray;\n        }\n      }\n      if (!typeaheadFilteredChildren) {\n        typeaheadFilteredChildren = [];\n      }\n      if (typeaheadFilteredChildren.length === 0) {\n        !isCreatable && typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n          isDisabled: true,\n          key: \"no-results\",\n          value: noResultsFoundText,\n          isNoResultsOption: true\n        }));\n      }\n      if (isCreatable && typeaheadInputValue !== '') {\n        const newValue = typeaheadInputValue;\n        if (!typeaheadFilteredChildren.find(i => i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase())) {\n          const newOptionValue = isCreateSelectOptionObject ? {\n            toString: () => newValue,\n            compareTo: value => this.toString().toLowerCase().includes(value.toString().toLowerCase())\n          } : newValue;\n          const createSelectOption = React.createElement(SelectOption, {\n            key: `create ${newValue}`,\n            value: newOptionValue,\n            onClick: () => onCreateOption && onCreateOption(newValue)\n          }, createText, \" \\\"\", newValue, \"\\\"\");\n          if (isCreateOptionOnTop) {\n            typeaheadFilteredChildren.unshift(createSelectOption);\n          } else {\n            typeaheadFilteredChildren.push(createSelectOption);\n          }\n        }\n      }\n      this.setState({\n        typeaheadFilteredChildren\n      });\n    };\n    this.onClick = e => {\n      if (!this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n    };\n    this.clearSelection = _e => {\n      this.setState({\n        typeaheadInputValue: null,\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n        typeaheadCurrIndex: -1\n      });\n    };\n    this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n      this.refCollection[index] = [optionRef, favoriteRef];\n      this.optionContainerRefCollection[index] = optionContainerRef;\n    };\n    this.handleMenuKeys = (index, innerIndex, position) => {\n      keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n      if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n        if (position !== 'tab') {\n          this.handleTypeaheadKeys(position);\n        }\n      }\n    };\n    this.moveFocus = function (nextIndex) {\n      let updateCurrentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const {\n        isCreatable,\n        createText\n      } = _this.props;\n      const hasDescriptionElm = Boolean(_this.refCollection[nextIndex][0] && _this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n      const isLoad = Boolean(_this.refCollection[nextIndex][0] && _this.refCollection[nextIndex][0].classList.contains('pf-m-load'));\n      const optionTextElm = hasDescriptionElm ? _this.refCollection[nextIndex][0].firstElementChild : _this.refCollection[nextIndex][0];\n      let typeaheadInputValue = '';\n      if (isCreatable && optionTextElm.textContent.includes(createText)) {\n        typeaheadInputValue = _this.state.creatableValue;\n      } else if (optionTextElm && !isLoad) {\n        // !isLoad prevents the view more button text from appearing the typeahead input\n        typeaheadInputValue = optionTextElm.textContent;\n      }\n      _this.setState(prevState => ({\n        typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n        typeaheadStoredIndex: nextIndex,\n        typeaheadInputValue\n      }));\n    };\n    this.switchFocusToFavoriteMenu = () => {\n      const {\n        typeaheadCurrIndex,\n        typeaheadStoredIndex\n      } = this.state;\n      let indexForFocus = 0;\n      if (typeaheadCurrIndex !== -1) {\n        indexForFocus = typeaheadCurrIndex;\n      } else if (typeaheadStoredIndex !== -1) {\n        indexForFocus = typeaheadStoredIndex;\n      }\n      if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n        this.refCollection[indexForFocus][0].focus();\n      } else {\n        this.clearRef.current.focus();\n      }\n      this.setState({\n        tabbedIntoFavoritesMenu: true,\n        typeaheadCurrIndex: -1\n      });\n    };\n    this.moveFocusToLastMenuItem = () => {\n      const refCollectionLen = this.refCollection.length;\n      if (refCollectionLen > 0 && this.refCollection[refCollectionLen - 1] !== null && this.refCollection[refCollectionLen - 1][0] !== null) {\n        this.refCollection[refCollectionLen - 1][0].focus();\n      }\n    };\n    this.handleTypeaheadKeys = function (position) {\n      let shiftKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const {\n        isOpen,\n        onFavorite,\n        isCreatable\n      } = _this.props;\n      const {\n        typeaheadCurrIndex,\n        tabbedIntoFavoritesMenu\n      } = _this.state;\n      const typeaheadActiveChild = _this.getTypeaheadActiveChild(typeaheadCurrIndex);\n      if (isOpen) {\n        if (position === 'enter') {\n          if ((typeaheadCurrIndex !== -1 || isCreatable && _this.refCollection.length === 1) && (\n          // do not allow selection without moving to an initial option unless it is a single create option\n          typeaheadActiveChild || _this.refCollection[0] && _this.refCollection[0][0])) {\n            if (typeaheadActiveChild) {\n              if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n                const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n                const typeaheadActiveChildText = hasDescriptionElm ? typeaheadActiveChild.firstChild.textContent : typeaheadActiveChild.textContent;\n                _this.setState({\n                  typeaheadInputValue: typeaheadActiveChildText\n                });\n              }\n            } else if (_this.refCollection[0] && _this.refCollection[0][0]) {\n              _this.setState({\n                typeaheadInputValue: _this.refCollection[0][0].textContent\n              });\n            }\n            if (typeaheadActiveChild) {\n              typeaheadActiveChild.click();\n            } else {\n              _this.refCollection[0][0].click();\n            }\n          }\n        } else if (position === 'tab') {\n          if (onFavorite) {\n            // if the input has focus, tab to the first item or the last item that was previously focused.\n            if (_this.inputRef.current === document.activeElement) {\n              // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n              if (_this.props.footer && shiftKey) {\n                const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n                if (tabbableItems.length > 0) {\n                  if (tabbableItems[tabbableItems.length - 1]) {\n                    tabbableItems[tabbableItems.length - 1].focus();\n                  }\n                }\n              } else {\n                _this.switchFocusToFavoriteMenu();\n              }\n            } else {\n              // focus is on menu or footer\n              if (_this.props.footer) {\n                let tabbedIntoMenu = false;\n                const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n                if (tabbableItems.length > 0) {\n                  // if current element is not in footer, tab to first tabbable element in footer,\n                  // if shift was clicked, tab to input since focus is on menu\n                  const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n                  if (currentElementIndex === -1) {\n                    if (shiftKey) {\n                      // currently in menu, shift back to input\n                      _this.inputRef.current.focus();\n                    } else {\n                      // currently in menu, tab to first tabbable item in footer\n                      tabbableItems[0].focus();\n                    }\n                  } else {\n                    // already in footer\n                    if (shiftKey) {\n                      // shift to previous item\n                      if (currentElementIndex === 0) {\n                        // on first footer item, shift back to menu\n                        _this.switchFocusToFavoriteMenu();\n                        tabbedIntoMenu = true;\n                      } else {\n                        // shift to previous footer item\n                        tabbableItems[currentElementIndex - 1].focus();\n                      }\n                    } else {\n                      // tab to next tabbable item in footer or to input.\n                      if (tabbableItems[currentElementIndex + 1]) {\n                        tabbableItems[currentElementIndex + 1].focus();\n                      } else {\n                        _this.inputRef.current.focus();\n                      }\n                    }\n                  }\n                } else {\n                  // no tabbable items in footer, tab to input\n                  _this.inputRef.current.focus();\n                  tabbedIntoMenu = false;\n                }\n                _this.setState({\n                  tabbedIntoFavoritesMenu: tabbedIntoMenu\n                });\n              } else {\n                _this.inputRef.current.focus();\n                _this.setState({\n                  tabbedIntoFavoritesMenu: false\n                });\n              }\n            }\n          } else {\n            // Close if there is no footer\n            if (!_this.props.footer) {\n              _this.onToggle(false, null);\n              _this.onClose();\n            } else {\n              // has footer\n              const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n              const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n              if (_this.inputRef.current === document.activeElement) {\n                if (shiftKey) {\n                  // close toggle if shift key and tab on input\n                  _this.onToggle(false, null);\n                  _this.onClose();\n                } else {\n                  // tab to first tabbable item in footer\n                  if (tabbableItems[0]) {\n                    tabbableItems[0].focus();\n                  } else {\n                    _this.onToggle(false, null);\n                    _this.onClose();\n                  }\n                }\n              } else {\n                // focus is in footer\n                if (shiftKey) {\n                  if (currentElementIndex === 0) {\n                    // shift tab back to input\n                    _this.inputRef.current.focus();\n                  } else {\n                    // shift to previous footer item\n                    tabbableItems[currentElementIndex - 1].focus();\n                  }\n                } else {\n                  // tab to next footer item or close tab if last item\n                  if (tabbableItems[currentElementIndex + 1]) {\n                    tabbableItems[currentElementIndex + 1].focus();\n                  } else {\n                    // no next item, close toggle\n                    _this.onToggle(false, null);\n                    _this.inputRef.current.focus();\n                    _this.onClose();\n                  }\n                }\n              }\n            }\n          }\n        } else if (!tabbedIntoFavoritesMenu) {\n          if (_this.refCollection[0][0] === null) {\n            return;\n          }\n          let nextIndex;\n          if (typeaheadCurrIndex === -1 && position === 'down') {\n            nextIndex = 0;\n          } else if (typeaheadCurrIndex === -1 && position === 'up') {\n            nextIndex = _this.refCollection.length - 1;\n          } else if (position !== 'left' && position !== 'right') {\n            nextIndex = getNextIndex(typeaheadCurrIndex, position, _this.refCollection);\n          } else {\n            nextIndex = typeaheadCurrIndex;\n          }\n          if (_this.refCollection[nextIndex] === null) {\n            return;\n          }\n          _this.moveFocus(nextIndex);\n        } else {\n          const nextIndex = _this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n          _this.moveFocus(nextIndex);\n        }\n      }\n    };\n    this.onClickTypeaheadToggleButton = () => {\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.focus();\n      }\n    };\n    this.getDisplay = function (value) {\n      let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node';\n      if (!value) {\n        return;\n      }\n      const item = _this.props.isGrouped ? React.Children.toArray(_this.props.children).reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], []).find(child => child.props.value.toString() === value.toString()) : React.Children.toArray(_this.props.children).find(child => child.props.value && child.props.value.toString() === value.toString());\n      if (item) {\n        if (item && item.props.children) {\n          if (type === 'node') {\n            return item.props.children;\n          }\n          return _this.findText(item);\n        }\n        return item.props.value.toString();\n      }\n      return value.toString();\n    };\n    this.findText = item => {\n      if (typeof item === 'string') {\n        return item;\n      } else if (!React.isValidElement(item)) {\n        return '';\n      } else {\n        const multi = [];\n        React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n        return multi.join('');\n      }\n    };\n    this.generateSelectedBadge = () => {\n      const {\n        customBadgeText,\n        selections\n      } = this.props;\n      if (customBadgeText !== null) {\n        return customBadgeText;\n      }\n      if (Array.isArray(selections) && selections.length > 0) {\n        return selections.length;\n      }\n      return null;\n    };\n    this.setVieMoreNextIndex = () => {\n      this.setState({\n        viewMoreNextIndex: this.refCollection.length - 1\n      });\n    };\n    this.isLastOptionBeforeFooter = index => this.props.footer && index === this.refCollection.length - 1 ? true : false;\n  }\n  extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n    const {\n      isGrouped,\n      onFavorite,\n      createText\n    } = this.props;\n    const typeaheadChildren = favoritesGroup ? favoritesGroup.concat(this.state.typeaheadFilteredChildren) : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n    }\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: activeElement && (activeElement.id === child.props.id || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`)\n            }))\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: typeaheadActiveChild && (typeaheadActiveChild.textContent === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${child.props.value}\"`)\n            }))\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group, {\n            isFocused: typeaheadActiveChild && (typeaheadActiveChild.textContent === group.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`)\n          });\n        }\n      });\n    }\n    return typeaheadChildren.map((child, index) => {\n      const childElement = child;\n      return childElement.type.displayName === 'Divider' ? child : React.cloneElement(child, {\n        isFocused: typeaheadActiveChild ? typeaheadActiveChild.textContent === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${child.props.value}\"` : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n      });\n    });\n  }\n\n  render() {\n    const _a = this.props,\n      {\n        children,\n        chipGroupProps,\n        chipGroupComponent,\n        className,\n        customContent,\n        variant,\n        direction,\n        onSelect,\n        onClear,\n        onBlur,\n        toggleId,\n        toggleRef,\n        isOpen,\n        isGrouped,\n        isPlain,\n        isDisabled,\n        hasPlaceholderStyle,\n        validated,\n        selections: selectionsProp,\n        typeAheadAriaLabel,\n        typeAheadAriaDescribedby,\n        clearSelectionsAriaLabel,\n        toggleAriaLabel,\n        removeSelectionAriaLabel,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-describedby': ariaDescribedby,\n        'aria-invalid': ariaInvalid,\n        placeholderText,\n        width,\n        maxHeight,\n        toggleIcon,\n        toggleIndicator,\n        ouiaId,\n        ouiaSafe,\n        hasInlineFilter,\n        isCheckboxSelectionBadgeHidden,\n        inlineFilterPlaceholderText,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onFilter,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onTypeaheadInputChanged,\n        onCreateOption,\n        isCreatable,\n        onToggle,\n        createText,\n        noResultsFoundText,\n        customBadgeText,\n        inputIdPrefix,\n        inputAutoComplete,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isInputValuePersisted,\n        isInputFilterPersisted,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        menuAppendTo,\n        favorites,\n        onFavorite,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        favoritesLabel,\n        footer,\n        loadingVariant,\n        isCreateSelectOptionObject,\n        isCreateOptionOnTop,\n        shouldResetOnSelect,\n        isFlipEnabled,\n        removeFindDomNode,\n        zIndex\n      } = _a,\n      props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onSelect\", \"onClear\", \"onBlur\", \"toggleId\", \"toggleRef\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"typeAheadAriaDescribedby\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"toggleIndicator\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"onToggle\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"inputAutoComplete\", \"isInputValuePersisted\", \"isInputFilterPersisted\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\", \"footer\", \"loadingVariant\", \"isCreateSelectOptionObject\", \"isCreateOptionOnTop\", \"shouldResetOnSelect\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    const {\n      focusFirstOption: openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n    // Find out if the selected option is a placeholder\n    const selectedOption = React.Children.toArray(children).find(option => option.props.value === selections[0]);\n    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null;\n    // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n    let renderableItems = [];\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren = children;\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      }\n      // mark items that are favorited with isFavorite\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(child => child.props.isPlaceholder === true);\n        childPlaceholderText = childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node') || children[0] && this.getDisplay(children[0].props.value, 'node');\n      }\n    }\n    if (isOpen) {\n      if (renderableItems.find(item => (item === null || item === void 0 ? void 0 : item.key) === 'loading') === undefined) {\n        if (loadingVariant === 'spinner') {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoading: true,\n            key: \"loading\",\n            value: \"loading\"\n          }, React.createElement(Spinner, {\n            size: \"lg\"\n          })));\n        } else if (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoad: true,\n            key: \"loading\",\n            value: loadingVariant.text,\n            setViewMoreNextIndex: this.setVieMoreNextIndex,\n            onClick: loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.onClick\n          }));\n        }\n      }\n    }\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = React.createElement(\"button\", {\n      className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear),\n      onClick: e => {\n        this.clearSelection(e);\n        onClear(e);\n        e.stopPropagation();\n      },\n      \"aria-label\": clearSelectionsAriaLabel,\n      type: \"button\",\n      disabled: isDisabled,\n      ref: this.clearRef,\n      onKeyDown: event => {\n        if (event.key === KeyTypes.Enter) {\n          this.clearRef.current.click();\n        }\n      }\n    }, React.createElement(TimesCircleIcon, {\n      \"aria-hidden\": true\n    }));\n    let selectedChips = null;\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? chipGroupComponent : React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections && selections.map(item => React.createElement(Chip, {\n        key: item,\n        onClick: e => onSelect(e, item),\n        closeBtnAriaLabel: removeSelectionAriaLabel\n      }, this.getDisplay(item, 'node'))));\n    }\n    if (hasInlineFilter) {\n      const filterBox = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        key: \"inline-filter\",\n        className: css(styles.selectMenuSearch)\n      }, React.createElement(\"input\", {\n        key: \"inline-filter-input\",\n        type: \"search\",\n        className: css(formStyles.formControl, formStyles.modifiers.search),\n        onChange: this.onChange,\n        placeholder: inlineFilterPlaceholderText,\n        onKeyDown: event => {\n          if (event.key === KeyTypes.ArrowUp) {\n            this.handleMenuKeys(0, 0, 'up');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowDown) {\n            this.handleMenuKeys(0, 0, 'down');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowLeft) {\n            this.handleMenuKeys(0, 0, 'left');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowRight) {\n            this.handleMenuKeys(0, 0, 'right');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n            // tab to footer or close menu if shift key\n            if (event.shiftKey) {\n              this.onToggle(false, event);\n            } else {\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                tabbableItems[0].focus();\n                event.stopPropagation();\n                event.preventDefault();\n              } else {\n                this.onToggle(false, event);\n              }\n            }\n          } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n            // More modal-like experience for checkboxes\n            // Let SelectOption handle this\n            if (event.shiftKey) {\n              this.handleMenuKeys(0, 0, 'up');\n            } else {\n              this.handleMenuKeys(0, 0, 'down');\n            }\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        },\n        ref: this.filterRef,\n        autoComplete: inputAutoComplete\n      })), React.createElement(Divider, {\n        key: \"inline-filter-divider\"\n      }));\n      renderableItems = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, {\n        key: index\n      }));\n    }\n    let variantProps;\n    let variantChildren;\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n          break;\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n          break;\n      }\n    }\n    const isStatic = isFlipEnabled && menuAppendTo !== 'inline';\n    const innerMenu = React.createElement(SelectMenu, Object.assign({\n      className: css(isStatic && styles.modifiers.static)\n    }, props, {\n      isGrouped: isGrouped,\n      selected: selections\n    }, variantProps, {\n      openedOnEnter: openedOnEnter,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      sendRef: this.sendRef,\n      keyHandler: this.handleMenuKeys,\n      maxHeight: maxHeight,\n      ref: this.menuComponentRef,\n      footer: footer,\n      footerRef: this.footerRef,\n      isLastOptionBeforeFooter: this.isLastOptionBeforeFooter\n    }), variantChildren);\n    const menuContainer = footer ? React.createElement(\"div\", {\n      className: css(styles.selectMenu)\n    }, \" \", innerMenu, \" \") : innerMenu;\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className)\n    }, width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className),\n      ref: this.parentRef\n    }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), React.createElement(SelectToggle, Object.assign({\n      id: selectToggleId,\n      parentRef: this.parentRef,\n      menuRef: this.menuComponentRef,\n      ref: toggleRef\n    }, footer && {\n      footerRef: this.footerRef\n    }, {\n      isOpen: isOpen,\n      isPlain: isPlain,\n      hasPlaceholderStyle: hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder),\n      onToggle: this.onToggle,\n      onEnter: this.onEnter,\n      onClose: this.onClose,\n      onBlur: onBlur,\n      variant: variant,\n      toggleIndicator: toggleIndicator,\n      \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`,\n      \"aria-label\": toggleAriaLabel\n    }, ariaDescribedby && {\n      'aria-describedby': ariaDescribedby\n    }, {\n      handleTypeaheadKeys: this.handleTypeaheadKeys,\n      moveFocusToLastMenuItem: this.moveFocusToLastMenuItem,\n      isDisabled: isDisabled,\n      hasClearButton: hasOnClear,\n      hasFooter: footer !== undefined,\n      onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton\n    }), customContent && React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText)), variant === SelectVariant.single && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.checkbox && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText), !isCheckboxSelectionBadgeHidden && hasAnySelections && React.createElement(\"div\", {\n      className: css(styles.selectToggleBadge)\n    }, React.createElement(\"span\", {\n      className: css(badgeStyles.badge, badgeStyles.modifiers.read)\n    }, this.generateSelectedBadge()))), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.typeahead && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-typeahead`,\n      \"aria-label\": typeAheadAriaLabel\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : this.getDisplay(selections[0], 'text') || '',\n      type: \"text\",\n      onClick: this.onClick,\n      onChange: this.onChange,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn), variant === SelectVariant.typeaheadMulti && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), selections && Array.isArray(selections) && selections.length > 0 && selectedChips, React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-multi-typeahead-typeahead`,\n      \"aria-label\": typeAheadAriaLabel,\n      \"aria-invalid\": validated === ValidatedOptions.error\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : '',\n      type: \"text\",\n      onChange: this.onChange,\n      onClick: this.onClick,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections && selections.length > 0 || typeaheadInputValue) && clearBtn), validated === ValidatedOptions.success && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(CheckCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.error && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.warning && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationTriangleIcon, {\n      \"aria-hidden\": \"true\"\n    }))), isOpen && menuAppendTo === 'inline' && menuContainer);\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n    return React.createElement(GenerateId, null, randomId => React.createElement(SelectContext.Provider, {\n      value: {\n        onSelect,\n        onFavorite,\n        onClose: this.onClose,\n        variant,\n        inputIdPrefix: inputIdPrefix || randomId,\n        shouldResetOnSelect\n      }\n    }, menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      direction: direction,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen,\n      removeFindDomNode: removeFindDomNode,\n      zIndex: zIndex\n    })));\n  }\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n  children: [],\n  className: '',\n  position: SelectPosition.left,\n  direction: SelectDirection.down,\n  toggleId: null,\n  isOpen: false,\n  isGrouped: false,\n  isPlain: false,\n  isDisabled: false,\n  hasPlaceholderStyle: false,\n  isCreatable: false,\n  isCreateOptionOnTop: false,\n  validated: 'default',\n  'aria-label': '',\n  'aria-labelledby': '',\n  'aria-describedby': '',\n  'aria-invalid': false,\n  typeAheadAriaLabel: '',\n  typeAheadAriaDescribedby: '',\n  clearSelectionsAriaLabel: 'Clear all',\n  toggleAriaLabel: 'Options menu',\n  removeSelectionAriaLabel: 'Remove',\n  selections: [],\n  createText: 'Create',\n  placeholderText: '',\n  noResultsFoundText: 'No results found',\n  variant: SelectVariant.single,\n  width: '',\n  onClear: () => undefined,\n  onCreateOption: () => undefined,\n  toggleIcon: null,\n  toggleIndicator: null,\n  onFilter: null,\n  onTypeaheadInputChanged: null,\n  customContent: null,\n  hasInlineFilter: false,\n  inlineFilterPlaceholderText: null,\n  customBadgeText: null,\n  inputIdPrefix: '',\n  inputAutoComplete: 'off',\n  menuAppendTo: 'inline',\n  favorites: [],\n  favoritesLabel: 'Favorites',\n  ouiaSafe: true,\n  chipGroupComponent: null,\n  isInputValuePersisted: false,\n  isInputFilterPersisted: false,\n  isCreateSelectOptionObject: false,\n  shouldResetOnSelect: true,\n  isFlipEnabled: true,\n  removeFindDomNode: false,\n  zIndex: 9999\n};","map":{"version":3,"names":["React","styles","badgeStyles","formStyles","buttonStyles","css","TimesCircleIcon","CheckCircleIcon","ExclamationTriangleIcon","ExclamationCircleIcon","SelectMenu","SelectOption","SelectGroup","SelectToggle","SelectContext","SelectVariant","SelectPosition","SelectDirection","SelectFooterTabbableItems","ChipGroup","Chip","Spinner","keyHandler","getNextIndex","getOUIAProps","getDefaultOUIAId","GenerateId","KeyTypes","Divider","Popper","createRenderableFavorites","extendItemsWithFavorite","ValidatedOptions","findTabbableElements","currentId","Select","Component","constructor","_this","parentRef","createRef","menuComponentRef","filterRef","clearRef","inputRef","refCollection","optionContainerRefCollection","footerRef","state","focusFirstOption","typeaheadInputValue","typeaheadFilteredChildren","Children","toArray","props","children","favoritesGroup","typeaheadCurrIndex","typeaheadStoredIndex","creatableValue","tabbedIntoFavoritesMenu","ouiaStateId","displayName","variant","viewMoreNextIndex","getTypeaheadActiveChild","componentDidUpdate","prevProps","prevState","hasInlineFilter","current","customContent","firstRef","find","ref","focus","length","loadingVariant","setState","checkUpdatedChildren","prevChildren","currChildren","Array","from","some","prevChild","index","prevChildProps","currChild","currChildProps","value","label","isDisabled","isPlaceholder","hasUpdatedChildren","isGrouped","type","updateTypeAheadFilteredChildren","onFavorite","favorites","tempRenderableChildren","renderableFavorites","createElement","key","favoritesLabel","onEnter","onToggle","isExpanded","e","isInputValuePersisted","onSelect","undefined","onClose","isInputFilterPersisted","Object","assign","onChange","target","toString","isOpen","onTypeaheadInputChanged","onFilter","isCreatable","isCreateOptionOnTop","onCreateOption","createText","noResultsFoundText","isCreateSelectOptionObject","input","RegExp","err","replace","childrenArray","childFilter","child","getDisplay","search","map","group","isValidElement","filteredGroupChildren","filter","cloneElement","titleId","valueToCheck","isSelectOptionObject","compareTo","text","push","isNoResultsOption","newValue","i","toLowerCase","newOptionValue","includes","createSelectOption","onClick","unshift","clearSelection","_e","sendRef","optionRef","favoriteRef","optionContainerRef","handleMenuKeys","innerIndex","position","typeahead","typeaheadMulti","handleTypeaheadKeys","moveFocus","nextIndex","updateCurrentIndex","arguments","hasDescriptionElm","Boolean","classList","contains","isLoad","optionTextElm","firstElementChild","textContent","switchFocusToFavoriteMenu","indexForFocus","moveFocusToLastMenuItem","refCollectionLen","shiftKey","typeaheadActiveChild","childElementCount","typeaheadActiveChildText","firstChild","click","document","activeElement","footer","tabbableItems","tabbedIntoMenu","currentElementIndex","findIndex","item","onClickTypeaheadToggleButton","reduce","acc","curr","findText","multi","forEach","join","generateSelectedBadge","customBadgeText","selections","isArray","setVieMoreNextIndex","isLastOptionBeforeFooter","extendTypeaheadChildren","typeaheadChildren","concat","isFocused","id","childElement","render","_a","chipGroupProps","chipGroupComponent","className","direction","onClear","onBlur","toggleId","toggleRef","isPlain","hasPlaceholderStyle","validated","selectionsProp","typeAheadAriaLabel","typeAheadAriaDescribedby","clearSelectionsAriaLabel","toggleAriaLabel","removeSelectionAriaLabel","ariaLabel","ariaLabelledBy","ariaDescribedby","ariaInvalid","placeholderText","width","maxHeight","toggleIcon","toggleIndicator","ouiaId","ouiaSafe","isCheckboxSelectionBadgeHidden","inlineFilterPlaceholderText","inputIdPrefix","inputAutoComplete","menuAppendTo","shouldResetOnSelect","isFlipEnabled","removeFindDomNode","zIndex","__rest","openedOnEnter","selectToggleId","selectedOption","option","isSelectedPlaceholder","hasAnySelections","childPlaceholderText","renderableItems","tempExtendedChildren","childPlaceholder","isLoading","size","setViewMoreNextIndex","hasOnClear","defaultProps","clearBtn","button","modifiers","plain","selectToggleClear","stopPropagation","disabled","onKeyDown","event","Enter","selectedChips","closeBtnAriaLabel","filterBox","Fragment","selectMenuSearch","formControl","placeholder","ArrowUp","preventDefault","ArrowDown","ArrowLeft","ArrowRight","Tab","checkbox","autoComplete","variantProps","variantChildren","selected","isCustomContent","checked","isStatic","innerMenu","static","menuContainer","selectMenu","popperContainer","select","expanded","success","warning","error","invalid","up","top","style","default","mainContainer","menuRef","hasClearButton","hasFooter","selectToggleWrapper","selectToggleIcon","selectToggleText","single","selectToggleBadge","badge","read","selectToggleTypeahead","selectToggleStatusIcon","getParentElement","parentElement","randomId","Provider","trigger","popper","appendTo","isVisible","left","down"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Select\\Select.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption, SelectOptionObject } from './SelectOption';\nimport { SelectGroup, SelectGroupProps } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport {\n  SelectContext,\n  SelectVariant,\n  SelectPosition,\n  SelectDirection,\n  SelectFooterTabbableItems\n} from './selectConstants';\nimport { ChipGroup, ChipGroupProps } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport {\n  keyHandler,\n  getNextIndex,\n  getOUIAProps,\n  OUIAProps,\n  getDefaultOUIAId,\n  PickOptional,\n  GenerateId\n} from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { ToggleMenuBaseProps, Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util';\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\n\nexport interface SelectViewMoreObject {\n  /** View more text */\n  text: string;\n  /** Callback for when the view more button is clicked */\n  onClick: (event: React.MouseEvent | React.ChangeEvent) => void;\n}\nexport interface SelectProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    Omit<React.HTMLProps<HTMLDivElement>, 'onSelect' | 'ref' | 'checked' | 'selected'>,\n    OUIAProps {\n  /** Content rendered inside the Select. Must be React.ReactElement<SelectGroupProps>[] */\n  children?: React.ReactElement[];\n  /** Classes applied to the root of the Select */\n  className?: string;\n  /** Indicates where menu will be aligned horizontally */\n  position?: SelectPosition | 'right' | 'left';\n  /** Flag specifying which direction the Select menu expands */\n  direction?: 'up' | 'down';\n  /** Flag to indicate if select is open */\n  isOpen?: boolean;\n  /** Flag to indicate if select options are grouped */\n  isGrouped?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if select is disabled */\n  isDisabled?: boolean;\n  /** Flag to indicate if the typeahead select allows new items */\n  isCreatable?: boolean;\n  /** Flag to indicate if create option should be at top of typeahead */\n  isCreateOptionOnTop?: boolean;\n  /** Flag indicating if placeholder styles should be applied */\n  hasPlaceholderStyle?: boolean;\n  /** Flag indicating if the creatable option should set its value as a SelectOptionObject */\n  isCreateSelectOptionObject?: boolean;\n  /** Value to indicate if the select is modified to show that validation state.\n   * If set to success, select will be modified to indicate valid state.\n   * If set to error, select will be modified to indicate error state.\n   * If set to warning, select will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Loading variant to display either the spinner or the view more text button */\n  loadingVariant?: 'spinner' | SelectViewMoreObject;\n  /** Text displayed in typeahead select to prompt the user to create an item */\n  createText?: string;\n  /** Title text of Select */\n  placeholderText?: string | React.ReactNode;\n  /** Text to display in typeahead select when no results are found */\n  noResultsFoundText?: string;\n  /** Array of selected items for multi select variants. */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Flag indicating if selection badge should be hidden for checkbox variant,default false */\n  isCheckboxSelectionBadgeHidden?: boolean;\n  /** Id for select toggle element */\n  toggleId?: string;\n  /** Ref for the select toggle element */\n  toggleRef?: React.Ref<HTMLButtonElement> | React.Ref<HTMLDivElement>;\n  /** Adds accessible text to Select */\n  'aria-label'?: string;\n  /** Id of label for the Select aria-labelledby */\n  'aria-labelledby'?: string;\n  /** Id of div for the select aria-labelledby */\n  'aria-describedby'?: string;\n  /** Flag indicating if the select is an invalid state */\n  'aria-invalid'?: boolean;\n  /** Label for input field of type ahead select variants */\n  typeAheadAriaLabel?: string;\n  /** Id of div for input field of type ahead select variants */\n  typeAheadAriaDescribedby?: string;\n  /** Label for clear selection button of type ahead select variants */\n  clearSelectionsAriaLabel?: string;\n  /** Label for toggle of type ahead select variants */\n  toggleAriaLabel?: string;\n  /** Label for remove chip button of multiple type ahead select variant */\n  removeSelectionAriaLabel?: string;\n  /** ID list of favorited select items */\n  favorites?: string[];\n  /** Label for the favorites group */\n  favoritesLabel?: string;\n  /** Enables favorites. Callback called when a select options's favorite button is clicked */\n  onFavorite?: (itemId: string, isFavorite: boolean) => void;\n  /** Callback for selection behavior */\n  onSelect?: (\n    event: React.MouseEvent | React.ChangeEvent,\n    value: string | SelectOptionObject,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Callback for toggle button behavior */\n  onToggle: (isExpanded: boolean, event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => void;\n  /** Callback for toggle blur */\n  onBlur?: (event?: any) => void;\n  /** Callback for typeahead clear button */\n  onClear?: (event: React.MouseEvent) => void;\n  /** Optional callback for custom filtering */\n  onFilter?: (e: React.ChangeEvent<HTMLInputElement> | null, value: string) => React.ReactElement[] | undefined;\n  /** Optional callback for newly created options */\n  onCreateOption?: (newOptionValue: string) => void;\n  /** Optional event handler called each time the value in the typeahead input changes. */\n  onTypeaheadInputChanged?: (value: string) => void;\n  /** Variant of rendered Select */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n  /** Width of the select container as a number of px or string percentage */\n  width?: string | number;\n  /** Max height of the select container as a number of px or string percentage */\n  maxHeight?: string | number;\n  /** Icon element to render inside the select toggle */\n  toggleIcon?: React.ReactElement;\n  /** Custom icon for the dropdown replacing the CaretDownIcon */\n  toggleIndicator?: React.ReactElement;\n  /** Custom content to render in the select menu.  If this prop is defined, the variant prop will be ignored and the select will render with a single select toggle */\n  customContent?: React.ReactNode;\n  /** Flag indicating if select should have an inline text input for filtering */\n  hasInlineFilter?: boolean;\n  /** Placeholder text for inline filter */\n  inlineFilterPlaceholderText?: string;\n  /** Custom text for select badge */\n  customBadgeText?: string | number;\n  /** Prefix for the id of the input in the checkbox select variant*/\n  inputIdPrefix?: string;\n  /** Value for the typeahead and inline filtering input autocomplete attribute. When targeting Chrome this property should be a random string. */\n  inputAutoComplete?: string;\n  /** Optional props to pass to the chip group in the typeaheadmulti variant */\n  chipGroupProps?: Omit<ChipGroupProps, 'children' | 'ref'>;\n  /** Optional props to render custom chip group in the typeaheadmulti variant */\n  chipGroupComponent?: React.ReactNode;\n  /** Flag for retaining keyboard-entered value in typeahead text field when focus leaves input away */\n  isInputValuePersisted?: boolean;\n  /** Flag for retaining filter results on blur from keyboard-entered typeahead text */\n  isInputFilterPersisted?: boolean;\n  /** Flag indicating the typeahead input value should reset upon selection */\n  shouldResetOnSelect?: boolean;\n  /** Content rendered in the footer of the select menu */\n  footer?: React.ReactNode;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag for indicating that the select menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the select component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the select menu when menuAppendTo is not inline. */\n  zIndex?: number;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nexport interface SelectState {\n  focusFirstOption: boolean;\n  typeaheadInputValue: string | null;\n  typeaheadFilteredChildren: React.ReactNode[];\n  favoritesGroup: React.ReactNode[];\n  typeaheadCurrIndex: number;\n  creatableValue: string;\n  tabbedIntoFavoritesMenu: boolean;\n  typeaheadStoredIndex: number;\n  ouiaStateId: string;\n  viewMoreNextIndex: number;\n}\n\nexport class Select extends React.Component<SelectProps & OUIAProps, SelectState> {\n  static displayName = 'Select';\n  private parentRef = React.createRef<HTMLDivElement>();\n  private menuComponentRef = React.createRef<HTMLElement>();\n  private filterRef = React.createRef<HTMLInputElement>();\n  private clearRef = React.createRef<HTMLButtonElement>();\n  private inputRef = React.createRef<HTMLInputElement>();\n  private refCollection: HTMLElement[][] = [[]];\n  private optionContainerRefCollection: HTMLElement[] = [];\n  private footerRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps: PickOptional<SelectProps> = {\n    children: [] as React.ReactElement[],\n    className: '',\n    position: SelectPosition.left,\n    direction: SelectDirection.down,\n    toggleId: null as string,\n    isOpen: false,\n    isGrouped: false,\n    isPlain: false,\n    isDisabled: false,\n    hasPlaceholderStyle: false,\n    isCreatable: false,\n    isCreateOptionOnTop: false,\n    validated: 'default',\n    'aria-label': '',\n    'aria-labelledby': '',\n    'aria-describedby': '',\n    'aria-invalid': false,\n    typeAheadAriaLabel: '',\n    typeAheadAriaDescribedby: '',\n    clearSelectionsAriaLabel: 'Clear all',\n    toggleAriaLabel: 'Options menu',\n    removeSelectionAriaLabel: 'Remove',\n    selections: [],\n    createText: 'Create',\n    placeholderText: '',\n    noResultsFoundText: 'No results found',\n    variant: SelectVariant.single,\n    width: '',\n    onClear: () => undefined as void,\n    onCreateOption: () => undefined as void,\n    toggleIcon: null as React.ReactElement,\n    toggleIndicator: null as React.ReactElement,\n    onFilter: null,\n    onTypeaheadInputChanged: null,\n    customContent: null,\n    hasInlineFilter: false,\n    inlineFilterPlaceholderText: null,\n    customBadgeText: null,\n    inputIdPrefix: '',\n    inputAutoComplete: 'off',\n    menuAppendTo: 'inline',\n    favorites: [] as string[],\n    favoritesLabel: 'Favorites',\n    ouiaSafe: true,\n    chipGroupComponent: null,\n    isInputValuePersisted: false,\n    isInputFilterPersisted: false,\n    isCreateSelectOptionObject: false,\n    shouldResetOnSelect: true,\n    isFlipEnabled: true,\n    removeFindDomNode: false,\n    zIndex: 9999\n  };\n\n  state: SelectState = {\n    focusFirstOption: false,\n    typeaheadInputValue: null,\n    typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n    favoritesGroup: [] as React.ReactNode[],\n    typeaheadCurrIndex: -1,\n    typeaheadStoredIndex: -1,\n    creatableValue: '',\n    tabbedIntoFavoritesMenu: false,\n    ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n    viewMoreNextIndex: -1\n  };\n\n  getTypeaheadActiveChild = (typeaheadCurrIndex: number) =>\n    this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n\n  componentDidUpdate = (prevProps: SelectProps, prevState: SelectState) => {\n    if (this.props.hasInlineFilter) {\n      this.refCollection[0][0] = this.filterRef.current;\n    }\n\n    // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n    if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n      const firstRef = this.refCollection.find(\n        ref =>\n          // If a select option is disabled then ref[0] will be undefined, so we want to return\n          // the first ref that both a) is not null and b) is not disabled.\n          ref !== null && ref[0]\n      );\n\n      if (firstRef && firstRef[0]) {\n        firstRef[0].focus();\n      }\n    } else if (\n      // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n      this.state.viewMoreNextIndex !== -1 &&\n      this.refCollection.length > this.state.viewMoreNextIndex &&\n      this.props.loadingVariant !== 'spinner' &&\n      this.refCollection[this.state.viewMoreNextIndex][0] &&\n      this.props.variant !== 'typeahead' && // do not hard focus newly added items for typeahead variants\n      this.props.variant !== 'typeaheadmulti'\n    ) {\n      this.refCollection[this.state.viewMoreNextIndex][0].focus();\n      this.setState({ viewMoreNextIndex: -1 });\n    }\n\n    const checkUpdatedChildren = (prevChildren: React.ReactElement[], currChildren: React.ReactElement[]) =>\n      Array.from(prevChildren).some((prevChild: React.ReactElement, index: number) => {\n        const prevChildProps = prevChild.props;\n        const currChild = currChildren[index];\n        const { props: currChildProps } = currChild;\n\n        if (prevChildProps && currChildProps) {\n          return (\n            prevChildProps.value !== currChildProps.value ||\n            prevChildProps.label !== currChildProps.label ||\n            prevChildProps.isDisabled !== currChildProps.isDisabled ||\n            prevChildProps.isPlaceholder !== currChildProps.isPlaceholder\n          );\n        } else {\n          return prevChild !== currChild;\n        }\n      });\n\n    const hasUpdatedChildren =\n      prevProps.children.length !== this.props.children.length ||\n      checkUpdatedChildren(prevProps.children, this.props.children) ||\n      (this.props.isGrouped &&\n        Array.from(prevProps.children).some(\n          (prevChild: React.ReactElement, index: number) =>\n            prevChild.type === SelectGroup &&\n            prevChild.props.children &&\n            this.props.children[index].props.children &&\n            (prevChild.props.children.length !== this.props.children[index].props.children.length ||\n              checkUpdatedChildren(prevChild.props.children, this.props.children[index].props.children))\n        ));\n\n    if (hasUpdatedChildren) {\n      this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n    }\n\n    // for menus with favorites,\n    // if the number of favorites or typeahead filtered children has changed, the generated\n    // list of favorites needs to be updated\n    if (\n      this.props.onFavorite &&\n      (this.props.favorites.length !== prevProps.favorites.length ||\n        this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)\n    ) {\n      const tempRenderableChildren =\n        this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti'\n          ? this.state.typeaheadFilteredChildren\n          : this.props.children;\n      const renderableFavorites = createRenderableFavorites(\n        tempRenderableChildren,\n        this.props.isGrouped,\n        this.props.favorites\n      );\n      const favoritesGroup = renderableFavorites.length\n        ? [\n            <SelectGroup key=\"favorites\" label={this.props.favoritesLabel}>\n              {renderableFavorites}\n            </SelectGroup>,\n            <Divider key=\"favorites-group-divider\" />\n          ]\n        : [];\n      this.setState({ favoritesGroup });\n    }\n  };\n\n  onEnter = () => {\n    this.setState({ focusFirstOption: true });\n  };\n\n  onToggle = (isExpanded: boolean, e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => {\n    const { isInputValuePersisted, onSelect, onToggle, hasInlineFilter } = this.props;\n    if (!isExpanded && isInputValuePersisted && onSelect) {\n      onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n    }\n    if (isExpanded && hasInlineFilter) {\n      this.setState({\n        focusFirstOption: true\n      });\n    }\n    onToggle(isExpanded, e);\n  };\n\n  onClose = () => {\n    const { isInputFilterPersisted } = this.props;\n\n    this.setState({\n      focusFirstOption: false,\n      typeaheadInputValue: null,\n      ...(!isInputFilterPersisted && {\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      }),\n      typeaheadCurrIndex: -1,\n      tabbedIntoFavoritesMenu: false,\n      viewMoreNextIndex: -1\n    });\n  };\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.toString() !== '' && !this.props.isOpen) {\n      this.onToggle(true, e);\n    }\n\n    if (this.props.onTypeaheadInputChanged) {\n      this.props.onTypeaheadInputChanged(e.target.value.toString());\n    }\n\n    this.setState({\n      typeaheadCurrIndex: -1,\n      typeaheadInputValue: e.target.value,\n      creatableValue: e.target.value\n    });\n    this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n    this.refCollection = [[]];\n  };\n\n  updateTypeAheadFilteredChildren = (typeaheadInputValue: string, e: React.ChangeEvent<HTMLInputElement> | null) => {\n    let typeaheadFilteredChildren: any;\n\n    const {\n      onFilter,\n      isCreatable,\n      isCreateOptionOnTop,\n      onCreateOption,\n      createText,\n      noResultsFoundText,\n      children,\n      isGrouped,\n      isCreateSelectOptionObject,\n      loadingVariant\n    } = this.props;\n\n    if (onFilter) {\n      /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n       * In this case the e is null but we can get the typeaheadInputValue from the state.\n       */\n      typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n    } else {\n      let input: RegExp;\n      try {\n        input = new RegExp(typeaheadInputValue.toString(), 'i');\n      } catch (err) {\n        input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n      }\n      const childrenArray = React.Children.toArray(children) as React.ReactElement<SelectGroupProps>[];\n      if (isGrouped) {\n        const childFilter = (child: React.ReactElement<SelectGroupProps>) =>\n          child.props.value &&\n          child.props.value.toString &&\n          this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n        typeaheadFilteredChildren =\n          typeaheadInputValue.toString() !== ''\n            ? React.Children.map(children, group => {\n                if (\n                  React.isValidElement<React.ComponentProps<typeof SelectGroup>>(group) &&\n                  group.type === SelectGroup\n                ) {\n                  const filteredGroupChildren = (React.Children.toArray(group.props.children) as React.ReactElement<\n                    SelectGroupProps\n                  >[]).filter(childFilter);\n                  if (filteredGroupChildren.length > 0) {\n                    return React.cloneElement(group, {\n                      titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                      children: filteredGroupChildren as any\n                    });\n                  }\n                } else {\n                  return (React.Children.toArray(group) as React.ReactElement<SelectGroupProps>[]).filter(childFilter);\n                }\n              })\n            : childrenArray;\n      } else {\n        typeaheadFilteredChildren =\n          typeaheadInputValue.toString() !== ''\n            ? childrenArray.filter(child => {\n                const valueToCheck = child.props.value;\n                // Dividers don't have value and should not be filtered\n                if (!valueToCheck) {\n                  return true;\n                }\n\n                const isSelectOptionObject =\n                  typeof valueToCheck !== 'string' &&\n                  (valueToCheck as SelectOptionObject).toString &&\n                  (valueToCheck as SelectOptionObject).compareTo;\n\n                // View more option should be returned as not a match\n                if (loadingVariant !== 'spinner' && loadingVariant?.text === valueToCheck) {\n                  return true;\n                }\n\n                // spinner should be returned as not a match\n                if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n                  return true;\n                }\n\n                if (isSelectOptionObject) {\n                  return (valueToCheck as SelectOptionObject).compareTo(typeaheadInputValue);\n                } else {\n                  return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                }\n              })\n            : childrenArray;\n      }\n    }\n    if (!typeaheadFilteredChildren) {\n      typeaheadFilteredChildren = [];\n    }\n    if (typeaheadFilteredChildren.length === 0) {\n      !isCreatable &&\n        typeaheadFilteredChildren.push(\n          <SelectOption isDisabled key=\"no-results\" value={noResultsFoundText} isNoResultsOption />\n        );\n    }\n    if (isCreatable && typeaheadInputValue !== '') {\n      const newValue = typeaheadInputValue;\n      if (\n        !typeaheadFilteredChildren.find(\n          (i: React.ReactElement) =>\n            i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase()\n        )\n      ) {\n        const newOptionValue = isCreateSelectOptionObject\n          ? ({\n              toString: () => newValue,\n              compareTo: value =>\n                this.toString()\n                  .toLowerCase()\n                  .includes(value.toString().toLowerCase())\n            } as SelectOptionObject)\n          : newValue;\n\n        const createSelectOption = (\n          <SelectOption\n            key={`create ${newValue}`}\n            value={newOptionValue}\n            onClick={() => onCreateOption && onCreateOption(newValue)}\n          >\n            {createText} \"{newValue}\"\n          </SelectOption>\n        );\n\n        if (isCreateOptionOnTop) {\n          typeaheadFilteredChildren.unshift(createSelectOption);\n        } else {\n          typeaheadFilteredChildren.push(createSelectOption);\n        }\n      }\n    }\n\n    this.setState({\n      typeaheadFilteredChildren\n    });\n  };\n\n  onClick = (e: React.MouseEvent) => {\n    if (!this.props.isOpen) {\n      this.onToggle(true, e);\n    }\n  };\n\n  clearSelection = (_e: React.MouseEvent) => {\n    this.setState({\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      typeaheadCurrIndex: -1\n    });\n  };\n\n  extendTypeaheadChildren(typeaheadCurrIndex: number, favoritesGroup?: React.ReactNode[]) {\n    const { isGrouped, onFavorite, createText } = this.props;\n    const typeaheadChildren = favoritesGroup\n      ? favoritesGroup.concat(this.state.typeaheadFilteredChildren)\n      : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild as HTMLElement;\n    }\n\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren as React.ReactElement[], (group: React.ReactElement) => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, (child: React.ReactElement) =>\n              child.type === Divider\n                ? child\n                : React.cloneElement(child as React.ReactElement, {\n                    isFocused:\n                      activeElement &&\n                      (activeElement.id === (child as React.ReactElement).props.id ||\n                        (this.props.isCreatable &&\n                          typeaheadActiveChild.textContent ===\n                            `${createText} \"${(group as React.ReactElement).props.value}\"`))\n                  })\n            )\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, (child: React.ReactElement) =>\n              child.type === Divider\n                ? child\n                : React.cloneElement(child as React.ReactElement, {\n                    isFocused:\n                      typeaheadActiveChild &&\n                      (typeaheadActiveChild.textContent === (child as React.ReactElement).props.value.toString() ||\n                        (this.props.isCreatable &&\n                          typeaheadActiveChild.textContent ===\n                            `${createText} \"${(child as React.ReactElement).props.value}\"`))\n                  })\n            )\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group as React.ReactElement, {\n            isFocused:\n              typeaheadActiveChild &&\n              (typeaheadActiveChild.textContent === group.props.value.toString() ||\n                (this.props.isCreatable && typeaheadActiveChild.textContent === `${createText} \"${group.props.value}\"`))\n          });\n        }\n      });\n    }\n    return typeaheadChildren.map((child: React.ReactNode, index) => {\n      const childElement = child as any;\n      return childElement.type.displayName === 'Divider'\n        ? child\n        : React.cloneElement(child as React.ReactElement, {\n            isFocused: typeaheadActiveChild\n              ? typeaheadActiveChild.textContent === (child as React.ReactElement).props.value.toString() ||\n                (this.props.isCreatable &&\n                  typeaheadActiveChild.textContent === `${createText} \"${(child as React.ReactElement).props.value}\"`)\n              : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n          });\n    });\n  }\n\n  sendRef = (\n    optionRef: React.ReactNode,\n    favoriteRef: React.ReactNode,\n    optionContainerRef: React.ReactNode,\n    index: number\n  ) => {\n    this.refCollection[index] = [(optionRef as unknown) as HTMLElement, (favoriteRef as unknown) as HTMLElement];\n    this.optionContainerRefCollection[index] = (optionContainerRef as unknown) as HTMLElement;\n  };\n\n  handleMenuKeys = (index: number, innerIndex: number, position: string) => {\n    keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n    if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n      if (position !== 'tab') {\n        this.handleTypeaheadKeys(position);\n      }\n    }\n  };\n\n  moveFocus = (nextIndex: number, updateCurrentIndex: boolean = true) => {\n    const { isCreatable, createText } = this.props;\n\n    const hasDescriptionElm = Boolean(\n      this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description')\n    );\n    const isLoad = Boolean(\n      this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-load')\n    );\n    const optionTextElm = hasDescriptionElm\n      ? (this.refCollection[nextIndex][0].firstElementChild as HTMLElement)\n      : this.refCollection[nextIndex][0];\n\n    let typeaheadInputValue = '';\n    if (isCreatable && optionTextElm.textContent.includes(createText)) {\n      typeaheadInputValue = this.state.creatableValue;\n    } else if (optionTextElm && !isLoad) {\n      // !isLoad prevents the view more button text from appearing the typeahead input\n      typeaheadInputValue = optionTextElm.textContent;\n    }\n    this.setState(prevState => ({\n      typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n      typeaheadStoredIndex: nextIndex,\n      typeaheadInputValue\n    }));\n  };\n\n  switchFocusToFavoriteMenu = () => {\n    const { typeaheadCurrIndex, typeaheadStoredIndex } = this.state;\n    let indexForFocus = 0;\n\n    if (typeaheadCurrIndex !== -1) {\n      indexForFocus = typeaheadCurrIndex;\n    } else if (typeaheadStoredIndex !== -1) {\n      indexForFocus = typeaheadStoredIndex;\n    }\n\n    if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n      this.refCollection[indexForFocus][0].focus();\n    } else {\n      this.clearRef.current.focus();\n    }\n\n    this.setState({\n      tabbedIntoFavoritesMenu: true,\n      typeaheadCurrIndex: -1\n    });\n  };\n\n  moveFocusToLastMenuItem = () => {\n    const refCollectionLen = this.refCollection.length;\n    if (\n      refCollectionLen > 0 &&\n      this.refCollection[refCollectionLen - 1] !== null &&\n      this.refCollection[refCollectionLen - 1][0] !== null\n    ) {\n      this.refCollection[refCollectionLen - 1][0].focus();\n    }\n  };\n\n  handleTypeaheadKeys = (position: string, shiftKey: boolean = false) => {\n    const { isOpen, onFavorite, isCreatable } = this.props;\n    const { typeaheadCurrIndex, tabbedIntoFavoritesMenu } = this.state;\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (isOpen) {\n      if (position === 'enter') {\n        if (\n          (typeaheadCurrIndex !== -1 || (isCreatable && this.refCollection.length === 1)) && // do not allow selection without moving to an initial option unless it is a single create option\n          (typeaheadActiveChild || (this.refCollection[0] && this.refCollection[0][0]))\n        ) {\n          if (typeaheadActiveChild) {\n            if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n              const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n              const typeaheadActiveChildText = hasDescriptionElm\n                ? (typeaheadActiveChild.firstChild as HTMLElement).textContent\n                : typeaheadActiveChild.textContent;\n              this.setState({\n                typeaheadInputValue: typeaheadActiveChildText\n              });\n            }\n          } else if (this.refCollection[0] && this.refCollection[0][0]) {\n            this.setState({\n              typeaheadInputValue: this.refCollection[0][0].textContent\n            });\n          }\n          if (typeaheadActiveChild) {\n            typeaheadActiveChild.click();\n          } else {\n            this.refCollection[0][0].click();\n          }\n        }\n      } else if (position === 'tab') {\n        if (onFavorite) {\n          // if the input has focus, tab to the first item or the last item that was previously focused.\n          if (this.inputRef.current === document.activeElement) {\n            // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n            if (this.props.footer && shiftKey) {\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                if (tabbableItems[tabbableItems.length - 1]) {\n                  tabbableItems[tabbableItems.length - 1].focus();\n                }\n              }\n            } else {\n              this.switchFocusToFavoriteMenu();\n            }\n          } else {\n            // focus is on menu or footer\n            if (this.props.footer) {\n              let tabbedIntoMenu = false;\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                // if current element is not in footer, tab to first tabbable element in footer,\n                // if shift was clicked, tab to input since focus is on menu\n                const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n                if (currentElementIndex === -1) {\n                  if (shiftKey) {\n                    // currently in menu, shift back to input\n                    this.inputRef.current.focus();\n                  } else {\n                    // currently in menu, tab to first tabbable item in footer\n                    tabbableItems[0].focus();\n                  }\n                } else {\n                  // already in footer\n                  if (shiftKey) {\n                    // shift to previous item\n                    if (currentElementIndex === 0) {\n                      // on first footer item, shift back to menu\n                      this.switchFocusToFavoriteMenu();\n                      tabbedIntoMenu = true;\n                    } else {\n                      // shift to previous footer item\n                      tabbableItems[currentElementIndex - 1].focus();\n                    }\n                  } else {\n                    // tab to next tabbable item in footer or to input.\n                    if (tabbableItems[currentElementIndex + 1]) {\n                      tabbableItems[currentElementIndex + 1].focus();\n                    } else {\n                      this.inputRef.current.focus();\n                    }\n                  }\n                }\n              } else {\n                // no tabbable items in footer, tab to input\n                this.inputRef.current.focus();\n                tabbedIntoMenu = false;\n              }\n              this.setState({ tabbedIntoFavoritesMenu: tabbedIntoMenu });\n            } else {\n              this.inputRef.current.focus();\n              this.setState({ tabbedIntoFavoritesMenu: false });\n            }\n          }\n        } else {\n          // Close if there is no footer\n          if (!this.props.footer) {\n            this.onToggle(false, null);\n            this.onClose();\n          } else {\n            // has footer\n            const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n            const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n            if (this.inputRef.current === document.activeElement) {\n              if (shiftKey) {\n                // close toggle if shift key and tab on input\n                this.onToggle(false, null);\n                this.onClose();\n              } else {\n                // tab to first tabbable item in footer\n                if (tabbableItems[0]) {\n                  tabbableItems[0].focus();\n                } else {\n                  this.onToggle(false, null);\n                  this.onClose();\n                }\n              }\n            } else {\n              // focus is in footer\n              if (shiftKey) {\n                if (currentElementIndex === 0) {\n                  // shift tab back to input\n                  this.inputRef.current.focus();\n                } else {\n                  // shift to previous footer item\n                  tabbableItems[currentElementIndex - 1].focus();\n                }\n              } else {\n                // tab to next footer item or close tab if last item\n                if (tabbableItems[currentElementIndex + 1]) {\n                  tabbableItems[currentElementIndex + 1].focus();\n                } else {\n                  // no next item, close toggle\n                  this.onToggle(false, null);\n                  this.inputRef.current.focus();\n                  this.onClose();\n                }\n              }\n            }\n          }\n        }\n      } else if (!tabbedIntoFavoritesMenu) {\n        if (this.refCollection[0][0] === null) {\n          return;\n        }\n        let nextIndex;\n        if (typeaheadCurrIndex === -1 && position === 'down') {\n          nextIndex = 0;\n        } else if (typeaheadCurrIndex === -1 && position === 'up') {\n          nextIndex = this.refCollection.length - 1;\n        } else if (position !== 'left' && position !== 'right') {\n          nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n        } else {\n          nextIndex = typeaheadCurrIndex;\n        }\n        if (this.refCollection[nextIndex] === null) {\n          return;\n        }\n        this.moveFocus(nextIndex);\n      } else {\n        const nextIndex = this.refCollection.findIndex(\n          ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement)\n        );\n        this.moveFocus(nextIndex);\n      }\n    }\n  };\n\n  onClickTypeaheadToggleButton = () => {\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  getDisplay = (value: string | SelectOptionObject, type: 'node' | 'text' = 'node') => {\n    if (!value) {\n      return;\n    }\n    const item = this.props.isGrouped\n      ? (React.Children.toArray(this.props.children) as React.ReactElement[])\n          .reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], [])\n          .find(child => child.props.value.toString() === value.toString())\n      : React.Children.toArray(this.props.children).find(\n          child =>\n            (child as React.ReactElement).props.value &&\n            (child as React.ReactElement).props.value.toString() === value.toString()\n        );\n    if (item) {\n      if (item && item.props.children) {\n        if (type === 'node') {\n          return item.props.children;\n        }\n        return this.findText(item);\n      }\n      return item.props.value.toString();\n    }\n    return value.toString();\n  };\n\n  findText = (item: React.ReactNode) => {\n    if (typeof item === 'string') {\n      return item;\n    } else if (!React.isValidElement(item)) {\n      return '';\n    } else {\n      const multi: string[] = [];\n      React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n      return multi.join('');\n    }\n  };\n\n  generateSelectedBadge = () => {\n    const { customBadgeText, selections } = this.props;\n    if (customBadgeText !== null) {\n      return customBadgeText;\n    }\n    if (Array.isArray(selections) && selections.length > 0) {\n      return selections.length;\n    }\n    return null;\n  };\n\n  setVieMoreNextIndex = () => {\n    this.setState({ viewMoreNextIndex: this.refCollection.length - 1 });\n  };\n\n  isLastOptionBeforeFooter = (index: any) =>\n    this.props.footer && index === this.refCollection.length - 1 ? true : false;\n\n  render() {\n    const {\n      children,\n      chipGroupProps,\n      chipGroupComponent,\n      className,\n      customContent,\n      variant,\n      direction,\n      onSelect,\n      onClear,\n      onBlur,\n      toggleId,\n      toggleRef,\n      isOpen,\n      isGrouped,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      validated,\n      selections: selectionsProp,\n      typeAheadAriaLabel,\n      typeAheadAriaDescribedby,\n      clearSelectionsAriaLabel,\n      toggleAriaLabel,\n      removeSelectionAriaLabel,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedby,\n      'aria-invalid': ariaInvalid,\n      placeholderText,\n      width,\n      maxHeight,\n      toggleIcon,\n      toggleIndicator,\n      ouiaId,\n      ouiaSafe,\n      hasInlineFilter,\n      isCheckboxSelectionBadgeHidden,\n      inlineFilterPlaceholderText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onFilter,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onTypeaheadInputChanged,\n      onCreateOption,\n      isCreatable,\n      onToggle,\n      createText,\n      noResultsFoundText,\n      customBadgeText,\n      inputIdPrefix,\n      inputAutoComplete,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isInputValuePersisted,\n      isInputFilterPersisted,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      menuAppendTo,\n      favorites,\n      onFavorite,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      favoritesLabel,\n      footer,\n      loadingVariant,\n      isCreateSelectOptionObject,\n      isCreateOptionOnTop,\n      shouldResetOnSelect,\n      isFlipEnabled,\n      removeFindDomNode,\n      zIndex,\n      ...props\n    } = this.props;\n    const {\n      focusFirstOption: openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n    // Find out if the selected option is a placeholder\n    const selectedOption = React.Children.toArray(children).find(\n      (option: any) => option.props.value === selections[0]\n    ) as any;\n    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null as string;\n\n    // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n    let renderableItems: React.ReactNode[] = [];\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren: (React.ReactElement | React.ReactNode | {})[] = children;\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      }\n      // mark items that are favorited with isFavorite\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(\n          (child: React.ReactNode) => (child as React.ReactElement).props.isPlaceholder === true\n        );\n        childPlaceholderText =\n          (childPlaceholder[0] && this.getDisplay((childPlaceholder[0] as React.ReactElement).props.value, 'node')) ||\n          (children[0] && this.getDisplay(children[0].props.value, 'node'));\n      }\n    }\n\n    if (isOpen) {\n      if (renderableItems.find(item => (item as any)?.key === 'loading') === undefined) {\n        if (loadingVariant === 'spinner') {\n          renderableItems.push(\n            <SelectOption isLoading key=\"loading\" value=\"loading\">\n              <Spinner size=\"lg\" />\n            </SelectOption>\n          );\n        } else if (loadingVariant?.text) {\n          renderableItems.push(\n            <SelectOption\n              isLoad\n              key=\"loading\"\n              value={loadingVariant.text}\n              setViewMoreNextIndex={this.setVieMoreNextIndex}\n              onClick={loadingVariant?.onClick}\n            />\n          );\n        }\n      }\n    }\n\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = (\n      <button\n        className={css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear)}\n        onClick={e => {\n          this.clearSelection(e);\n          onClear(e);\n          e.stopPropagation();\n        }}\n        aria-label={clearSelectionsAriaLabel}\n        type=\"button\"\n        disabled={isDisabled}\n        ref={this.clearRef}\n        onKeyDown={event => {\n          if (event.key === KeyTypes.Enter) {\n            this.clearRef.current.click();\n          }\n        }}\n      >\n        <TimesCircleIcon aria-hidden />\n      </button>\n    );\n\n    let selectedChips = null as any;\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? (\n        chipGroupComponent\n      ) : (\n        <ChipGroup {...chipGroupProps}>\n          {selections &&\n            (selections as string[]).map(item => (\n              <Chip\n                key={item}\n                onClick={(e: React.MouseEvent) => onSelect(e, item)}\n                closeBtnAriaLabel={removeSelectionAriaLabel}\n              >\n                {this.getDisplay(item, 'node')}\n              </Chip>\n            ))}\n        </ChipGroup>\n      );\n    }\n\n    if (hasInlineFilter) {\n      const filterBox = (\n        <React.Fragment>\n          <div key=\"inline-filter\" className={css(styles.selectMenuSearch)}>\n            <input\n              key=\"inline-filter-input\"\n              type=\"search\"\n              className={css(formStyles.formControl, formStyles.modifiers.search)}\n              onChange={this.onChange}\n              placeholder={inlineFilterPlaceholderText}\n              onKeyDown={event => {\n                if (event.key === KeyTypes.ArrowUp) {\n                  this.handleMenuKeys(0, 0, 'up');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowDown) {\n                  this.handleMenuKeys(0, 0, 'down');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowLeft) {\n                  this.handleMenuKeys(0, 0, 'left');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowRight) {\n                  this.handleMenuKeys(0, 0, 'right');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n                  // tab to footer or close menu if shift key\n                  if (event.shiftKey) {\n                    this.onToggle(false, event);\n                  } else {\n                    const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                    if (tabbableItems.length > 0) {\n                      tabbableItems[0].focus();\n                      event.stopPropagation();\n                      event.preventDefault();\n                    } else {\n                      this.onToggle(false, event);\n                    }\n                  }\n                } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n                  // More modal-like experience for checkboxes\n                  // Let SelectOption handle this\n                  if (event.shiftKey) {\n                    this.handleMenuKeys(0, 0, 'up');\n                  } else {\n                    this.handleMenuKeys(0, 0, 'down');\n                  }\n                  event.stopPropagation();\n                  event.preventDefault();\n                }\n              }}\n              ref={this.filterRef}\n              autoComplete={inputAutoComplete}\n            />\n          </div>\n          <Divider key=\"inline-filter-divider\" />\n        </React.Fragment>\n      );\n      renderableItems = [filterBox, ...(typeaheadFilteredChildren as React.ReactElement[])].map((option, index) =>\n        React.cloneElement(option, { key: index })\n      );\n    }\n\n    let variantProps: any;\n    let variantChildren: any;\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(<SelectOption isDisabled key={0} value={noResultsFoundText} isNoResultsOption />);\n          }\n          break;\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(<SelectOption isDisabled key={0} value={noResultsFoundText} isNoResultsOption />);\n          }\n          break;\n      }\n    }\n\n    const isStatic = isFlipEnabled && menuAppendTo !== 'inline';\n    const innerMenu = (\n      <SelectMenu\n        className={css(isStatic && styles.modifiers.static)}\n        {...props}\n        isGrouped={isGrouped}\n        selected={selections}\n        {...variantProps}\n        openedOnEnter={openedOnEnter}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        sendRef={this.sendRef}\n        keyHandler={this.handleMenuKeys}\n        maxHeight={maxHeight}\n        ref={this.menuComponentRef}\n        footer={footer}\n        footerRef={this.footerRef}\n        isLastOptionBeforeFooter={this.isLastOptionBeforeFooter}\n      >\n        {variantChildren}\n      </SelectMenu>\n    );\n\n    const menuContainer = footer ? <div className={css(styles.selectMenu)}> {innerMenu} </div> : innerMenu;\n\n    const popperContainer = (\n      <div\n        className={css(\n          styles.select,\n          isOpen && styles.modifiers.expanded,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          validated === ValidatedOptions.error && styles.modifiers.invalid,\n          direction === SelectDirection.up && styles.modifiers.top,\n          className\n        )}\n        {...(width && { style: { width } })}\n        {...(validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })}\n      >\n        {isOpen && menuContainer}\n      </div>\n    );\n\n    const mainContainer = (\n      <div\n        className={css(\n          styles.select,\n          isOpen && styles.modifiers.expanded,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          validated === ValidatedOptions.error && styles.modifiers.invalid,\n          direction === SelectDirection.up && styles.modifiers.top,\n          className\n        )}\n        ref={this.parentRef}\n        {...getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...(width && { style: { width } })}\n        {...(validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })}\n      >\n        <SelectToggle\n          id={selectToggleId}\n          parentRef={this.parentRef}\n          menuRef={this.menuComponentRef}\n          ref={toggleRef}\n          {...(footer && { footerRef: this.footerRef })}\n          isOpen={isOpen}\n          isPlain={isPlain}\n          hasPlaceholderStyle={\n            hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder)\n          }\n          onToggle={this.onToggle}\n          onEnter={this.onEnter}\n          onClose={this.onClose}\n          onBlur={onBlur}\n          variant={variant}\n          toggleIndicator={toggleIndicator}\n          aria-labelledby={`${ariaLabelledBy || ''} ${selectToggleId}`}\n          aria-label={toggleAriaLabel}\n          {...(ariaDescribedby && { 'aria-describedby': ariaDescribedby })}\n          handleTypeaheadKeys={this.handleTypeaheadKeys}\n          moveFocusToLastMenuItem={this.moveFocusToLastMenuItem}\n          isDisabled={isDisabled}\n          hasClearButton={hasOnClear}\n          hasFooter={footer !== undefined}\n          onClickTypeaheadToggleButton={this.onClickTypeaheadToggleButton}\n        >\n          {customContent && (\n            <div className={css(styles.selectToggleWrapper)}>\n              {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n              <span className={css(styles.selectToggleText)}>{placeholderText}</span>\n            </div>\n          )}\n          {variant === SelectVariant.single && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <span className={css(styles.selectToggleText)}>\n                  {this.getDisplay(selections[0] as string, 'node') || placeholderText || childPlaceholderText}\n                </span>\n              </div>\n              {hasOnClear && hasAnySelections && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.checkbox && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <span className={css(styles.selectToggleText)}>{placeholderText}</span>\n                {!isCheckboxSelectionBadgeHidden && hasAnySelections && (\n                  <div className={css(styles.selectToggleBadge)}>\n                    <span className={css(badgeStyles.badge, badgeStyles.modifiers.read)}>\n                      {this.generateSelectedBadge()}\n                    </span>\n                  </div>\n                )}\n              </div>\n              {hasOnClear && hasAnySelections && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.typeahead && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <input\n                  className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                  aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                  id={`${selectToggleId}-select-typeahead`}\n                  aria-label={typeAheadAriaLabel}\n                  {...(typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby })}\n                  placeholder={placeholderText as string}\n                  value={\n                    typeaheadInputValue !== null\n                      ? typeaheadInputValue\n                      : this.getDisplay(selections[0] as string, 'text') || ''\n                  }\n                  type=\"text\"\n                  onClick={this.onClick}\n                  onChange={this.onChange}\n                  autoComplete={inputAutoComplete}\n                  disabled={isDisabled}\n                  ref={this.inputRef}\n                />\n              </div>\n              {hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.typeaheadMulti && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                {selections && Array.isArray(selections) && selections.length > 0 && selectedChips}\n                <input\n                  className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                  aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                  id={`${selectToggleId}-select-multi-typeahead-typeahead`}\n                  aria-label={typeAheadAriaLabel}\n                  aria-invalid={validated === ValidatedOptions.error}\n                  {...(typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby })}\n                  placeholder={placeholderText as string}\n                  value={typeaheadInputValue !== null ? typeaheadInputValue : ''}\n                  type=\"text\"\n                  onChange={this.onChange}\n                  onClick={this.onClick}\n                  autoComplete={inputAutoComplete}\n                  disabled={isDisabled}\n                  ref={this.inputRef}\n                />\n              </div>\n              {hasOnClear && ((selections && selections.length > 0) || typeaheadInputValue) && clearBtn}\n            </React.Fragment>\n          )}\n          {validated === ValidatedOptions.success && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <CheckCircleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n          {validated === ValidatedOptions.error && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <ExclamationCircleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n          {validated === ValidatedOptions.warning && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <ExclamationTriangleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n        </SelectToggle>\n        {isOpen && menuAppendTo === 'inline' && menuContainer}\n      </div>\n    );\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n\n    return (\n      <GenerateId>\n        {randomId => (\n          <SelectContext.Provider\n            value={{\n              onSelect,\n              onFavorite,\n              onClose: this.onClose,\n              variant,\n              inputIdPrefix: inputIdPrefix || randomId,\n              shouldResetOnSelect\n            }}\n          >\n            {menuAppendTo === 'inline' ? (\n              mainContainer\n            ) : (\n              <Popper\n                trigger={mainContainer}\n                popper={popperContainer}\n                direction={direction}\n                appendTo={menuAppendTo === 'parent' ? getParentElement() : menuAppendTo}\n                isVisible={isOpen}\n                removeFindDomNode={removeFindDomNode}\n                zIndex={zIndex}\n              />\n            )}\n          </SelectContext.Provider>\n        )}\n      </GenerateId>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}