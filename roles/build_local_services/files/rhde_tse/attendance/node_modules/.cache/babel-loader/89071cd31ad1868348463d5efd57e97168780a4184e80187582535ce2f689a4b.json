{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\nexport const AccordionContent = _a => {\n  var {\n      className = '',\n      children = null,\n      id = '',\n      isHidden = false,\n      isFixed = false,\n      isCustomContent = false,\n      'aria-label': ariaLabel = '',\n      'aria-labelledby': ariaLabelledby,\n      component\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", \"id\", \"isHidden\", \"isFixed\", \"isCustomContent\", 'aria-label', 'aria-labelledby', \"component\"]);\n  const [hasScrollbar, setHasScrollbar] = React.useState(false);\n  const containerRef = React.useRef(null);\n  React.useEffect(() => {\n    if ((containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && isFixed && !isHidden) {\n      const {\n        offsetHeight,\n        scrollHeight\n      } = containerRef.current;\n      setHasScrollbar(offsetHeight < scrollHeight);\n    } else if (!isFixed) {\n      setHasScrollbar(false);\n    }\n  }, [containerRef, isFixed, isHidden]);\n  return React.createElement(AccordionContext.Consumer, null, _ref => {\n    let {\n      ContentContainer\n    } = _ref;\n    const Container = component || ContentContainer;\n    return React.createElement(Container, Object.assign({\n      ref: containerRef,\n      id: id,\n      className: css(styles.accordionExpandedContent, isFixed && styles.modifiers.fixed, !isHidden && styles.modifiers.expanded, className),\n      hidden: isHidden\n    }, ariaLabel && {\n      'aria-label': ariaLabel\n    }, ariaLabelledby && {\n      'aria-labelledby': ariaLabelledby\n    }, hasScrollbar && {\n      tabIndex: 0\n    }, hasScrollbar && Container === 'div' && {\n      role: 'region'\n    }, props), isCustomContent ? children : React.createElement(AccordionExpandedContentBody, null, children));\n  });\n};\nAccordionContent.displayName = 'AccordionContent';","map":{"version":3,"names":["React","css","styles","AccordionContext","AccordionExpandedContentBody","AccordionContent","_a","className","children","id","isHidden","isFixed","isCustomContent","ariaLabel","ariaLabelledby","component","props","__rest","hasScrollbar","setHasScrollbar","useState","containerRef","useRef","useEffect","current","offsetHeight","scrollHeight","createElement","Consumer","_ref","ContentContainer","Container","Object","assign","ref","accordionExpandedContent","modifiers","fixed","expanded","hidden","tabIndex","role","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Accordion\\AccordionContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\n\nexport interface AccordionContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Accordion  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion content  */\n  className?: string;\n  /** Identify the AccordionContent item  */\n  id?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isHidden?: boolean;\n  /** Flag to indicate Accordion content is fixed  */\n  isFixed?: boolean;\n  /** Adds accessible text to the Accordion content */\n  'aria-label'?: string;\n  /** Id of the controlling accordion toggle to label the content. */\n  'aria-labelledby'?: string;\n  /** Component to use as content container */\n  component?: React.ElementType;\n  /** Flag indicating content is custom. Expanded content Body wrapper will be removed from children.  This allows multiple bodies to be rendered as content. */\n  isCustomContent?: React.ReactNode;\n}\n\nexport const AccordionContent: React.FunctionComponent<AccordionContentProps> = ({\n  className = '',\n  children = null,\n  id = '',\n  isHidden = false,\n  isFixed = false,\n  isCustomContent = false,\n  'aria-label': ariaLabel = '',\n  'aria-labelledby': ariaLabelledby,\n  component,\n  ...props\n}: AccordionContentProps) => {\n  const [hasScrollbar, setHasScrollbar] = React.useState(false);\n  const containerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (containerRef?.current && isFixed && !isHidden) {\n      const { offsetHeight, scrollHeight } = containerRef.current;\n\n      setHasScrollbar(offsetHeight < scrollHeight);\n    } else if (!isFixed) {\n      setHasScrollbar(false);\n    }\n  }, [containerRef, isFixed, isHidden]);\n\n  return (\n    <AccordionContext.Consumer>\n      {({ ContentContainer }) => {\n        const Container = component || ContentContainer;\n        return (\n          <Container\n            ref={containerRef}\n            id={id}\n            className={css(\n              styles.accordionExpandedContent,\n              isFixed && styles.modifiers.fixed,\n              !isHidden && styles.modifiers.expanded,\n              className\n            )}\n            hidden={isHidden}\n            {...(ariaLabel && { 'aria-label': ariaLabel })}\n            {...(ariaLabelledby && { 'aria-labelledby': ariaLabelledby })}\n            {...(hasScrollbar && { tabIndex: 0 })}\n            {...(hasScrollbar && Container === 'div' && { role: 'region' })}\n            {...props}\n          >\n            {isCustomContent ? children : <AccordionExpandedContentBody>{children}</AccordionExpandedContentBody>}\n          </Container>\n        );\n      }}\n    </AccordionContext.Consumer>\n  );\n};\nAccordionContent.displayName = 'AccordionContent';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,6DAA6D;AAChF,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,4BAA4B,QAAQ,gCAAgC;AAuB7E,OAAO,MAAMC,gBAAgB,GAAoDC,EAWzD,IAAI;MAXqD;MAC/EC,SAAS,GAAG,EAAE;MACdC,QAAQ,GAAG,IAAI;MACfC,EAAE,GAAG,EAAE;MACPC,QAAQ,GAAG,KAAK;MAChBC,OAAO,GAAG,KAAK;MACfC,eAAe,GAAG,KAAK;MACvB,YAAY,EAAEC,SAAS,GAAG,EAAE;MAC5B,iBAAiB,EAAEC,cAAc;MACjCC;IAAS,IAAAT,EAEa;IADnBU,KAAK,GAAAC,MAAA,CAAAX,EAAA,EAVuE,uHAWhF,CADS;EAER,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGnB,KAAK,CAACoB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMC,YAAY,GAAGrB,KAAK,CAACsB,MAAM,CAAC,IAAI,CAAC;EAEvCtB,KAAK,CAACuB,SAAS,CAAC,MAAK;IACnB,IAAI,CAAAF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEG,OAAO,KAAIb,OAAO,IAAI,CAACD,QAAQ,EAAE;MACjD,MAAM;QAAEe,YAAY;QAAEC;MAAY,CAAE,GAAGL,YAAY,CAACG,OAAO;MAE3DL,eAAe,CAACM,YAAY,GAAGC,YAAY,CAAC;KAC7C,MAAM,IAAI,CAACf,OAAO,EAAE;MACnBQ,eAAe,CAAC,KAAK,CAAC;;EAE1B,CAAC,EAAE,CAACE,YAAY,EAAEV,OAAO,EAAED,QAAQ,CAAC,CAAC;EAErC,OACEV,KAAA,CAAA2B,aAAA,CAACxB,gBAAgB,CAACyB,QAAQ,QACvBC,IAAA,IAAyB;IAAA,IAAxB;MAAEC;IAAgB,CAAE,GAAAD,IAAA;IACpB,MAAME,SAAS,GAAGhB,SAAS,IAAIe,gBAAgB;IAC/C,OACE9B,KAAA,CAAA2B,aAAA,CAACI,SAAS,EAAAC,MAAA,CAAAC,MAAA;MACRC,GAAG,EAAEb,YAAY;MACjBZ,EAAE,EAAEA,EAAE;MACNF,SAAS,EAAEN,GAAG,CACZC,MAAM,CAACiC,wBAAwB,EAC/BxB,OAAO,IAAIT,MAAM,CAACkC,SAAS,CAACC,KAAK,EACjC,CAAC3B,QAAQ,IAAIR,MAAM,CAACkC,SAAS,CAACE,QAAQ,EACtC/B,SAAS,CACV;MACDgC,MAAM,EAAE7B;IAAQ,GACXG,SAAS,IAAI;MAAE,YAAY,EAAEA;IAAS,CAAE,EACxCC,cAAc,IAAI;MAAE,iBAAiB,EAAEA;IAAc,CAAE,EACvDI,YAAY,IAAI;MAAEsB,QAAQ,EAAE;IAAC,CAAE,EAC/BtB,YAAY,IAAIa,SAAS,KAAK,KAAK,IAAI;MAAEU,IAAI,EAAE;IAAQ,CAAE,EAC1DzB,KAAK,GAERJ,eAAe,GAAGJ,QAAQ,GAAGR,KAAA,CAAA2B,aAAA,CAACvB,4BAA4B,QAAEI,QAAQ,CAAgC,CAC3F;EAEhB,CAAC,CACyB;AAEhC,CAAC;AACDH,gBAAgB,CAACqC,WAAW,GAAG,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}