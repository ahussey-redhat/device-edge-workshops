{"ast":null,"code":"import getOppositePlacement from '../utils/getOppositePlacement';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getOppositeVariationPlacement from '../utils/getOppositeVariationPlacement';\nimport detectOverflow from '../utils/detectOverflow';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\nimport { bottom, top, start, right, left, auto } from '../enums';\nimport getVariation from '../utils/getVariation';\n/**\n * @param placement\n */\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n/**\n *\n */\nfunction flip(_ref) {\n  let {\n    state,\n    options,\n    name\n  } = _ref;\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = true,\n    fallbackPlacements: specifiedFallbackPlacements,\n    padding,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    flipVariations = true,\n    allowedAutoPlacements\n  } = options;\n  const preferredPlacement = state.options.placement;\n  const basePlacement = getBasePlacement(preferredPlacement);\n  const isBasePlacement = basePlacement === preferredPlacement;\n  const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  const placements = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n    placement,\n    boundary,\n    rootBoundary,\n    padding,\n    flipVariations,\n    allowedAutoPlacements\n  }) : placement), []);\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const checksMap = new Map();\n  let makeFallbackChecks = true;\n  let firstFittingPlacement = placements[0];\n  for (let i = 0; i < placements.length; i++) {\n    const placement = placements[i];\n    const basePlacement = getBasePlacement(placement);\n    const isStartVariation = getVariation(placement) === start;\n    const isVertical = [top, bottom].indexOf(basePlacement) >= 0;\n    const len = isVertical ? 'width' : 'height';\n    const overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n    let mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n    const altVariationSide = getOppositePlacement(mainVariationSide);\n    const checks = [];\n    if (checkMainAxis) {\n      checks.push(overflow[basePlacement] <= 0);\n    }\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n    if (checks.every(check => check)) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n    checksMap.set(placement, checks);\n  }\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    const numberOfChecks = flipVariations ? 3 : 1;\n    for (let i = numberOfChecks; i > 0; i--) {\n      const fittingPlacement = placements.find(placement => {\n        const checks = checksMap.get(placement);\n        if (checks) {\n          return checks.slice(0, i).every(check => check);\n        }\n      });\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        break;\n      }\n    }\n  }\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","map":{"version":3,"names":["getOppositePlacement","getBasePlacement","getOppositeVariationPlacement","detectOverflow","computeAutoPlacement","bottom","top","start","right","left","auto","getVariation","getExpandedFallbackPlacements","placement","oppositePlacement","flip","_ref","state","options","name","modifiersData","_skip","mainAxis","checkMainAxis","altAxis","checkAltAxis","fallbackPlacements","specifiedFallbackPlacements","padding","boundary","rootBoundary","altBoundary","flipVariations","allowedAutoPlacements","preferredPlacement","basePlacement","isBasePlacement","placements","reduce","acc","concat","referenceRect","rects","reference","popperRect","popper","checksMap","Map","makeFallbackChecks","firstFittingPlacement","i","length","isStartVariation","isVertical","indexOf","len","overflow","mainVariationSide","altVariationSide","checks","push","every","check","set","numberOfChecks","fittingPlacement","find","get","slice","reset","enabled","phase","fn","requiresIfExists","data"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\helpers\\Popper\\thirdparty\\popper-core\\modifiers\\flip.ts"],"sourcesContent":["// @ts-nocheck\nimport { Placement, Boundary, RootBoundary } from '../enums';\nimport { ModifierArguments, Modifier, Padding } from '../types';\nimport getOppositePlacement from '../utils/getOppositePlacement';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getOppositeVariationPlacement from '../utils/getOppositeVariationPlacement';\nimport detectOverflow from '../utils/detectOverflow';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\nimport { bottom, top, start, right, left, auto } from '../enums';\nimport getVariation from '../utils/getVariation';\n\n// eslint-disable-next-line import/no-unused-modules\nexport interface Options {\n  mainAxis: boolean;\n  altAxis: boolean;\n  fallbackPlacements: Placement[];\n  padding: Padding;\n  boundary: Boundary;\n  rootBoundary: RootBoundary;\n  altBoundary: boolean;\n  flipVariations: boolean;\n  allowedAutoPlacements: Placement[];\n}\n\n/**\n * @param placement\n */\nfunction getExpandedFallbackPlacements(placement: Placement): Placement[] {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  const oppositePlacement = getOppositePlacement(placement);\n\n  return [\n    getOppositeVariationPlacement(placement),\n    oppositePlacement,\n    getOppositeVariationPlacement(oppositePlacement)\n  ];\n}\n\n/**\n *\n */\nfunction flip({ state, options, name }: ModifierArguments<Options>) {\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = true,\n    fallbackPlacements: specifiedFallbackPlacements,\n    padding,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    flipVariations = true,\n    allowedAutoPlacements\n  } = options;\n\n  const preferredPlacement = state.options.placement;\n  const basePlacement = getBasePlacement(preferredPlacement);\n  const isBasePlacement = basePlacement === preferredPlacement;\n\n  const fallbackPlacements =\n    specifiedFallbackPlacements ||\n    (isBasePlacement || !flipVariations\n      ? [getOppositePlacement(preferredPlacement)]\n      : getExpandedFallbackPlacements(preferredPlacement));\n\n  const placements = [preferredPlacement, ...fallbackPlacements].reduce(\n    (acc, placement) =>\n      acc.concat(\n        getBasePlacement(placement) === auto\n          ? computeAutoPlacement(state, {\n              placement,\n              boundary,\n              rootBoundary,\n              padding,\n              flipVariations,\n              allowedAutoPlacements\n            })\n          : placement\n      ),\n    []\n  );\n\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n\n  const checksMap = new Map();\n  let makeFallbackChecks = true;\n  let firstFittingPlacement = placements[0];\n\n  for (let i = 0; i < placements.length; i++) {\n    const placement = placements[i];\n    const basePlacement = getBasePlacement(placement);\n    const isStartVariation = getVariation(placement) === start;\n    const isVertical = [top, bottom].indexOf(basePlacement) >= 0;\n    const len = isVertical ? 'width' : 'height';\n\n    const overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n\n    let mainVariationSide: any = isVertical ? (isStartVariation ? right : left) : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    const altVariationSide: any = getOppositePlacement(mainVariationSide);\n\n    const checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(check => check)) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    const numberOfChecks = flipVariations ? 3 : 1;\n\n    for (let i = numberOfChecks; i > 0; i--) {\n      const fittingPlacement = placements.find(placement => {\n        const checks = checksMap.get(placement);\n        if (checks) {\n          return checks.slice(0, i).every(check => check);\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        break;\n      }\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type FlipModifier = Modifier<'flip', Options>;\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: { _skip: false }\n} as FlipModifier;\n"],"mappings":"AAGA,OAAOA,oBAAoB,MAAM,+BAA+B;AAChE,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAOC,6BAA6B,MAAM,wCAAwC;AAClF,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,oBAAoB,MAAM,+BAA+B;AAChE,SAASC,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,UAAU;AAChE,OAAOC,YAAY,MAAM,uBAAuB;AAehD;;;AAGA,SAASC,6BAA6BA,CAACC,SAAoB;EACzD,IAAIZ,gBAAgB,CAACY,SAAS,CAAC,KAAKH,IAAI,EAAE;IACxC,OAAO,EAAE;;EAGX,MAAMI,iBAAiB,GAAGd,oBAAoB,CAACa,SAAS,CAAC;EAEzD,OAAO,CACLX,6BAA6B,CAACW,SAAS,CAAC,EACxCC,iBAAiB,EACjBZ,6BAA6B,CAACY,iBAAiB,CAAC,CACjD;AACH;AAEA;;;AAGA,SAASC,IAAIA,CAAAC,IAAA,EAAqD;EAAA,IAApD;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAI,CAA8B,GAAAH,IAAA;EAChE,IAAIC,KAAK,CAACG,aAAa,CAACD,IAAI,CAAC,CAACE,KAAK,EAAE;IACnC;;EAGF,MAAM;IACJC,QAAQ,EAAEC,aAAa,GAAG,IAAI;IAC9BC,OAAO,EAAEC,YAAY,GAAG,IAAI;IAC5BC,kBAAkB,EAAEC,2BAA2B;IAC/CC,OAAO;IACPC,QAAQ;IACRC,YAAY;IACZC,WAAW;IACXC,cAAc,GAAG,IAAI;IACrBC;EAAqB,CACtB,GAAGf,OAAO;EAEX,MAAMgB,kBAAkB,GAAGjB,KAAK,CAACC,OAAO,CAACL,SAAS;EAClD,MAAMsB,aAAa,GAAGlC,gBAAgB,CAACiC,kBAAkB,CAAC;EAC1D,MAAME,eAAe,GAAGD,aAAa,KAAKD,kBAAkB;EAE5D,MAAMR,kBAAkB,GACtBC,2BAA2B,KAC1BS,eAAe,IAAI,CAACJ,cAAc,GAC/B,CAAChC,oBAAoB,CAACkC,kBAAkB,CAAC,CAAC,GAC1CtB,6BAA6B,CAACsB,kBAAkB,CAAC,CAAC;EAExD,MAAMG,UAAU,GAAG,CAACH,kBAAkB,EAAE,GAAGR,kBAAkB,CAAC,CAACY,MAAM,CACnE,CAACC,GAAG,EAAE1B,SAAS,KACb0B,GAAG,CAACC,MAAM,CACRvC,gBAAgB,CAACY,SAAS,CAAC,KAAKH,IAAI,GAChCN,oBAAoB,CAACa,KAAK,EAAE;IAC1BJ,SAAS;IACTgB,QAAQ;IACRC,YAAY;IACZF,OAAO;IACPI,cAAc;IACdC;GACD,CAAC,GACFpB,SAAS,CACd,EACH,EAAE,CACH;EAED,MAAM4B,aAAa,GAAGxB,KAAK,CAACyB,KAAK,CAACC,SAAS;EAC3C,MAAMC,UAAU,GAAG3B,KAAK,CAACyB,KAAK,CAACG,MAAM;EAErC,MAAMC,SAAS,GAAG,IAAIC,GAAG,EAAE;EAC3B,IAAIC,kBAAkB,GAAG,IAAI;EAC7B,IAAIC,qBAAqB,GAAGZ,UAAU,CAAC,CAAC,CAAC;EAEzC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAMrC,SAAS,GAAGwB,UAAU,CAACa,CAAC,CAAC;IAC/B,MAAMf,aAAa,GAAGlC,gBAAgB,CAACY,SAAS,CAAC;IACjD,MAAMuC,gBAAgB,GAAGzC,YAAY,CAACE,SAAS,CAAC,KAAKN,KAAK;IAC1D,MAAM8C,UAAU,GAAG,CAAC/C,GAAG,EAAED,MAAM,CAAC,CAACiD,OAAO,CAACnB,aAAa,CAAC,IAAI,CAAC;IAC5D,MAAMoB,GAAG,GAAGF,UAAU,GAAG,OAAO,GAAG,QAAQ;IAE3C,MAAMG,QAAQ,GAAGrD,cAAc,CAACc,KAAK,EAAE;MACrCJ,SAAS;MACTgB,QAAQ;MACRC,YAAY;MACZC,WAAW;MACXH;KACD,CAAC;IAEF,IAAI6B,iBAAiB,GAAQJ,UAAU,GAAID,gBAAgB,GAAG5C,KAAK,GAAGC,IAAI,GAAI2C,gBAAgB,GAAG/C,MAAM,GAAGC,GAAG;IAE7G,IAAImC,aAAa,CAACc,GAAG,CAAC,GAAGX,UAAU,CAACW,GAAG,CAAC,EAAE;MACxCE,iBAAiB,GAAGzD,oBAAoB,CAACyD,iBAAiB,CAAC;;IAG7D,MAAMC,gBAAgB,GAAQ1D,oBAAoB,CAACyD,iBAAiB,CAAC;IAErE,MAAME,MAAM,GAAG,EAAE;IAEjB,IAAIpC,aAAa,EAAE;MACjBoC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAACrB,aAAa,CAAC,IAAI,CAAC,CAAC;;IAG3C,IAAIV,YAAY,EAAE;MAChBkC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAACC,iBAAiB,CAAC,IAAI,CAAC,EAAED,QAAQ,CAACE,gBAAgB,CAAC,IAAI,CAAC,CAAC;;IAGhF,IAAIC,MAAM,CAACE,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC,EAAE;MAChCb,qBAAqB,GAAGpC,SAAS;MACjCmC,kBAAkB,GAAG,KAAK;MAC1B;;IAGFF,SAAS,CAACiB,GAAG,CAAClD,SAAS,EAAE8C,MAAM,CAAC;;EAGlC,IAAIX,kBAAkB,EAAE;IACtB;IACA,MAAMgB,cAAc,GAAGhC,cAAc,GAAG,CAAC,GAAG,CAAC;IAE7C,KAAK,IAAIkB,CAAC,GAAGc,cAAc,EAAEd,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACvC,MAAMe,gBAAgB,GAAG5B,UAAU,CAAC6B,IAAI,CAACrD,SAAS,IAAG;QACnD,MAAM8C,MAAM,GAAGb,SAAS,CAACqB,GAAG,CAACtD,SAAS,CAAC;QACvC,IAAI8C,MAAM,EAAE;UACV,OAAOA,MAAM,CAACS,KAAK,CAAC,CAAC,EAAElB,CAAC,CAAC,CAACW,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC;;MAEnD,CAAC,CAAC;MAEF,IAAIG,gBAAgB,EAAE;QACpBhB,qBAAqB,GAAGgB,gBAAgB;QACxC;;;;EAKN,IAAIhD,KAAK,CAACJ,SAAS,KAAKoC,qBAAqB,EAAE;IAC7ChC,KAAK,CAACG,aAAa,CAACD,IAAI,CAAC,CAACE,KAAK,GAAG,IAAI;IACtCJ,KAAK,CAACJ,SAAS,GAAGoC,qBAAqB;IACvChC,KAAK,CAACoD,KAAK,GAAG,IAAI;;AAEtB;AAIA,eAAe;EACblD,IAAI,EAAE,MAAM;EACZmD,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,MAAM;EACbC,EAAE,EAAEzD,IAAI;EACR0D,gBAAgB,EAAE,CAAC,QAAQ,CAAC;EAC5BC,IAAI,EAAE;IAAErD,KAAK,EAAE;EAAK;CACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}