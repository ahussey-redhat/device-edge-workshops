{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n  componentDidMount() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    this.setState({\n      isMounted: true\n    });\n  }\n  componentDidUpdate() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        chips,\n        deleteChipGroup,\n        deleteChip,\n        chipGroupExpandedText,\n        chipGroupCollapsedText,\n        categoryName,\n        showToolbarItem\n      } = _a,\n      props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n    const {\n      isExpanded,\n      chipGroupContentRef\n    } = this.context;\n    const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n    const chipGroup = chips.length ? React.createElement(ToolbarItem, {\n      variant: \"chip-group\"\n    }, React.createElement(ChipGroup, {\n      key: categoryKey,\n      categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n      isClosable: deleteChipGroup !== undefined,\n      onClick: () => deleteChipGroup(categoryName),\n      collapsedText: chipGroupCollapsedText,\n      expandedText: chipGroupExpandedText\n    }, chips.map(chip => typeof chip === 'string' ? React.createElement(Chip, {\n      key: chip,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip) : React.createElement(Chip, {\n      key: chip.key,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip.node)))) : null;\n    if (!isExpanded && this.state.isMounted) {\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n    }\n    return React.createElement(ToolbarContentContext.Consumer, null, _ref => {\n      let {\n        chipContainerRef\n      } = _ref;\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current));\n    });\n  }\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"names":["React","ReactDOM","ToolbarItem","ChipGroup","Chip","ToolbarContentContext","ToolbarContext","ToolbarFilter","Component","constructor","props","state","isMounted","componentDidMount","categoryName","chips","context","updateNumberFilters","hasOwnProperty","key","toString","length","setState","componentDidUpdate","render","_a","children","deleteChipGroup","deleteChip","chipGroupExpandedText","chipGroupCollapsedText","showToolbarItem","__rest","isExpanded","chipGroupContentRef","categoryKey","chipGroup","createElement","variant","name","isClosable","undefined","onClick","collapsedText","expandedText","map","chip","node","Fragment","Object","assign","createPortal","current","firstElementChild","Consumer","_ref","chipContainerRef","displayName","contextType","defaultProps"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Toolbar\\ToolbarFilter.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroup {\n  /** A unique key to identify this chip group category */\n  key: string;\n  /** The category name to display for the chip group */\n  name: string;\n}\n\nexport interface ToolbarChip {\n  /** A unique key to identify this chip */\n  key: string;\n  /** The ReactNode to display in the chip */\n  node: React.ReactNode;\n}\n\nexport interface ToolbarFilterProps extends ToolbarItemProps {\n  /** An array of strings to be displayed as chips in the expandable content */\n  chips?: (string | ToolbarChip)[];\n  /** Callback passed by consumer used to close the entire chip group */\n  deleteChipGroup?: (category: string | ToolbarChipGroup) => void;\n  /** Callback passed by consumer used to delete a chip from the chips[] */\n  deleteChip?: (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => void;\n  /** Customizable \"Show Less\" text string for the chip group */\n  chipGroupExpandedText?: string;\n  /** Customizeable template string for the chip group. Use variable \"${remaining}\" for the overflow chip count. */\n  chipGroupCollapsedText?: string;\n  /** Content to be rendered inside the data toolbar item associated with the chip group */\n  children: React.ReactNode;\n  /** Unique category name to be used as a label for the chip group */\n  categoryName: string | ToolbarChipGroup;\n  /** Flag to show the toolbar item */\n  showToolbarItem?: boolean;\n}\n\ninterface ToolbarFilterState {\n  isMounted: boolean;\n}\n\nexport class ToolbarFilter extends React.Component<ToolbarFilterProps, ToolbarFilterState> {\n  static displayName = 'ToolbarFilter';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarFilterProps> = {\n    chips: [] as (string | ToolbarChip)[],\n    showToolbarItem: true\n  };\n\n  constructor(props: ToolbarFilterProps) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n    this.setState({ isMounted: true });\n  }\n\n  componentDidUpdate() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n  }\n\n  render() {\n    const {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem,\n      ...props\n    } = this.props;\n    const { isExpanded, chipGroupContentRef } = this.context;\n    const categoryKey =\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString();\n\n    const chipGroup = chips.length ? (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup\n          key={categoryKey}\n          categoryName={typeof categoryName === 'string' ? categoryName : categoryName.name}\n          isClosable={deleteChipGroup !== undefined}\n          onClick={() => deleteChipGroup(categoryName)}\n          collapsedText={chipGroupCollapsedText}\n          expandedText={chipGroupExpandedText}\n        >\n          {chips.map(chip =>\n            typeof chip === 'string' ? (\n              <Chip key={chip} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip}\n              </Chip>\n            ) : (\n              <Chip key={chip.key} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip.node}\n              </Chip>\n            )\n          )}\n        </ChipGroup>\n      </ToolbarItem>\n    ) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return (\n        <React.Fragment>\n          {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n          {ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <ToolbarContentContext.Consumer>\n        {({ chipContainerRef }) => (\n          <React.Fragment>\n            {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n            {chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)}\n          </React.Fragment>\n        )}\n      </ToolbarContentContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}