{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nexport const HelperText = _a => {\n  var {\n      children,\n      className,\n      component = 'div',\n      id,\n      isLiveRegion = false\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"component\", \"id\", \"isLiveRegion\"]);\n  const Component = component;\n  return React.createElement(Component, Object.assign({\n    id: id,\n    className: css(styles.helperText, className)\n  }, isLiveRegion && {\n    'aria-live': 'polite'\n  }, props), children);\n};\nHelperText.displayName = 'HelperText';","map":{"version":3,"names":["React","styles","css","HelperText","_a","children","className","component","id","isLiveRegion","props","__rest","Component","createElement","Object","assign","helperText","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\HelperText\\HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\n\nexport interface HelperTextProps extends React.HTMLProps<HTMLDivElement | HTMLUListElement> {\n  /** Content rendered inside the helper text container. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the helper text container. */\n  className?: string;\n  /** Component type of the helper text container */\n  component?: 'div' | 'ul';\n  /** ID for the helper text container. The value of this prop can be passed into a form component's\n   * aria-describedby prop when you intend for all helper text items to be announced to\n   * assistive technologies.\n   */\n  id?: string;\n  /** Flag for indicating whether the helper text container is a live region. Use this prop when you\n   * expect or intend for any helper text items within the container to be dynamically updated.\n   */\n  isLiveRegion?: boolean;\n}\n\nexport const HelperText: React.FunctionComponent<HelperTextProps> = ({\n  children,\n  className,\n  component = 'div',\n  id,\n  isLiveRegion = false,\n  ...props\n}: HelperTextProps) => {\n  const Component = component as any;\n  return (\n    <Component\n      id={id}\n      className={css(styles.helperText, className)}\n      {...(isLiveRegion && { 'aria-live': 'polite' })}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\nHelperText.displayName = 'HelperText';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,gEAAgE;AACnF,SAASC,GAAG,QAAQ,0BAA0B;AAoB9C,OAAO,MAAMC,UAAU,GAA8CC,EAOnD,IAAI;MAP+C;MACnEC,QAAQ;MACRC,SAAS;MACTC,SAAS,GAAG,KAAK;MACjBC,EAAE;MACFC,YAAY,GAAG;IAAK,IAAAL,EAEJ;IADbM,KAAK,GAAAC,MAAA,CAAAP,EAAA,EAN2D,4DAOpE,CADS;EAER,MAAMQ,SAAS,GAAGL,SAAgB;EAClC,OACEP,KAAA,CAAAa,aAAA,CAACD,SAAS,EAAAE,MAAA,CAAAC,MAAA;IACRP,EAAE,EAAEA,EAAE;IACNF,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACe,UAAU,EAAEV,SAAS;EAAC,GACvCG,YAAY,IAAI;IAAE,WAAW,EAAE;EAAQ,CAAE,EAC1CC,KAAK,GAERL,QAAQ,CACC;AAEhB,CAAC;AACDF,UAAU,CAACc,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}