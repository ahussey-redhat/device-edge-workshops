{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = _ref => {\n  let {\n    isNavOpen,\n    onNavToggle,\n    nav,\n    steps,\n    activeStep,\n    children,\n    hasNoBodyPadding = false,\n    'aria-label': ariaLabel = 'Wizard Toggle',\n    mainAriaLabelledBy = null,\n    mainAriaLabel = null,\n    isInPage = true,\n    hasDrawer,\n    isDrawerExpanded,\n    onExpandDrawer\n  } = _ref;\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => onNavToggle(!isNavOpen),\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding,\n    activeStep: activeStep,\n    isDrawerExpanded: isDrawerExpanded,\n    onExpandDrawer: onExpandDrawer,\n    hasDrawer: hasDrawer\n  }, hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"names":["React","css","styles","AngleRightIcon","CaretDownIcon","WizardBody","WizardToggle","_ref","isNavOpen","onNavToggle","nav","steps","activeStep","children","hasNoBodyPadding","ariaLabel","mainAriaLabelledBy","mainAriaLabel","isInPage","hasDrawer","isDrawerExpanded","onExpandDrawer","activeStepIndex","activeStepName","activeStepSubName","i","length","id","name","step","createElement","Fragment","onClick","className","wizardToggle","wizardToggleList","wizardToggleListItem","wizardToggleNum","wizardToggleSeparator","wizardToggleIcon","wizardOuterWrap","wizardInnerWrap","mainComponent","drawerToggleButton","component","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Wizard\\WizardToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardStep } from './Wizard';\nimport { WizardBody } from './WizardBody';\n\nexport interface WizardToggleProps {\n  /** Function that returns the WizardNav component */\n  nav: (isWizardNavOpen: boolean) => React.ReactElement;\n  /** The wizard steps */\n  steps: WizardStep[];\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  /** The WizardFooter */\n  children?: React.ReactNode;\n  /** Set to true to remove body padding */\n  hasNoBodyPadding: boolean;\n  /** If the nav is open */\n  isNavOpen: boolean;\n  /** Callback function for when the nav is toggled */\n  onNavToggle: (isOpen: boolean) => void;\n  /** The button's aria-label */\n  'aria-label'?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** The main's aria-label */\n  mainAriaLabel?: string;\n  /** If the wizard is in-page */\n  isInPage?: boolean;\n  /** Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n  /** Callback function for when the drawer is toggled */\n  onExpandDrawer?: () => void;\n}\n\nexport const WizardToggle: React.FunctionComponent<WizardToggleProps> = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true,\n  hasDrawer,\n  isDrawerExpanded,\n  onExpandDrawer\n}: WizardToggleProps) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <button\n        onClick={() => onNavToggle(!isNavOpen)}\n        className={css(styles.wizardToggle, isNavOpen && 'pf-m-expanded')}\n        aria-label={ariaLabel}\n        aria-expanded={isNavOpen}\n      >\n        <span className={css(styles.wizardToggleList)}>\n          <span className={css(styles.wizardToggleListItem)}>\n            <span className={css(styles.wizardToggleNum)}>{activeStepIndex}</span> {activeStepName}\n            {activeStepSubName && <AngleRightIcon className={css(styles.wizardToggleSeparator)} aria-hidden=\"true\" />}\n          </span>\n          {activeStepSubName && <span className={css(styles.wizardToggleListItem)}>{activeStepSubName}</span>}\n        </span>\n        <span className={css(styles.wizardToggleIcon)}>\n          <CaretDownIcon aria-hidden=\"true\" />\n        </span>\n      </button>\n      <div className={css(styles.wizardOuterWrap)}>\n        <div className={css(styles.wizardInnerWrap)}>\n          {nav(isNavOpen)}\n          <WizardBody\n            mainComponent={isInPage ? 'div' : 'main'}\n            aria-label={mainAriaLabel}\n            aria-labelledby={mainAriaLabelledBy}\n            hasNoBodyPadding={hasNoBodyPadding}\n            activeStep={activeStep}\n            isDrawerExpanded={isDrawerExpanded}\n            onExpandDrawer={onExpandDrawer}\n            hasDrawer={hasDrawer}\n          >\n            {hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton}\n            {activeStep.component}\n          </WizardBody>\n        </div>\n        {children}\n      </div>\n    </React.Fragment>\n  );\n};\nWizardToggle.displayName = 'WizardToggle';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}