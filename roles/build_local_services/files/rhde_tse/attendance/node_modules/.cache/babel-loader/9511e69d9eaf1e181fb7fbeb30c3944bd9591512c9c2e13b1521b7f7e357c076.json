{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nimport { DragDropContext } from './DragDrop';\n// Browsers really like being different from each other.\nfunction getDefaultBackground() {\n  const div = document.createElement('div');\n  document.head.appendChild(div);\n  const bg = window.getComputedStyle(div).backgroundColor;\n  document.head.removeChild(div);\n  return bg;\n}\nfunction getInheritedBackgroundColor(el) {\n  const defaultStyle = getDefaultBackground();\n  const backgroundColor = window.getComputedStyle(el).backgroundColor;\n  if (backgroundColor !== defaultStyle) {\n    return backgroundColor;\n  } else if (!el.parentElement) {\n    return defaultStyle;\n  }\n  return getInheritedBackgroundColor(el.parentElement);\n}\nfunction removeBlankDiv(node) {\n  if (node.getAttribute('blankDiv') === 'true') {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (child.getAttribute('blankDiv') === 'true') {\n        node.removeChild(child);\n        node.setAttribute('blankDiv', 'false');\n        break;\n      }\n    }\n  }\n}\n// Reset per-element state\nfunction resetDroppableItem(droppableItem) {\n  removeBlankDiv(droppableItem.node);\n  droppableItem.node.classList.remove(styles.modifiers.dragging);\n  droppableItem.node.classList.remove(styles.modifiers.dragOutside);\n  droppableItem.draggableNodes.forEach((n, i) => {\n    n.style.transform = '';\n    n.style.transition = '';\n    droppableItem.draggableNodesRects[i] = n.getBoundingClientRect();\n  });\n}\nfunction overlaps(ev, rect) {\n  return ev.clientX > rect.x && ev.clientX < rect.x + rect.width && ev.clientY > rect.y && ev.clientY < rect.y + rect.height;\n}\nexport const Draggable = _a => {\n  var {\n      className,\n      children,\n      style: styleProp = {},\n      hasNoWrapper = false\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", \"style\", \"hasNoWrapper\"]);\n  /* eslint-disable prefer-const */\n  let [style, setStyle] = React.useState(styleProp);\n  /* eslint-enable prefer-const */\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [isValidDrag, setIsValidDrag] = React.useState(true);\n  const {\n    zone,\n    droppableId\n  } = React.useContext(DroppableContext);\n  const {\n    onDrag,\n    onDragMove,\n    onDrop\n  } = React.useContext(DragDropContext);\n  // Some state is better just to leave as vars passed around between various callbacks\n  // You can only drag around one item at a time anyways...\n  let startX = 0;\n  let startY = 0;\n  let index = null; // Index of this draggable\n  let hoveringDroppable;\n  let hoveringIndex = null;\n  let mouseMoveListener;\n  let mouseUpListener;\n  // Makes it so dragging the _bottom_ of the item over the halfway of another moves it\n  let startYOffset = 0;\n  // After item returning to where it started animation completes\n  const onTransitionEnd = _ev => {\n    if (isDragging) {\n      setIsDragging(false);\n      setStyle(styleProp);\n    }\n  };\n  function getSourceAndDest() {\n    const hoveringDroppableId = hoveringDroppable ? hoveringDroppable.getAttribute('data-pf-droppableid') : null;\n    const source = {\n      droppableId,\n      index\n    };\n    const dest = hoveringDroppableId !== null && hoveringIndex !== null ? {\n      droppableId: hoveringDroppableId,\n      index: hoveringIndex\n    } : undefined;\n    return {\n      source,\n      dest,\n      hoveringDroppableId\n    };\n  }\n  const onMouseUpWhileDragging = droppableItems => {\n    droppableItems.forEach(resetDroppableItem);\n    document.removeEventListener('mousemove', mouseMoveListener);\n    document.removeEventListener('mouseup', mouseUpListener);\n    document.removeEventListener('contextmenu', mouseUpListener);\n    const {\n      source,\n      dest,\n      hoveringDroppableId\n    } = getSourceAndDest();\n    const consumerReordered = onDrop(source, dest);\n    if (consumerReordered && droppableId === hoveringDroppableId) {\n      setIsDragging(false);\n      setStyle(styleProp);\n    } else if (!consumerReordered) {\n      // Animate item returning to where it started\n      setStyle(Object.assign(Object.assign({}, style), {\n        transition: 'transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s',\n        transform: '',\n        background: styleProp.background,\n        boxShadow: styleProp.boxShadow\n      }));\n    }\n  };\n  // This is where the magic happens\n  const onMouseMoveWhileDragging = (ev, droppableItems, blankDivRect) => {\n    // Compute each time what droppable node we are hovering over\n    hoveringDroppable = null;\n    droppableItems.forEach(droppableItem => {\n      const {\n        node,\n        rect,\n        isDraggingHost,\n        draggableNodes,\n        draggableNodesRects\n      } = droppableItem;\n      if (overlaps(ev, rect)) {\n        // Add valid dropzone style\n        node.classList.remove(styles.modifiers.dragOutside);\n        hoveringDroppable = node;\n        // Check if we need to add a blank div row\n        if (node.getAttribute('blankDiv') !== 'true' && !isDraggingHost) {\n          const blankDiv = document.createElement('div');\n          blankDiv.setAttribute('blankDiv', 'true'); // Makes removing easier\n          let blankDivPos = -1;\n          for (let i = 0; i < draggableNodes.length; i++) {\n            const childRect = draggableNodesRects[i];\n            const isLast = i === draggableNodes.length - 1;\n            const startOverlaps = childRect.y >= startY - startYOffset;\n            if ((startOverlaps || isLast) && blankDivPos === -1) {\n              if (isLast && !startOverlaps) {\n                draggableNodes[i].after(blankDiv);\n              } else {\n                draggableNodes[i].before(blankDiv);\n              }\n              blankDiv.style.height = `${blankDivRect.height}px`;\n              blankDiv.style.width = `${blankDivRect.width}px`;\n              node.setAttribute('blankDiv', 'true'); // Makes removing easier\n              blankDivPos = i;\n            }\n            if (blankDivPos !== -1) {\n              childRect.y += blankDivRect.height;\n            }\n          }\n          // Insert so drag + drop behavior matches single-list case\n          draggableNodes.splice(blankDivPos, 0, blankDiv);\n          draggableNodesRects.splice(blankDivPos, 0, blankDivRect);\n          // Extend hitbox of droppable zone\n          rect.height += blankDivRect.height;\n        }\n      } else {\n        resetDroppableItem(droppableItem);\n        node.classList.add(styles.modifiers.dragging);\n        node.classList.add(styles.modifiers.dragOutside);\n      }\n    });\n    // Move hovering draggable and style it based on cursor position\n    setStyle(Object.assign(Object.assign({}, style), {\n      transform: `translate(${ev.pageX - startX}px, ${ev.pageY - startY}px)`\n    }));\n    setIsValidDrag(Boolean(hoveringDroppable));\n    // Iterate through sibling draggable nodes to reposition them and store correct hoveringIndex for onDrop\n    hoveringIndex = null;\n    if (hoveringDroppable) {\n      const {\n        draggableNodes,\n        draggableNodesRects\n      } = droppableItems.find(item => item.node === hoveringDroppable);\n      let lastTranslate = 0;\n      draggableNodes.forEach((n, i) => {\n        n.style.transition = 'transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s';\n        const rect = draggableNodesRects[i];\n        const halfway = rect.y + rect.height / 2;\n        let translateY = 0;\n        // Use offset for more interactive translations\n        if (startY < halfway && ev.pageY + (blankDivRect.height - startYOffset) > halfway) {\n          translateY -= blankDivRect.height;\n        } else if (startY >= halfway && ev.pageY - startYOffset <= halfway) {\n          translateY += blankDivRect.height;\n        }\n        // Clever way to find item currently hovering over\n        if (translateY <= lastTranslate && translateY < 0 || translateY > lastTranslate && translateY > 0) {\n          hoveringIndex = i;\n        }\n        n.style.transform = `translate(0, ${translateY}px`;\n        lastTranslate = translateY;\n      });\n    }\n    const {\n      source,\n      dest\n    } = getSourceAndDest();\n    onDragMove(source, dest);\n  };\n  const onDragStart = ev => {\n    // Default HTML drag and drop doesn't allow us to change what the thing\n    // being dragged looks like. Because of this we'll use prevent the default\n    // and use `mouseMove` and `mouseUp` instead\n    ev.preventDefault();\n    if (isDragging) {\n      // still in animation\n      return;\n    }\n    // Cache droppable and draggable nodes and their bounding rects\n    const dragging = ev.target;\n    const rect = dragging.getBoundingClientRect();\n    const droppableNodes = Array.from(document.querySelectorAll(`[data-pf-droppable=\"${zone}\"]`));\n    const droppableItems = droppableNodes.reduce((acc, cur) => {\n      cur.classList.add(styles.modifiers.dragging);\n      const draggableNodes = Array.from(cur.querySelectorAll(`[data-pf-draggable-zone=\"${zone}\"]`));\n      const isDraggingHost = cur.contains(dragging);\n      if (isDraggingHost) {\n        index = draggableNodes.indexOf(dragging);\n      }\n      const droppableItem = {\n        node: cur,\n        rect: cur.getBoundingClientRect(),\n        isDraggingHost,\n        // We don't want styles to apply to the left behind div in onMouseMoveWhileDragging\n        draggableNodes: draggableNodes.map(node => node === dragging ? node.cloneNode(false) : node),\n        draggableNodesRects: draggableNodes.map(node => node.getBoundingClientRect())\n      };\n      acc.push(droppableItem);\n      return acc;\n    }, []);\n    if (!onDrag({\n      droppableId,\n      index\n    })) {\n      // Consumer disallowed drag\n      return;\n    }\n    // Set initial style so future style mods take effect\n    style = Object.assign(Object.assign({}, style), {\n      top: rect.y,\n      left: rect.x,\n      width: rect.width,\n      height: rect.height,\n      '--pf-c-draggable--m-dragging--BackgroundColor': getInheritedBackgroundColor(dragging),\n      position: 'fixed',\n      zIndex: 5000\n    });\n    setStyle(style);\n    // Store event details\n    startX = ev.pageX;\n    startY = ev.pageY;\n    startYOffset = startY - rect.y;\n    setIsDragging(true);\n    mouseMoveListener = ev => onMouseMoveWhileDragging(ev, droppableItems, rect);\n    mouseUpListener = () => onMouseUpWhileDragging(droppableItems);\n    document.addEventListener('mousemove', mouseMoveListener);\n    document.addEventListener('mouseup', mouseUpListener);\n    // Comment out this line to debug while dragging by right clicking\n    // document.addEventListener('contextmenu', mouseUpListener);\n  };\n\n  const childProps = Object.assign({\n    'data-pf-draggable-zone': isDragging ? null : zone,\n    draggable: true,\n    className: css(styles.draggable, isDragging && styles.modifiers.dragging, !isValidDrag && styles.modifiers.dragOutside, className),\n    onDragStart,\n    onTransitionEnd,\n    style\n  }, props);\n  return React.createElement(React.Fragment, null, isDragging && React.createElement(\"div\", Object.assign({\n    draggable: true\n  }, props, {\n    style: Object.assign(Object.assign({}, styleProp), {\n      visibility: 'hidden'\n    })\n  }), children), hasNoWrapper ? React.cloneElement(children, childProps) : React.createElement(\"div\", Object.assign({}, childProps), children));\n};\nDraggable.displayName = 'Draggable';","map":{"version":3,"names":["React","css","styles","DroppableContext","DragDropContext","getDefaultBackground","div","document","createElement","head","appendChild","bg","window","getComputedStyle","backgroundColor","removeChild","getInheritedBackgroundColor","el","defaultStyle","parentElement","removeBlankDiv","node","getAttribute","i","children","length","child","setAttribute","resetDroppableItem","droppableItem","classList","remove","modifiers","dragging","dragOutside","draggableNodes","forEach","n","style","transform","transition","draggableNodesRects","getBoundingClientRect","overlaps","ev","rect","clientX","x","width","clientY","y","height","Draggable","_a","className","styleProp","hasNoWrapper","props","__rest","setStyle","useState","isDragging","setIsDragging","isValidDrag","setIsValidDrag","zone","droppableId","useContext","onDrag","onDragMove","onDrop","startX","startY","index","hoveringDroppable","hoveringIndex","mouseMoveListener","mouseUpListener","startYOffset","onTransitionEnd","_ev","getSourceAndDest","hoveringDroppableId","source","dest","undefined","onMouseUpWhileDragging","droppableItems","removeEventListener","consumerReordered","Object","assign","background","boxShadow","onMouseMoveWhileDragging","blankDivRect","isDraggingHost","blankDiv","blankDivPos","childRect","isLast","startOverlaps","after","before","splice","add","pageX","pageY","Boolean","find","item","lastTranslate","halfway","translateY","onDragStart","preventDefault","target","droppableNodes","Array","from","querySelectorAll","reduce","acc","cur","contains","indexOf","map","cloneNode","push","top","left","position","zIndex","addEventListener","childProps","draggable","Fragment","visibility","cloneElement","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DragDrop\\Draggable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nimport { DragDropContext } from './DragDrop';\n\nexport interface DraggableProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside DragDrop */\n  children?: React.ReactNode;\n  /** Don't wrap the component in a div. Requires passing a single child. */\n  hasNoWrapper?: boolean;\n  /** Class to add to outer div */\n  className?: string;\n}\n\n// Browsers really like being different from each other.\nfunction getDefaultBackground() {\n  const div = document.createElement('div');\n  document.head.appendChild(div);\n  const bg = window.getComputedStyle(div).backgroundColor;\n  document.head.removeChild(div);\n  return bg;\n}\n\nfunction getInheritedBackgroundColor(el: HTMLElement): string {\n  const defaultStyle = getDefaultBackground();\n  const backgroundColor = window.getComputedStyle(el).backgroundColor;\n\n  if (backgroundColor !== defaultStyle) {\n    return backgroundColor;\n  } else if (!el.parentElement) {\n    return defaultStyle;\n  }\n\n  return getInheritedBackgroundColor(el.parentElement);\n}\n\nfunction removeBlankDiv(node: HTMLElement) {\n  if (node.getAttribute('blankDiv') === 'true') {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (child.getAttribute('blankDiv') === 'true') {\n        node.removeChild(child);\n        node.setAttribute('blankDiv', 'false');\n        break;\n      }\n    }\n  }\n}\n\ninterface DroppableItem {\n  node: HTMLElement;\n  rect: DOMRect;\n  isDraggingHost: boolean;\n  draggableNodes: HTMLElement[];\n  draggableNodesRects: DOMRect[];\n}\n\n// Reset per-element state\nfunction resetDroppableItem(droppableItem: DroppableItem) {\n  removeBlankDiv(droppableItem.node);\n  droppableItem.node.classList.remove(styles.modifiers.dragging);\n  droppableItem.node.classList.remove(styles.modifiers.dragOutside);\n  droppableItem.draggableNodes.forEach((n, i) => {\n    n.style.transform = '';\n    n.style.transition = '';\n    droppableItem.draggableNodesRects[i] = n.getBoundingClientRect();\n  });\n}\n\nfunction overlaps(ev: MouseEvent, rect: DOMRect) {\n  return (\n    ev.clientX > rect.x && ev.clientX < rect.x + rect.width && ev.clientY > rect.y && ev.clientY < rect.y + rect.height\n  );\n}\n\nexport const Draggable: React.FunctionComponent<DraggableProps> = ({\n  className,\n  children,\n  style: styleProp = {},\n  hasNoWrapper = false,\n  ...props\n}: DraggableProps) => {\n  /* eslint-disable prefer-const */\n  let [style, setStyle] = React.useState(styleProp);\n  /* eslint-enable prefer-const */\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [isValidDrag, setIsValidDrag] = React.useState(true);\n  const { zone, droppableId } = React.useContext(DroppableContext);\n  const { onDrag, onDragMove, onDrop } = React.useContext(DragDropContext);\n  // Some state is better just to leave as vars passed around between various callbacks\n  // You can only drag around one item at a time anyways...\n  let startX = 0;\n  let startY = 0;\n  let index: number = null; // Index of this draggable\n  let hoveringDroppable: HTMLElement;\n  let hoveringIndex: number = null;\n  let mouseMoveListener: EventListener;\n  let mouseUpListener: EventListener;\n  // Makes it so dragging the _bottom_ of the item over the halfway of another moves it\n  let startYOffset = 0;\n\n  // After item returning to where it started animation completes\n  const onTransitionEnd = (_ev: React.TransitionEvent<HTMLElement>) => {\n    if (isDragging) {\n      setIsDragging(false);\n      setStyle(styleProp);\n    }\n  };\n\n  function getSourceAndDest() {\n    const hoveringDroppableId = hoveringDroppable ? hoveringDroppable.getAttribute('data-pf-droppableid') : null;\n    const source = {\n      droppableId,\n      index\n    };\n    const dest =\n      hoveringDroppableId !== null && hoveringIndex !== null\n        ? {\n            droppableId: hoveringDroppableId,\n            index: hoveringIndex\n          }\n        : undefined;\n    return { source, dest, hoveringDroppableId };\n  }\n\n  const onMouseUpWhileDragging = (droppableItems: DroppableItem[]) => {\n    droppableItems.forEach(resetDroppableItem);\n    document.removeEventListener('mousemove', mouseMoveListener);\n    document.removeEventListener('mouseup', mouseUpListener);\n    document.removeEventListener('contextmenu', mouseUpListener);\n    const { source, dest, hoveringDroppableId } = getSourceAndDest();\n    const consumerReordered = onDrop(source, dest);\n    if (consumerReordered && droppableId === hoveringDroppableId) {\n      setIsDragging(false);\n      setStyle(styleProp);\n    } else if (!consumerReordered) {\n      // Animate item returning to where it started\n      setStyle({\n        ...style,\n        transition: 'transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s',\n        transform: '',\n        background: styleProp.background,\n        boxShadow: styleProp.boxShadow\n      });\n    }\n  };\n\n  // This is where the magic happens\n  const onMouseMoveWhileDragging = (ev: MouseEvent, droppableItems: DroppableItem[], blankDivRect: DOMRect) => {\n    // Compute each time what droppable node we are hovering over\n    hoveringDroppable = null;\n    droppableItems.forEach(droppableItem => {\n      const { node, rect, isDraggingHost, draggableNodes, draggableNodesRects } = droppableItem;\n      if (overlaps(ev, rect)) {\n        // Add valid dropzone style\n        node.classList.remove(styles.modifiers.dragOutside);\n        hoveringDroppable = node;\n        // Check if we need to add a blank div row\n        if (node.getAttribute('blankDiv') !== 'true' && !isDraggingHost) {\n          const blankDiv = document.createElement('div');\n          blankDiv.setAttribute('blankDiv', 'true'); // Makes removing easier\n          let blankDivPos = -1;\n          for (let i = 0; i < draggableNodes.length; i++) {\n            const childRect = draggableNodesRects[i];\n            const isLast = i === draggableNodes.length - 1;\n            const startOverlaps = childRect.y >= startY - startYOffset;\n            if ((startOverlaps || isLast) && blankDivPos === -1) {\n              if (isLast && !startOverlaps) {\n                draggableNodes[i].after(blankDiv);\n              } else {\n                draggableNodes[i].before(blankDiv);\n              }\n              blankDiv.style.height = `${blankDivRect.height}px`;\n              blankDiv.style.width = `${blankDivRect.width}px`;\n              node.setAttribute('blankDiv', 'true'); // Makes removing easier\n              blankDivPos = i;\n            }\n            if (blankDivPos !== -1) {\n              childRect.y += blankDivRect.height;\n            }\n          }\n          // Insert so drag + drop behavior matches single-list case\n          draggableNodes.splice(blankDivPos, 0, blankDiv);\n          draggableNodesRects.splice(blankDivPos, 0, blankDivRect);\n          // Extend hitbox of droppable zone\n          rect.height += blankDivRect.height;\n        }\n      } else {\n        resetDroppableItem(droppableItem);\n        node.classList.add(styles.modifiers.dragging);\n        node.classList.add(styles.modifiers.dragOutside);\n      }\n    });\n\n    // Move hovering draggable and style it based on cursor position\n    setStyle({\n      ...style,\n      transform: `translate(${ev.pageX - startX}px, ${ev.pageY - startY}px)`\n    });\n    setIsValidDrag(Boolean(hoveringDroppable));\n\n    // Iterate through sibling draggable nodes to reposition them and store correct hoveringIndex for onDrop\n    hoveringIndex = null;\n    if (hoveringDroppable) {\n      const { draggableNodes, draggableNodesRects } = droppableItems.find(item => item.node === hoveringDroppable);\n      let lastTranslate = 0;\n      draggableNodes.forEach((n, i) => {\n        n.style.transition = 'transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s';\n        const rect = draggableNodesRects[i];\n        const halfway = rect.y + rect.height / 2;\n        let translateY = 0;\n        // Use offset for more interactive translations\n        if (startY < halfway && ev.pageY + (blankDivRect.height - startYOffset) > halfway) {\n          translateY -= blankDivRect.height;\n        } else if (startY >= halfway && ev.pageY - startYOffset <= halfway) {\n          translateY += blankDivRect.height;\n        }\n        // Clever way to find item currently hovering over\n        if ((translateY <= lastTranslate && translateY < 0) || (translateY > lastTranslate && translateY > 0)) {\n          hoveringIndex = i;\n        }\n        n.style.transform = `translate(0, ${translateY}px`;\n        lastTranslate = translateY;\n      });\n    }\n\n    const { source, dest } = getSourceAndDest();\n    onDragMove(source, dest);\n  };\n\n  const onDragStart = (ev: React.DragEvent<HTMLElement>) => {\n    // Default HTML drag and drop doesn't allow us to change what the thing\n    // being dragged looks like. Because of this we'll use prevent the default\n    // and use `mouseMove` and `mouseUp` instead\n    ev.preventDefault();\n    if (isDragging) {\n      // still in animation\n      return;\n    }\n\n    // Cache droppable and draggable nodes and their bounding rects\n    const dragging = ev.target as HTMLElement;\n    const rect = dragging.getBoundingClientRect();\n    const droppableNodes = Array.from(document.querySelectorAll(`[data-pf-droppable=\"${zone}\"]`)) as HTMLElement[];\n    const droppableItems = droppableNodes.reduce((acc, cur) => {\n      cur.classList.add(styles.modifiers.dragging);\n      const draggableNodes = Array.from(cur.querySelectorAll(`[data-pf-draggable-zone=\"${zone}\"]`)) as HTMLElement[];\n      const isDraggingHost = cur.contains(dragging);\n      if (isDraggingHost) {\n        index = draggableNodes.indexOf(dragging);\n      }\n      const droppableItem = {\n        node: cur,\n        rect: cur.getBoundingClientRect(),\n        isDraggingHost,\n        // We don't want styles to apply to the left behind div in onMouseMoveWhileDragging\n        draggableNodes: draggableNodes.map(node => (node === dragging ? node.cloneNode(false) : node)),\n        draggableNodesRects: draggableNodes.map(node => node.getBoundingClientRect())\n      };\n      acc.push(droppableItem);\n      return acc;\n    }, []);\n\n    if (!onDrag({ droppableId, index })) {\n      // Consumer disallowed drag\n      return;\n    }\n\n    // Set initial style so future style mods take effect\n    style = {\n      ...style,\n      top: rect.y,\n      left: rect.x,\n      width: rect.width,\n      height: rect.height,\n      '--pf-c-draggable--m-dragging--BackgroundColor': getInheritedBackgroundColor(dragging),\n      position: 'fixed',\n      zIndex: 5000\n    } as any;\n    setStyle(style);\n    // Store event details\n    startX = ev.pageX;\n    startY = ev.pageY;\n    startYOffset = startY - rect.y;\n    setIsDragging(true);\n    mouseMoveListener = ev => onMouseMoveWhileDragging(ev as MouseEvent, droppableItems, rect);\n    mouseUpListener = () => onMouseUpWhileDragging(droppableItems);\n    document.addEventListener('mousemove', mouseMoveListener);\n    document.addEventListener('mouseup', mouseUpListener);\n    // Comment out this line to debug while dragging by right clicking\n    // document.addEventListener('contextmenu', mouseUpListener);\n  };\n\n  const childProps = {\n    'data-pf-draggable-zone': isDragging ? null : zone,\n    draggable: true,\n    className: css(\n      styles.draggable,\n      isDragging && styles.modifiers.dragging,\n      !isValidDrag && styles.modifiers.dragOutside,\n      className\n    ),\n    onDragStart,\n    onTransitionEnd,\n    style,\n    ...props\n  };\n\n  return (\n    <React.Fragment>\n      {/* Leave behind blank spot per-design */}\n      {isDragging && (\n        <div draggable {...props} style={{ ...styleProp, visibility: 'hidden' }}>\n          {children}\n        </div>\n      )}\n      {hasNoWrapper ? (\n        React.cloneElement(children as React.ReactElement, childProps)\n      ) : (\n        <div {...childProps}>{children}</div>\n      )}\n    </React.Fragment>\n  );\n};\nDraggable.displayName = 'Draggable';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}