{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = _a => {\n  var {\n      data,\n      isNested = false,\n      hasChecks = false,\n      hasBadges = false,\n      hasGuides = false,\n      hasSelectableNodes = false,\n      variant = 'default',\n      defaultAllExpanded = false,\n      allExpanded,\n      icon,\n      expandedIcon,\n      parentItem,\n      onSelect,\n      onCheck,\n      toolbar,\n      activeItems,\n      compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n      className,\n      useMemo\n    } = _a,\n    props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n  const treeViewList = React.createElement(TreeViewList, {\n    isNested: isNested,\n    toolbar: toolbar\n  }, data.map(item => {\n    var _a, _b;\n    return React.createElement(TreeViewListItem, Object.assign({\n      key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()),\n      name: item.name,\n      title: item.title,\n      id: item.id,\n      isExpanded: allExpanded,\n      isSelectable: hasSelectableNodes,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onSelect: onSelect,\n      onCheck: onCheck,\n      hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      customBadgeContent: item.customBadgeContent,\n      badgeProps: item.badgeProps,\n      activeItems: activeItems,\n      parentItem: parentItem,\n      itemData: item,\n      icon: item.icon !== undefined ? item.icon : icon,\n      expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon,\n      action: item.action,\n      compareItems: compareItems,\n      isCompact: variant === 'compact' || variant === 'compactNoBackground',\n      useMemo: useMemo\n    }, item.children && {\n      children: React.createElement(TreeView, {\n        data: item.children,\n        isNested: true,\n        parentItem: item,\n        hasChecks: hasChecks,\n        hasBadges: hasBadges,\n        hasGuides: hasGuides,\n        hasSelectableNodes: hasSelectableNodes,\n        variant: variant,\n        allExpanded: allExpanded,\n        defaultAllExpanded: defaultAllExpanded,\n        onSelect: onSelect,\n        onCheck: onCheck,\n        activeItems: activeItems,\n        icon: icon,\n        expandedIcon: expandedIcon\n      })\n    }));\n  }));\n  return React.createElement(React.Fragment, null, parentItem ? treeViewList : React.createElement(TreeViewRoot, Object.assign({\n    hasSelectableNodes: hasSelectableNodes,\n    hasChecks: hasChecks,\n    hasGuides: hasGuides,\n    variant: variant,\n    className: className\n  }, props), treeViewList));\n};\nTreeView.displayName = 'TreeView';","map":{"version":3,"names":["React","TreeViewList","TreeViewListItem","TreeViewRoot","TreeView","_a","data","isNested","hasChecks","hasBadges","hasGuides","hasSelectableNodes","variant","defaultAllExpanded","allExpanded","icon","expandedIcon","parentItem","onSelect","onCheck","toolbar","activeItems","compareItems","item","itemToCheck","id","className","useMemo","props","__rest","treeViewList","createElement","map","Object","assign","key","toString","_b","name","title","isExpanded","isSelectable","defaultExpanded","undefined","hasCheck","checkProps","hasBadge","customBadgeContent","badgeProps","itemData","action","isCompact","children","Fragment","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\TreeView\\TreeView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewCheckProps, TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\n\n/** Properties that make up a tree view data item. These properties should be passed in as an\n * object to one of the various tree view component properties which accept TreeViewDataItem as\n * a type.\n */\n\nexport interface TreeViewDataItem {\n  /** Action of a tree view item, which can be either a button or dropdown component. */\n  action?: React.ReactNode;\n  /** Additional properties of the tree view item badge. */\n  badgeProps?: any;\n  /** Additional properties of the tree view item checkbox. */\n  checkProps?: TreeViewCheckProps;\n  /** Child nodes of a tree view item. */\n  children?: TreeViewDataItem[];\n  /** Optional prop for a custom badge. */\n  customBadgeContent?: React.ReactNode;\n  /** Flag indicating if node is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Expanded icon of a tree view item. */\n  expandedIcon?: React.ReactNode;\n  /** Flag indicating if a tree view item has a badge. */\n  hasBadge?: boolean;\n  /** Flag indicating if a tree view item has a checkbox. */\n  hasCheck?: boolean;\n  /** Default icon of a tree view item. */\n  icon?: React.ReactNode;\n  /** ID of a tree view item. */\n  id?: string;\n  /** Internal content of a tree view item. */\n  name: React.ReactNode;\n  /** Title of a tree view item. Only used in compact presentations. */\n  title?: React.ReactNode;\n}\n\n/** The main tree view component. */\n\nexport interface TreeViewProps {\n  /** Active items of tree view. */\n  activeItems?: TreeViewDataItem[];\n  /** Sets the expanded state on all tree nodes, overriding default behavior and current\n   * internal state.\n   */\n  allExpanded?: boolean;\n  /** Class to add if not passed a parentItem property. */\n  className?: string;\n  /** Comparison function for determining active items. */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Data of the tree view. */\n  data: TreeViewDataItem[];\n  /** Sets the default expanded behavior. */\n  defaultAllExpanded?: boolean;\n  /** Icon for all expanded node items. */\n  expandedIcon?: React.ReactNode;\n  /** Flag indicating if all nodes in the tree view should have badges. */\n  hasBadges?: boolean;\n  /** Flag indicating if all nodes in the tree view should have checkboxes. */\n  hasChecks?: boolean;\n  /** Flag indicating if the tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Flag indicating if the tree view is nested. */\n  isNested?: boolean;\n  /** Flag indicating that tree nodes should be independently selectable, even when having\n   * children.\n   */\n  hasSelectableNodes?: boolean;\n  /** Icon for all leaf or unexpanded node items. */\n  icon?: React.ReactNode;\n  /** ID of the tree view. */\n  id?: string;\n  /** Callback for item checkbox selection. */\n  onCheck?: (event: React.ChangeEvent<HTMLInputElement>, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Callback for item selection. */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Internal. Parent item of a tree view list item. */\n  parentItem?: TreeViewDataItem;\n  /** Toolbar to display above the tree view. */\n  toolbar?: React.ReactNode;\n  /** Flag indicating the tree view should utilize memoization to help render large data sets.\n   * Setting this property requires that the activeItems property is passed an array containing\n   * every node in the selected item's path.\n   */\n  useMemo?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n}\n\nexport const TreeView: React.FunctionComponent<TreeViewProps> = ({\n  data,\n  isNested = false,\n  hasChecks = false,\n  hasBadges = false,\n  hasGuides = false,\n  hasSelectableNodes = false,\n  variant = 'default',\n  defaultAllExpanded = false,\n  allExpanded,\n  icon,\n  expandedIcon,\n  parentItem,\n  onSelect,\n  onCheck,\n  toolbar,\n  activeItems,\n  compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n  className,\n  useMemo,\n  ...props\n}: TreeViewProps) => {\n  const treeViewList = (\n    <TreeViewList isNested={isNested} toolbar={toolbar}>\n      {data.map(item => (\n        <TreeViewListItem\n          key={item.id?.toString() || item.name?.toString()}\n          name={item.name}\n          title={item.title}\n          id={item.id}\n          isExpanded={allExpanded}\n          isSelectable={hasSelectableNodes}\n          defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n          onSelect={onSelect}\n          onCheck={onCheck}\n          hasCheck={item.hasCheck !== undefined ? item.hasCheck : hasChecks}\n          checkProps={item.checkProps}\n          hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n          customBadgeContent={item.customBadgeContent}\n          badgeProps={item.badgeProps}\n          activeItems={activeItems}\n          parentItem={parentItem}\n          itemData={item}\n          icon={item.icon !== undefined ? item.icon : icon}\n          expandedIcon={item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon}\n          action={item.action}\n          compareItems={compareItems}\n          isCompact={variant === 'compact' || variant === 'compactNoBackground'}\n          useMemo={useMemo}\n          {...(item.children && {\n            children: (\n              <TreeView\n                data={item.children}\n                isNested\n                parentItem={item}\n                hasChecks={hasChecks}\n                hasBadges={hasBadges}\n                hasGuides={hasGuides}\n                hasSelectableNodes={hasSelectableNodes}\n                variant={variant}\n                allExpanded={allExpanded}\n                defaultAllExpanded={defaultAllExpanded}\n                onSelect={onSelect}\n                onCheck={onCheck}\n                activeItems={activeItems}\n                icon={icon}\n                expandedIcon={expandedIcon}\n              />\n            )\n          })}\n        />\n      ))}\n    </TreeViewList>\n  );\n  return (\n    <>\n      {parentItem ? (\n        treeViewList\n      ) : (\n        <TreeViewRoot\n          hasSelectableNodes={hasSelectableNodes}\n          hasChecks={hasChecks}\n          hasGuides={hasGuides}\n          variant={variant}\n          className={className}\n          {...props}\n        >\n          {treeViewList}\n        </TreeViewRoot>\n      )}\n    </>\n  );\n};\n\nTreeView.displayName = 'TreeView';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}