{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormGroup = _a => {\n  var {\n      children = null,\n      className = '',\n      label,\n      labelInfo,\n      labelIcon,\n      isRequired = false,\n      validated = 'default',\n      isInline = false,\n      hasNoPaddingTop = false,\n      isStack = false,\n      helperText,\n      isHelperTextBeforeField = false,\n      helperTextInvalid,\n      helperTextIcon,\n      helperTextInvalidIcon,\n      fieldId,\n      role\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n  const validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  const inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n  const showValidHelperTxt = validationType => validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n  const helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n  const labelContent = React.createElement(React.Fragment, null, React.createElement(LabelComponent, Object.assign({\n    className: css(styles.formLabel)\n  }, !isGroupOrRadioGroup && {\n    htmlFor: fieldId\n  }), React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(GenerateId, null, randomId => React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroup, className)\n  }, role && {\n    role\n  }, isGroupOrRadioGroup && {\n    'aria-labelledby': `${fieldId || randomId}-legend`\n  }, props), label && React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n  }, isGroupOrRadioGroup && {\n    id: `${fieldId || randomId}-legend`\n  }), labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.formGroupLabelMain)\n  }, labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupLabelInfo)\n  }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n  }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay)));\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"names":["React","styles","ASTERISK","css","ValidatedOptions","GenerateId","FormGroup","_a","children","className","label","labelInfo","labelIcon","isRequired","validated","isInline","hasNoPaddingTop","isStack","helperText","isHelperTextBeforeField","helperTextInvalid","helperTextIcon","helperTextInvalidIcon","fieldId","role","props","__rest","validHelperText","createElement","formHelperText","success","modifiers","warning","id","formHelperTextIcon","inValidHelperText","error","showValidHelperTxt","validationType","helperTextToDisplay","isGroupOrRadioGroup","LabelComponent","labelContent","Fragment","Object","assign","formLabel","htmlFor","formLabelText","formLabelRequired","isValidElement","randomId","formGroup","formGroupLabel","info","noPaddingTop","formGroupLabelMain","formGroupLabelInfo","formGroupControl","inline","stack","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Form\\FormGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Additional label information displayed after the label. */\n  labelInfo?: React.ReactNode;\n  /** Sets an icon for the label. For providing additional context. Host element for Popover  */\n  labelIcon?: React.ReactElement;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /**\n   * Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.\n   * If set to error, text color of helper text will be modified to indicate error state.\n   * If set to warning, text color of helper text will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Sets the FormGroupControl to be stacked */\n  isStack?: boolean;\n  /** Removes top spacer from label. */\n  hasNoPaddingTop?: boolean;\n  /** Helper text regarding the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Flag to position the helper text before the field. False by default */\n  isHelperTextBeforeField?: boolean;\n  /** Helper text after the field when the field is invalid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** Icon displayed to the left of the helper text. */\n  helperTextIcon?: React.ReactNode;\n  /** Icon displayed to the left of the helper text when the field is invalid. */\n  helperTextInvalidIcon?: React.ReactNode;\n  /** ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\n   * If only one field is included, its ID attribute and this prop must be the same.\n   */\n  fieldId?: string;\n  /** Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\n   * radio inputs, or pass in \"group\" when the form group contains multiple of any other input type.\n   */\n  role?: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  labelInfo,\n  labelIcon,\n  isRequired = false,\n  validated = 'default',\n  isInline = false,\n  hasNoPaddingTop = false,\n  isStack = false,\n  helperText,\n  isHelperTextBeforeField = false,\n  helperTextInvalid,\n  helperTextIcon,\n  helperTextInvalidIcon,\n  fieldId,\n  role,\n  ...props\n}: FormGroupProps) => {\n  const validHelperText =\n    typeof helperText !== 'string' ? (\n      helperText\n    ) : (\n      <div\n        className={css(\n          styles.formHelperText,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        id={`${fieldId}-helper`}\n        aria-live=\"polite\"\n      >\n        {helperTextIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextIcon}</span>}\n        {helperText}\n      </div>\n    );\n\n  const inValidHelperText =\n    typeof helperTextInvalid !== 'string' ? (\n      helperTextInvalid\n    ) : (\n      <div className={css(styles.formHelperText, styles.modifiers.error)} id={`${fieldId}-helper`} aria-live=\"polite\">\n        {helperTextInvalidIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextInvalidIcon}</span>}\n        {helperTextInvalid}\n      </div>\n    );\n\n  const showValidHelperTxt = (validationType: 'success' | 'warning' | 'error' | 'default') =>\n    validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay =\n    validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n\n  const labelContent = (\n    <React.Fragment>\n      <LabelComponent className={css(styles.formLabel)} {...(!isGroupOrRadioGroup && { htmlFor: fieldId })}>\n        <span className={css(styles.formLabelText)}>{label}</span>\n        {isRequired && (\n          <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n            {' '}\n            {ASTERISK}\n          </span>\n        )}\n      </LabelComponent>{' '}\n      {React.isValidElement(labelIcon) && labelIcon}\n    </React.Fragment>\n  );\n\n  return (\n    <GenerateId>\n      {randomId => (\n        <div\n          className={css(styles.formGroup, className)}\n          {...(role && { role })}\n          {...(isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` })}\n          {...props}\n        >\n          {label && (\n            <div\n              className={css(\n                styles.formGroupLabel,\n                labelInfo && styles.modifiers.info,\n                hasNoPaddingTop && styles.modifiers.noPaddingTop\n              )}\n              {...(isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })}\n            >\n              {labelInfo && (\n                <React.Fragment>\n                  <div className={css(styles.formGroupLabelMain)}>{labelContent}</div>\n                  <div className={css(styles.formGroupLabelInfo)}>{labelInfo}</div>\n                </React.Fragment>\n              )}\n              {!labelInfo && labelContent}\n            </div>\n          )}\n          <div\n            className={css(\n              styles.formGroupControl,\n              isInline && styles.modifiers.inline,\n              isStack && styles.modifiers.stack\n            )}\n          >\n            {isHelperTextBeforeField && helperTextToDisplay}\n            {children}\n            {!isHelperTextBeforeField && helperTextToDisplay}\n          </div>\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nFormGroup.displayName = 'FormGroup';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}