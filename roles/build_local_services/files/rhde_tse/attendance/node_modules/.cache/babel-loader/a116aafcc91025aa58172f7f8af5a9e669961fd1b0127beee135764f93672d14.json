{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/TextInputGroup/text-input-group';\nimport { css } from '@patternfly/react-styles';\nimport { TextInputGroupContext } from './TextInputGroup';\nexport const TextInputGroupMain = _a => {\n  var {\n      children,\n      className,\n      icon,\n      type = 'text',\n      hint,\n      onChange = () => undefined,\n      onFocus,\n      onBlur,\n      'aria-label': ariaLabel = 'Type to filter',\n      value: inputValue,\n      placeholder: inputPlaceHolder,\n      innerRef,\n      name\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"icon\", \"type\", \"hint\", \"onChange\", \"onFocus\", \"onBlur\", 'aria-label', \"value\", \"placeholder\", \"innerRef\", \"name\"]);\n  const {\n    isDisabled\n  } = React.useContext(TextInputGroupContext);\n  const ref = React.useRef(null);\n  const textInputGroupInputInputRef = innerRef || ref;\n  const handleChange = event => {\n    onChange(event, event.currentTarget.value);\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.textInputGroupMain, icon && styles.modifiers.icon, className)\n  }, props), children, React.createElement(\"span\", {\n    className: css(styles.textInputGroupText)\n  }, hint && React.createElement(\"input\", {\n    className: css(styles.textInputGroupTextInput, styles.modifiers.hint),\n    type: \"text\",\n    disabled: true,\n    \"aria-hidden\": \"true\",\n    value: hint\n  }), icon && React.createElement(\"span\", {\n    className: css(styles.textInputGroupIcon)\n  }, icon), React.createElement(\"input\", {\n    ref: textInputGroupInputInputRef,\n    type: type,\n    className: css(styles.textInputGroupTextInput),\n    \"aria-label\": ariaLabel,\n    disabled: isDisabled,\n    onChange: handleChange,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    value: inputValue || '',\n    placeholder: inputPlaceHolder,\n    name: name\n  })));\n};\nTextInputGroupMain.displayName = 'TextInputGroupMain';","map":{"version":3,"names":["React","styles","css","TextInputGroupContext","TextInputGroupMain","_a","children","className","icon","type","hint","onChange","undefined","onFocus","onBlur","ariaLabel","value","inputValue","placeholder","inputPlaceHolder","innerRef","name","props","__rest","isDisabled","useContext","ref","useRef","textInputGroupInputInputRef","handleChange","event","currentTarget","createElement","Object","assign","textInputGroupMain","modifiers","textInputGroupText","textInputGroupTextInput","disabled","textInputGroupIcon","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\TextInputGroup\\TextInputGroupMain.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/TextInputGroup/text-input-group';\nimport { css } from '@patternfly/react-styles';\nimport { TextInputGroupContext } from './TextInputGroup';\n\nexport interface TextInputGroupMainProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Content rendered inside the text input group main div */\n  children?: React.ReactNode;\n  /** Additional classes applied to the text input group main container */\n  className?: string;\n  /** Icon to be shown on the left side of the text input group main container */\n  icon?: React.ReactNode;\n  /** Type that the input accepts. */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** Suggestion that will show up like a placeholder even with text in the input */\n  hint?: string;\n  /** Callback for when there is a change in the input field*/\n  onChange?: (event: React.FormEvent<HTMLInputElement>, value: string) => void;\n  /** Callback for when the input field is focused*/\n  onFocus?: (event?: any) => void;\n  /** Callback for when focus is lost on the input field*/\n  onBlur?: (event?: any) => void;\n  /** Accessibility label for the input */\n  'aria-label'?: string;\n  /** Value for the input */\n  value?: string | number;\n  /** Placeholder value for the input */\n  placeholder?: string;\n  /** A reference object to attach to the input box */\n  innerRef?: React.RefObject<any>;\n  /** Name for the input */\n  name?: string;\n}\n\nexport const TextInputGroupMain: React.FunctionComponent<TextInputGroupMainProps> = ({\n  children,\n  className,\n  icon,\n  type = 'text',\n  hint,\n  onChange = (): any => undefined,\n  onFocus,\n  onBlur,\n  'aria-label': ariaLabel = 'Type to filter',\n  value: inputValue,\n  placeholder: inputPlaceHolder,\n  innerRef,\n  name,\n  ...props\n}: TextInputGroupMainProps) => {\n  const { isDisabled } = React.useContext(TextInputGroupContext);\n  const ref = React.useRef(null);\n  const textInputGroupInputInputRef = innerRef || ref;\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    onChange(event, event.currentTarget.value);\n  };\n\n  return (\n    <div className={css(styles.textInputGroupMain, icon && styles.modifiers.icon, className)} {...props}>\n      {children}\n      <span className={css(styles.textInputGroupText)}>\n        {hint && (\n          <input\n            className={css(styles.textInputGroupTextInput, styles.modifiers.hint)}\n            type=\"text\"\n            disabled\n            aria-hidden=\"true\"\n            value={hint}\n          />\n        )}\n        {icon && <span className={css(styles.textInputGroupIcon)}>{icon}</span>}\n        <input\n          ref={textInputGroupInputInputRef}\n          type={type}\n          className={css(styles.textInputGroupTextInput)}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n          onChange={handleChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          value={inputValue || ''}\n          placeholder={inputPlaceHolder}\n          name={name}\n        />\n      </span>\n    </div>\n  );\n};\n\nTextInputGroupMain.displayName = 'TextInputGroupMain';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,yEAAyE;AAC5F,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,qBAAqB,QAAQ,kBAAkB;AA0CxD,OAAO,MAAMC,kBAAkB,GAAsDC,EAe3D,IAAI;MAfuD;MACnFC,QAAQ;MACRC,SAAS;MACTC,IAAI;MACJC,IAAI,GAAG,MAAM;MACbC,IAAI;MACJC,QAAQ,GAAGA,CAAA,KAAWC,SAAS;MAC/BC,OAAO;MACPC,MAAM;MACN,YAAY,EAAEC,SAAS,GAAG,gBAAgB;MAC1CC,KAAK,EAAEC,UAAU;MACjBC,WAAW,EAAEC,gBAAgB;MAC7BC,QAAQ;MACRC;IAAI,IAAAhB,EAEoB;IADrBiB,KAAK,GAAAC,MAAA,CAAAlB,EAAA,EAd2E,4IAepF,CADS;EAER,MAAM;IAAEmB;EAAU,CAAE,GAAGxB,KAAK,CAACyB,UAAU,CAACtB,qBAAqB,CAAC;EAC9D,MAAMuB,GAAG,GAAG1B,KAAK,CAAC2B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMC,2BAA2B,GAAGR,QAAQ,IAAIM,GAAG;EAEnD,MAAMG,YAAY,GAAIC,KAAwC,IAAI;IAChEnB,QAAQ,CAACmB,KAAK,EAAEA,KAAK,CAACC,aAAa,CAACf,KAAK,CAAC;EAC5C,CAAC;EAED,OACEhB,KAAA,CAAAgC,aAAA,QAAAC,MAAA,CAAAC,MAAA;IAAK3B,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACkC,kBAAkB,EAAE3B,IAAI,IAAIP,MAAM,CAACmC,SAAS,CAAC5B,IAAI,EAAED,SAAS;EAAC,GAAMe,KAAK,GAChGhB,QAAQ,EACTN,KAAA,CAAAgC,aAAA;IAAMzB,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACoC,kBAAkB;EAAC,GAC5C3B,IAAI,IACHV,KAAA,CAAAgC,aAAA;IACEzB,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACqC,uBAAuB,EAAErC,MAAM,CAACmC,SAAS,CAAC1B,IAAI,CAAC;IACrED,IAAI,EAAC,MAAM;IACX8B,QAAQ;IAAA,eACI,MAAM;IAClBvB,KAAK,EAAEN;EAAI,EAEd,EACAF,IAAI,IAAIR,KAAA,CAAAgC,aAAA;IAAMzB,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACuC,kBAAkB;EAAC,GAAGhC,IAAI,CAAQ,EACvER,KAAA,CAAAgC,aAAA;IACEN,GAAG,EAAEE,2BAA2B;IAChCnB,IAAI,EAAEA,IAAI;IACVF,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACqC,uBAAuB,CAAC;IAAA,cAClCvB,SAAS;IACrBwB,QAAQ,EAAEf,UAAU;IACpBb,QAAQ,EAAEkB,YAAY;IACtBhB,OAAO,EAAEA,OAAO;IAChBC,MAAM,EAAEA,MAAM;IACdE,KAAK,EAAEC,UAAU,IAAI,EAAE;IACvBC,WAAW,EAAEC,gBAAgB;IAC7BE,IAAI,EAAEA;EAAI,EACV,CACG,CACH;AAEV,CAAC;AAEDjB,kBAAkB,CAACqC,WAAW,GAAG,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}