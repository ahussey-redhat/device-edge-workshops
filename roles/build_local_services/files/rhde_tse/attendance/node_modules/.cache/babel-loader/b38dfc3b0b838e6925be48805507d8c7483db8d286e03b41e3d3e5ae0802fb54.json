{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { getUniqueId, isElementInView, formatBreakpointMods } from '../../helpers/util';\nimport { TabContent } from './TabContent';\nimport { TabsContextProvider } from './TabsContext';\nimport { OverflowTab } from './OverflowTab';\nimport { Button } from '../Button';\nimport { getOUIAProps, getDefaultOUIAId, canUseDOM } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var TabsComponent;\n(function (TabsComponent) {\n  TabsComponent[\"div\"] = \"div\";\n  TabsComponent[\"nav\"] = \"nav\";\n})(TabsComponent || (TabsComponent = {}));\nconst variantStyle = {\n  default: '',\n  light300: styles.modifiers.colorSchemeLight_300\n};\nexport class Tabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tabList = React.createRef();\n    this.leftScrollButtonRef = React.createRef();\n    this.scrollTimeout = null;\n    this.countOverflowingElements = container => {\n      const elements = Array.from(container.children);\n      return elements.filter(element => !isElementInView(container, element, false)).length;\n    };\n    this.handleScrollButtons = () => {\n      const {\n        isOverflowHorizontal: isOverflowHorizontal\n      } = this.props;\n      // add debounce to the scroll event\n      clearTimeout(this.scrollTimeout);\n      this.scrollTimeout = setTimeout(() => {\n        const container = this.tabList.current;\n        let disableLeftScrollButton = true;\n        let disableRightScrollButton = true;\n        let enableScrollButtons = false;\n        let overflowingTabCount = 0;\n        if (container && !this.props.isVertical && !isOverflowHorizontal) {\n          // get first element and check if it is in view\n          const overflowOnLeft = !isElementInView(container, container.firstChild, false);\n          // get last element and check if it is in view\n          const overflowOnRight = !isElementInView(container, container.lastChild, false);\n          enableScrollButtons = overflowOnLeft || overflowOnRight;\n          disableLeftScrollButton = !overflowOnLeft;\n          disableRightScrollButton = !overflowOnRight;\n        }\n        if (isOverflowHorizontal) {\n          overflowingTabCount = this.countOverflowingElements(container);\n        }\n        this.setState({\n          enableScrollButtons,\n          disableLeftScrollButton,\n          disableRightScrollButton,\n          overflowingTabCount\n        });\n      }, 100);\n    };\n    this.scrollLeft = () => {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      if (this.tabList.current) {\n        const container = this.tabList.current;\n        const childrenArr = Array.from(container.children);\n        let firstElementInView;\n        let lastElementOutOfView;\n        let i;\n        for (i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n      }\n    };\n    this.scrollRight = () => {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      if (this.tabList.current) {\n        const container = this.tabList.current;\n        const childrenArr = Array.from(container.children);\n        let lastElementInView;\n        let firstElementOutOfView;\n        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n      }\n    };\n    this.hideScrollButtons = () => {\n      const {\n        enableScrollButtons,\n        renderScrollButtons,\n        showScrollButtons\n      } = this.state;\n      if (!enableScrollButtons && !showScrollButtons && renderScrollButtons) {\n        this.setState({\n          renderScrollButtons: false\n        });\n      }\n    };\n    this.state = {\n      enableScrollButtons: false,\n      showScrollButtons: false,\n      renderScrollButtons: false,\n      disableLeftScrollButton: true,\n      disableRightScrollButton: true,\n      shownKeys: this.props.defaultActiveKey !== undefined ? [this.props.defaultActiveKey] : [this.props.activeKey],\n      uncontrolledActiveKey: this.props.defaultActiveKey,\n      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,\n      ouiaStateId: getDefaultOUIAId(Tabs.displayName),\n      overflowingTabCount: 0\n    };\n    if (this.props.isVertical && this.props.expandable !== undefined) {\n      if (!this.props.toggleAriaLabel && !this.props.toggleText) {\n        // eslint-disable-next-line no-console\n        console.error('Tabs:', 'toggleAriaLabel or the toggleText prop is required to make the toggle button accessible');\n      }\n    }\n  }\n  handleTabClick(event, eventKey, tabContentRef) {\n    const {\n      shownKeys\n    } = this.state;\n    const {\n      onSelect,\n      defaultActiveKey\n    } = this.props;\n    // if defaultActiveKey Tabs are uncontrolled, set new active key internally\n    if (defaultActiveKey !== undefined) {\n      this.setState({\n        uncontrolledActiveKey: eventKey\n      });\n    } else {\n      onSelect(event, eventKey);\n    }\n    // process any tab content sections outside of the component\n    if (tabContentRef) {\n      React.Children.toArray(this.props.children).map(child => child).filter(child => child.props && child.props.tabContentRef && child.props.tabContentRef.current).forEach(child => child.props.tabContentRef.current.hidden = true);\n      // most recently selected tabContent\n      if (tabContentRef.current) {\n        tabContentRef.current.hidden = false;\n      }\n    }\n    if (this.props.mountOnEnter) {\n      this.setState({\n        shownKeys: shownKeys.concat(eventKey)\n      });\n    }\n  }\n  componentDidMount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.addEventListener('resize', this.handleScrollButtons, false);\n      }\n      // call the handle resize function to check if scroll buttons should be shown\n      this.handleScrollButtons();\n    }\n  }\n  componentWillUnmount() {\n    var _a;\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.removeEventListener('resize', this.handleScrollButtons, false);\n      }\n    }\n    clearTimeout(this.scrollTimeout);\n    (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', this.hideScrollButtons);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      activeKey,\n      mountOnEnter,\n      isOverflowHorizontal,\n      children\n    } = this.props;\n    const {\n      shownKeys,\n      overflowingTabCount,\n      enableScrollButtons\n    } = this.state;\n    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {\n      this.setState({\n        shownKeys: shownKeys.concat(activeKey)\n      });\n    }\n    if (prevProps.children && children && React.Children.toArray(prevProps.children).length !== React.Children.toArray(children).length) {\n      this.handleScrollButtons();\n    }\n    const currentOverflowingTabCount = this.countOverflowingElements(this.tabList.current);\n    if (isOverflowHorizontal && currentOverflowingTabCount) {\n      this.setState({\n        overflowingTabCount: currentOverflowingTabCount + overflowingTabCount\n      });\n    }\n    if (!prevState.enableScrollButtons && enableScrollButtons) {\n      this.setState({\n        renderScrollButtons: true\n      });\n      setTimeout(() => {\n        var _a;\n        (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('transitionend', this.hideScrollButtons);\n        this.setState({\n          showScrollButtons: true\n        });\n      }, 100);\n    } else if (prevState.enableScrollButtons && !enableScrollButtons) {\n      this.setState({\n        showScrollButtons: false\n      });\n    }\n  }\n  render() {\n    var _this = this;\n    const _a = this.props,\n      {\n        className,\n        children,\n        activeKey,\n        defaultActiveKey,\n        id,\n        isFilled,\n        isSecondary,\n        isVertical,\n        isBox,\n        hasBorderBottom,\n        hasSecondaryBorderBottom,\n        leftScrollAriaLabel,\n        rightScrollAriaLabel,\n        'aria-label': ariaLabel,\n        component,\n        ouiaId,\n        ouiaSafe,\n        mountOnEnter,\n        unmountOnExit,\n        usePageInsets,\n        inset,\n        variant,\n        expandable,\n        isExpanded,\n        defaultIsExpanded,\n        toggleText,\n        toggleAriaLabel,\n        addButtonAriaLabel,\n        onToggle,\n        onClose,\n        onAdd,\n        isOverflowHorizontal: isOverflowHorizontal\n      } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"activeKey\", \"defaultActiveKey\", \"id\", \"isFilled\", \"isSecondary\", \"isVertical\", \"isBox\", \"hasBorderBottom\", \"hasSecondaryBorderBottom\", \"leftScrollAriaLabel\", \"rightScrollAriaLabel\", 'aria-label', \"component\", \"ouiaId\", \"ouiaSafe\", \"mountOnEnter\", \"unmountOnExit\", \"usePageInsets\", \"inset\", \"variant\", \"expandable\", \"isExpanded\", \"defaultIsExpanded\", \"toggleText\", \"toggleAriaLabel\", \"addButtonAriaLabel\", \"onToggle\", \"onClose\", \"onAdd\", \"isOverflowHorizontal\"]);\n    const {\n      showScrollButtons,\n      renderScrollButtons,\n      disableLeftScrollButton,\n      disableRightScrollButton,\n      shownKeys,\n      uncontrolledActiveKey,\n      uncontrolledIsExpandedLocal,\n      overflowingTabCount\n    } = this.state;\n    const filteredChildren = React.Children.toArray(children).filter(Boolean).filter(child => !child.props.isHidden);\n    const filteredChildrenWithoutOverflow = filteredChildren.slice(0, filteredChildren.length - overflowingTabCount);\n    const filteredChildrenOverflowing = filteredChildren.slice(filteredChildren.length - overflowingTabCount);\n    const overflowingTabProps = filteredChildrenOverflowing.map(child => child.props);\n    const uniqueId = id || getUniqueId();\n    const Component = component === TabsComponent.nav ? 'nav' : 'div';\n    const localActiveKey = defaultActiveKey !== undefined ? uncontrolledActiveKey : activeKey;\n    const isExpandedLocal = defaultIsExpanded !== undefined ? uncontrolledIsExpandedLocal : isExpanded;\n    /*  Uncontrolled expandable tabs */\n    const toggleTabs = newValue => {\n      if (isExpanded === undefined) {\n        this.setState({\n          uncontrolledIsExpandedLocal: newValue\n        });\n      } else {\n        onToggle(newValue);\n      }\n    };\n    const hasOverflowTab = isOverflowHorizontal && overflowingTabCount > 0;\n    const overflowObjectProps = typeof isOverflowHorizontal === 'object' ? Object.assign({}, isOverflowHorizontal) : {};\n    return React.createElement(TabsContextProvider, {\n      value: {\n        variant,\n        mountOnEnter,\n        unmountOnExit,\n        localActiveKey,\n        uniqueId,\n        handleTabClick: function () {\n          return _this.handleTabClick(...arguments);\n        },\n        handleTabClose: onClose\n      }\n    }, React.createElement(Component, Object.assign({\n      \"aria-label\": ariaLabel,\n      className: css(styles.tabs, isFilled && styles.modifiers.fill, isSecondary && styles.modifiers.secondary, isVertical && styles.modifiers.vertical, isVertical && expandable && formatBreakpointMods(expandable, styles), isVertical && expandable && isExpandedLocal && styles.modifiers.expanded, isBox && styles.modifiers.box, showScrollButtons && styles.modifiers.scrollable, usePageInsets && styles.modifiers.pageInsets, !hasBorderBottom && styles.modifiers.noBorderBottom, hasSecondaryBorderBottom && styles.modifiers.borderBottom, formatBreakpointMods(inset, styles), variantStyle[variant], hasOverflowTab && styles.modifiers.overflow, className)\n    }, getOUIAProps(Tabs.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), {\n      id: id && id\n    }, props), expandable && isVertical && React.createElement(GenerateId, null, randomId => React.createElement(\"div\", {\n      className: css(styles.tabsToggle)\n    }, React.createElement(\"div\", {\n      className: css(styles.tabsToggleButton)\n    }, React.createElement(Button, {\n      onClick: () => toggleTabs(!isExpandedLocal),\n      variant: \"plain\",\n      \"aria-label\": toggleAriaLabel,\n      \"aria-expanded\": isExpandedLocal,\n      id: `${randomId}-button`,\n      \"aria-labelledby\": `${randomId}-text ${randomId}-button`\n    }, React.createElement(\"span\", {\n      className: css(styles.tabsToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"arian-hidden\": \"true\"\n    })), toggleText && React.createElement(\"span\", {\n      className: css('pf-c-tabs__toggle-text'),\n      id: `${randomId}-text`\n    }, toggleText))))), renderScrollButtons && React.createElement(\"button\", {\n      type: \"button\",\n      className: css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary),\n      \"aria-label\": leftScrollAriaLabel,\n      onClick: this.scrollLeft,\n      disabled: disableLeftScrollButton,\n      \"aria-hidden\": disableLeftScrollButton,\n      ref: this.leftScrollButtonRef\n    }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", {\n      className: css(styles.tabsList),\n      ref: this.tabList,\n      onScroll: this.handleScrollButtons,\n      role: \"tablist\"\n    }, isOverflowHorizontal ? filteredChildrenWithoutOverflow : filteredChildren, hasOverflowTab && React.createElement(OverflowTab, Object.assign({\n      overflowingTabs: overflowingTabProps\n    }, overflowObjectProps))), renderScrollButtons && React.createElement(\"button\", {\n      type: \"button\",\n      className: css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary),\n      \"aria-label\": rightScrollAriaLabel,\n      onClick: this.scrollRight,\n      disabled: disableRightScrollButton,\n      \"aria-hidden\": disableRightScrollButton\n    }, React.createElement(AngleRightIcon, null)), onAdd !== undefined && React.createElement(\"span\", {\n      className: css(styles.tabsAdd)\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      \"aria-label\": addButtonAriaLabel || 'Add tab',\n      onClick: onAdd\n    }, React.createElement(PlusIcon, null)))), filteredChildren.filter(child => child.props.children && !(unmountOnExit && child.props.eventKey !== localActiveKey) && !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)).map(child => React.createElement(TabContent, {\n      key: child.props.eventKey,\n      activeKey: localActiveKey,\n      child: child,\n      id: child.props.id || uniqueId,\n      ouiaId: child.props.ouiaId\n    })));\n  }\n}\nTabs.displayName = 'Tabs';\nTabs.defaultProps = {\n  activeKey: 0,\n  onSelect: () => undefined,\n  isFilled: false,\n  isSecondary: false,\n  isVertical: false,\n  isBox: false,\n  hasBorderBottom: true,\n  leftScrollAriaLabel: 'Scroll left',\n  rightScrollAriaLabel: 'Scroll right',\n  component: TabsComponent.div,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  ouiaSafe: true,\n  variant: 'default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: isExpanded => undefined\n};","map":{"version":3,"names":["React","styles","buttonStyles","css","AngleLeftIcon","AngleRightIcon","PlusIcon","getUniqueId","isElementInView","formatBreakpointMods","TabContent","TabsContextProvider","OverflowTab","Button","getOUIAProps","getDefaultOUIAId","canUseDOM","GenerateId","TabsComponent","variantStyle","default","light300","modifiers","colorSchemeLight_300","Tabs","Component","constructor","props","tabList","createRef","leftScrollButtonRef","scrollTimeout","countOverflowingElements","container","elements","Array","from","children","filter","element","length","handleScrollButtons","isOverflowHorizontal","clearTimeout","setTimeout","current","disableLeftScrollButton","disableRightScrollButton","enableScrollButtons","overflowingTabCount","isVertical","overflowOnLeft","firstChild","overflowOnRight","lastChild","setState","scrollLeft","childrenArr","firstElementInView","lastElementOutOfView","i","scrollWidth","scrollRight","lastElementInView","firstElementOutOfView","hideScrollButtons","renderScrollButtons","showScrollButtons","state","shownKeys","defaultActiveKey","undefined","activeKey","uncontrolledActiveKey","uncontrolledIsExpandedLocal","defaultIsExpanded","ouiaStateId","displayName","expandable","toggleAriaLabel","toggleText","console","error","handleTabClick","event","eventKey","tabContentRef","onSelect","Children","toArray","map","child","forEach","hidden","mountOnEnter","concat","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","_a","componentDidUpdate","prevProps","prevState","indexOf","currentOverflowingTabCount","render","_this","className","id","isFilled","isSecondary","isBox","hasBorderBottom","hasSecondaryBorderBottom","leftScrollAriaLabel","rightScrollAriaLabel","ariaLabel","component","ouiaId","ouiaSafe","unmountOnExit","usePageInsets","inset","variant","isExpanded","addButtonAriaLabel","onToggle","onClose","onAdd","__rest","filteredChildren","Boolean","isHidden","filteredChildrenWithoutOverflow","slice","filteredChildrenOverflowing","overflowingTabProps","uniqueId","nav","localActiveKey","isExpandedLocal","toggleTabs","newValue","hasOverflowTab","overflowObjectProps","Object","assign","createElement","value","arguments","handleTabClose","tabs","fill","secondary","vertical","expanded","box","scrollable","pageInsets","noBorderBottom","borderBottom","overflow","randomId","tabsToggle","tabsToggleButton","onClick","tabsToggleIcon","type","tabsScrollButton","disabled","ref","tabsList","onScroll","role","overflowingTabs","tabsAdd","key","defaultProps","div"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Tabs\\Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { getUniqueId, isElementInView, formatBreakpointMods } from '../../helpers/util';\nimport { TabContent } from './TabContent';\nimport { TabProps } from './Tab';\nimport { TabsContextProvider } from './TabsContext';\nimport { OverflowTab } from './OverflowTab';\nimport { Button } from '../Button';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId, canUseDOM } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport enum TabsComponent {\n  div = 'div',\n  nav = 'nav'\n}\n\nexport interface HorizontalOverflowObject {\n  /** Flag which shows the count of overflowing tabs when enabled */\n  showTabCount?: boolean;\n  /** The text which displays when an overflowing tab isn't selected */\n  defaultTitleText?: string;\n  /** The aria label applied to the button which toggles the tab overflow menu */\n  toggleAriaLabel?: string;\n}\n\nexport interface TabsProps extends Omit<React.HTMLProps<HTMLElement | HTMLDivElement>, 'onSelect'>, OUIAProps {\n  /** Content rendered inside the tabs component. Must be React.ReactElement<TabProps>[] */\n  children: React.ReactNode;\n  /** Additional classes added to the tabs */\n  className?: string;\n  /** Tabs background color variant */\n  variant?: 'default' | 'light300';\n  /** The index of the active tab */\n  activeKey?: number | string;\n  /** The index of the default active tab. Set this for uncontrolled Tabs */\n  defaultActiveKey?: number | string;\n  /** Callback to handle tab selection */\n  onSelect?: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void;\n  /** Callback to handle tab closing and adds a basic close button to all tabs. This is overridden by the tab actions property. */\n  onClose?: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void;\n  /** Callback for the add button. Passing this property inserts the add button */\n  onAdd?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  /** Aria-label for the add button */\n  addButtonAriaLabel?: string;\n  /** Uniquely identifies the tabs */\n  id?: string;\n  /** Enables the filled tab list layout */\n  isFilled?: boolean;\n  /** Enables secondary tab styling */\n  isSecondary?: boolean;\n  /** Enables box styling to the tab component */\n  isBox?: boolean;\n  /** Enables vertical tab styling */\n  isVertical?: boolean;\n  /** Enables border bottom tab styling on tabs. Defaults to true. To remove the bottom border, set this prop to false. */\n  hasBorderBottom?: boolean;\n  /** Enables border bottom styling for secondary tabs */\n  hasSecondaryBorderBottom?: boolean;\n  /** Aria-label for the left scroll button */\n  leftScrollAriaLabel?: string;\n  /** Aria-label for the right scroll button */\n  rightScrollAriaLabel?: string;\n  /** Determines what tag is used around the tabs. Use \"nav\" to define the tabs inside a navigation region */\n  component?: 'div' | 'nav';\n  /** Provides an accessible label for the tabs. Labels should be unique for each set of tabs that are present on a page. When component is set to nav, this prop should be defined to differentiate the tabs from other navigation regions on the page. */\n  'aria-label'?: string;\n  /** Waits until the first \"enter\" transition to mount tab children (add them to the DOM) */\n  mountOnEnter?: boolean;\n  /** Unmounts tab children (removes them from the DOM) when they are no longer visible */\n  unmountOnExit?: boolean;\n  /** Flag indicates that the tabs should use page insets. */\n  usePageInsets?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Enable expandable vertical tabs at various breakpoints. (isVertical should be set to true for this to work) */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** Flag to indicate if the vertical tabs are expanded */\n  isExpanded?: boolean;\n  /** Flag indicating the default expanded state for uncontrolled expand/collapse of */\n  defaultIsExpanded?: boolean;\n  /** Text that appears in the expandable toggle */\n  toggleText?: string;\n  /** Aria-label for the expandable toggle */\n  toggleAriaLabel?: string;\n  /** Callback function to toggle the expandable tabs. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** @beta Flag which places overflowing tabs into a menu triggered by the last tab. Additionally an object can be passed with custom settings for the overflow tab. */\n  isOverflowHorizontal?: boolean | HorizontalOverflowObject;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nconst variantStyle = {\n  default: '',\n  light300: styles.modifiers.colorSchemeLight_300\n};\n\ninterface TabsState {\n  /** Used to signal if the scroll buttons should be used  */\n  enableScrollButtons: boolean;\n  /** Used to control if the scroll buttons should be shown to the user via the pf-m-scrollable class */\n  showScrollButtons: boolean;\n  /** Used to control if the scroll buttons should be rendered. Rendering must occur before the scroll buttons are\n   * shown and rendering must be stopped after they stop being shown to preserve CSS transitions.\n   */\n  renderScrollButtons: boolean;\n  disableLeftScrollButton: boolean;\n  disableRightScrollButton: boolean;\n  shownKeys: (string | number)[];\n  uncontrolledActiveKey: number | string;\n  uncontrolledIsExpandedLocal: boolean;\n  ouiaStateId: string;\n  overflowingTabCount: number;\n}\n\nexport class Tabs extends React.Component<TabsProps, TabsState> {\n  static displayName = 'Tabs';\n  tabList = React.createRef<HTMLUListElement>();\n  leftScrollButtonRef = React.createRef<HTMLButtonElement>();\n  constructor(props: TabsProps) {\n    super(props);\n    this.state = {\n      enableScrollButtons: false,\n      showScrollButtons: false,\n      renderScrollButtons: false,\n      disableLeftScrollButton: true,\n      disableRightScrollButton: true,\n      shownKeys: this.props.defaultActiveKey !== undefined ? [this.props.defaultActiveKey] : [this.props.activeKey], // only for mountOnEnter case\n      uncontrolledActiveKey: this.props.defaultActiveKey,\n      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,\n      ouiaStateId: getDefaultOUIAId(Tabs.displayName),\n      overflowingTabCount: 0\n    };\n\n    if (this.props.isVertical && this.props.expandable !== undefined) {\n      if (!this.props.toggleAriaLabel && !this.props.toggleText) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tabs:',\n          'toggleAriaLabel or the toggleText prop is required to make the toggle button accessible'\n        );\n      }\n    }\n  }\n\n  scrollTimeout: NodeJS.Timeout = null;\n\n  static defaultProps: PickOptional<TabsProps> = {\n    activeKey: 0,\n    onSelect: () => undefined as any,\n    isFilled: false,\n    isSecondary: false,\n    isVertical: false,\n    isBox: false,\n    hasBorderBottom: true,\n    leftScrollAriaLabel: 'Scroll left',\n    rightScrollAriaLabel: 'Scroll right',\n    component: TabsComponent.div,\n    mountOnEnter: false,\n    unmountOnExit: false,\n    ouiaSafe: true,\n    variant: 'default',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded): void => undefined\n  };\n\n  handleTabClick(\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    eventKey: number | string,\n    tabContentRef: React.RefObject<any>\n  ) {\n    const { shownKeys } = this.state;\n    const { onSelect, defaultActiveKey } = this.props;\n    // if defaultActiveKey Tabs are uncontrolled, set new active key internally\n    if (defaultActiveKey !== undefined) {\n      this.setState({\n        uncontrolledActiveKey: eventKey\n      });\n    } else {\n      onSelect(event, eventKey);\n    }\n\n    // process any tab content sections outside of the component\n    if (tabContentRef) {\n      React.Children.toArray(this.props.children)\n        .map(child => child as React.ReactElement<TabProps>)\n        .filter(child => child.props && child.props.tabContentRef && child.props.tabContentRef.current)\n        .forEach(child => (child.props.tabContentRef.current.hidden = true));\n      // most recently selected tabContent\n      if (tabContentRef.current) {\n        tabContentRef.current.hidden = false;\n      }\n    }\n    if (this.props.mountOnEnter) {\n      this.setState({\n        shownKeys: shownKeys.concat(eventKey)\n      });\n    }\n  }\n\n  countOverflowingElements = (container: HTMLUListElement) => {\n    const elements = Array.from(container.children);\n    return elements.filter(element => !isElementInView(container, element as HTMLElement, false)).length;\n  };\n\n  handleScrollButtons = () => {\n    const { isOverflowHorizontal: isOverflowHorizontal } = this.props;\n    // add debounce to the scroll event\n    clearTimeout(this.scrollTimeout);\n    this.scrollTimeout = setTimeout(() => {\n      const container = this.tabList.current;\n      let disableLeftScrollButton = true;\n      let disableRightScrollButton = true;\n      let enableScrollButtons = false;\n      let overflowingTabCount = 0;\n\n      if (container && !this.props.isVertical && !isOverflowHorizontal) {\n        // get first element and check if it is in view\n        const overflowOnLeft = !isElementInView(container, container.firstChild as HTMLElement, false);\n\n        // get last element and check if it is in view\n        const overflowOnRight = !isElementInView(container, container.lastChild as HTMLElement, false);\n\n        enableScrollButtons = overflowOnLeft || overflowOnRight;\n\n        disableLeftScrollButton = !overflowOnLeft;\n        disableRightScrollButton = !overflowOnRight;\n      }\n\n      if (isOverflowHorizontal) {\n        overflowingTabCount = this.countOverflowingElements(container);\n      }\n\n      this.setState({\n        enableScrollButtons,\n        disableLeftScrollButton,\n        disableRightScrollButton,\n        overflowingTabCount\n      });\n    }, 100);\n  };\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    if (this.tabList.current) {\n      const container = this.tabList.current;\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: any;\n      let lastElementOutOfView: any;\n      let i;\n      for (i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n    }\n  };\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    if (this.tabList.current) {\n      const container = this.tabList.current as any;\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: any;\n      let firstElementOutOfView: any;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n    }\n  };\n\n  hideScrollButtons = () => {\n    const { enableScrollButtons, renderScrollButtons, showScrollButtons } = this.state;\n    if (!enableScrollButtons && !showScrollButtons && renderScrollButtons) {\n      this.setState({ renderScrollButtons: false });\n    }\n  };\n\n  componentDidMount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.addEventListener('resize', this.handleScrollButtons, false);\n      }\n      // call the handle resize function to check if scroll buttons should be shown\n      this.handleScrollButtons();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.removeEventListener('resize', this.handleScrollButtons, false);\n      }\n    }\n    clearTimeout(this.scrollTimeout);\n    this.leftScrollButtonRef.current?.removeEventListener('transitionend', this.hideScrollButtons);\n  }\n\n  componentDidUpdate(prevProps: TabsProps, prevState: TabsState) {\n    const { activeKey, mountOnEnter, isOverflowHorizontal, children } = this.props;\n    const { shownKeys, overflowingTabCount, enableScrollButtons } = this.state;\n    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {\n      this.setState({\n        shownKeys: shownKeys.concat(activeKey)\n      });\n    }\n\n    if (\n      prevProps.children &&\n      children &&\n      React.Children.toArray(prevProps.children).length !== React.Children.toArray(children).length\n    ) {\n      this.handleScrollButtons();\n    }\n\n    const currentOverflowingTabCount = this.countOverflowingElements(this.tabList.current);\n    if (isOverflowHorizontal && currentOverflowingTabCount) {\n      this.setState({ overflowingTabCount: currentOverflowingTabCount + overflowingTabCount });\n    }\n\n    if (!prevState.enableScrollButtons && enableScrollButtons) {\n      this.setState({ renderScrollButtons: true });\n      setTimeout(() => {\n        this.leftScrollButtonRef.current?.addEventListener('transitionend', this.hideScrollButtons);\n        this.setState({ showScrollButtons: true });\n      }, 100);\n    } else if (prevState.enableScrollButtons && !enableScrollButtons) {\n      this.setState({ showScrollButtons: false });\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      activeKey,\n      defaultActiveKey,\n      id,\n      isFilled,\n      isSecondary,\n      isVertical,\n      isBox,\n      hasBorderBottom,\n      hasSecondaryBorderBottom,\n      leftScrollAriaLabel,\n      rightScrollAriaLabel,\n      'aria-label': ariaLabel,\n      component,\n      ouiaId,\n      ouiaSafe,\n      mountOnEnter,\n      unmountOnExit,\n      usePageInsets,\n      inset,\n      variant,\n      expandable,\n      isExpanded,\n      defaultIsExpanded,\n      toggleText,\n      toggleAriaLabel,\n      addButtonAriaLabel,\n      onToggle,\n      onClose,\n      onAdd,\n      isOverflowHorizontal: isOverflowHorizontal,\n      ...props\n    } = this.props;\n    const {\n      showScrollButtons,\n      renderScrollButtons,\n      disableLeftScrollButton,\n      disableRightScrollButton,\n      shownKeys,\n      uncontrolledActiveKey,\n      uncontrolledIsExpandedLocal,\n      overflowingTabCount\n    } = this.state;\n    const filteredChildren = (React.Children.toArray(children) as React.ReactElement<TabProps>[])\n      .filter(Boolean)\n      .filter(child => !child.props.isHidden);\n\n    const filteredChildrenWithoutOverflow = filteredChildren.slice(0, filteredChildren.length - overflowingTabCount);\n    const filteredChildrenOverflowing = filteredChildren.slice(filteredChildren.length - overflowingTabCount);\n    const overflowingTabProps = filteredChildrenOverflowing.map((child: React.ReactElement<TabProps>) => child.props);\n\n    const uniqueId = id || getUniqueId();\n    const Component: any = component === TabsComponent.nav ? 'nav' : 'div';\n    const localActiveKey = defaultActiveKey !== undefined ? uncontrolledActiveKey : activeKey;\n\n    const isExpandedLocal = defaultIsExpanded !== undefined ? uncontrolledIsExpandedLocal : isExpanded;\n    /*  Uncontrolled expandable tabs */\n    const toggleTabs = (newValue: boolean) => {\n      if (isExpanded === undefined) {\n        this.setState({ uncontrolledIsExpandedLocal: newValue });\n      } else {\n        onToggle(newValue);\n      }\n    };\n\n    const hasOverflowTab = isOverflowHorizontal && overflowingTabCount > 0;\n    const overflowObjectProps = typeof isOverflowHorizontal === 'object' ? { ...isOverflowHorizontal } : {};\n\n    return (\n      <TabsContextProvider\n        value={{\n          variant,\n          mountOnEnter,\n          unmountOnExit,\n          localActiveKey,\n          uniqueId,\n          handleTabClick: (...args) => this.handleTabClick(...args),\n          handleTabClose: onClose\n        }}\n      >\n        <Component\n          aria-label={ariaLabel}\n          className={css(\n            styles.tabs,\n            isFilled && styles.modifiers.fill,\n            isSecondary && styles.modifiers.secondary,\n            isVertical && styles.modifiers.vertical,\n            isVertical && expandable && formatBreakpointMods(expandable, styles),\n            isVertical && expandable && isExpandedLocal && styles.modifiers.expanded,\n            isBox && styles.modifiers.box,\n            showScrollButtons && styles.modifiers.scrollable,\n            usePageInsets && styles.modifiers.pageInsets,\n            !hasBorderBottom && styles.modifiers.noBorderBottom,\n            hasSecondaryBorderBottom && styles.modifiers.borderBottom,\n            formatBreakpointMods(inset, styles),\n            variantStyle[variant],\n            hasOverflowTab && styles.modifiers.overflow,\n            className\n          )}\n          {...getOUIAProps(Tabs.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n          id={id && id}\n          {...props}\n        >\n          {expandable && isVertical && (\n            <GenerateId>\n              {randomId => (\n                <div className={css(styles.tabsToggle)}>\n                  <div className={css(styles.tabsToggleButton)}>\n                    <Button\n                      onClick={() => toggleTabs(!isExpandedLocal)}\n                      variant=\"plain\"\n                      aria-label={toggleAriaLabel}\n                      aria-expanded={isExpandedLocal}\n                      id={`${randomId}-button`}\n                      aria-labelledby={`${randomId}-text ${randomId}-button`}\n                    >\n                      <span className={css(styles.tabsToggleIcon)}>\n                        <AngleRightIcon arian-hidden=\"true\" />\n                      </span>\n                      {toggleText && (\n                        <span className={css('pf-c-tabs__toggle-text')} id={`${randomId}-text`}>\n                          {toggleText}\n                        </span>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </GenerateId>\n          )}\n          {renderScrollButtons && (\n            <button\n              type=\"button\"\n              className={css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary)}\n              aria-label={leftScrollAriaLabel}\n              onClick={this.scrollLeft}\n              disabled={disableLeftScrollButton}\n              aria-hidden={disableLeftScrollButton}\n              ref={this.leftScrollButtonRef}\n            >\n              <AngleLeftIcon />\n            </button>\n          )}\n          <ul className={css(styles.tabsList)} ref={this.tabList} onScroll={this.handleScrollButtons} role=\"tablist\">\n            {isOverflowHorizontal ? filteredChildrenWithoutOverflow : filteredChildren}\n            {hasOverflowTab && <OverflowTab overflowingTabs={overflowingTabProps} {...overflowObjectProps} />}\n          </ul>\n          {renderScrollButtons && (\n            <button\n              type=\"button\"\n              className={css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary)}\n              aria-label={rightScrollAriaLabel}\n              onClick={this.scrollRight}\n              disabled={disableRightScrollButton}\n              aria-hidden={disableRightScrollButton}\n            >\n              <AngleRightIcon />\n            </button>\n          )}\n          {onAdd !== undefined && (\n            <span className={css(styles.tabsAdd)}>\n              <Button variant=\"plain\" aria-label={addButtonAriaLabel || 'Add tab'} onClick={onAdd}>\n                <PlusIcon />\n              </Button>\n            </span>\n          )}\n        </Component>\n        {filteredChildren\n          .filter(\n            child =>\n              child.props.children &&\n              !(unmountOnExit && child.props.eventKey !== localActiveKey) &&\n              !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)\n          )\n          .map(child => (\n            <TabContent\n              key={child.props.eventKey}\n              activeKey={localActiveKey}\n              child={child}\n              id={child.props.id || uniqueId}\n              ouiaId={child.props.ouiaId}\n            />\n          ))}\n      </TabsContextProvider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}