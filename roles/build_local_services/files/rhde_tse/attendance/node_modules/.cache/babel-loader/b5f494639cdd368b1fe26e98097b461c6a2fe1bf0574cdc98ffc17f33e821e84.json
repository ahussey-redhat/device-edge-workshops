{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nexport const MultipleFileUploadContext = React.createContext({\n  open: () => {}\n});\nexport const MultipleFileUpload = _a => {\n  var {\n      className,\n      children,\n      dropzoneProps = {},\n      isHorizontal,\n      onFileDrop = () => {}\n    } = _a,\n    props = __rest(_a, [\"className\", \"children\", \"dropzoneProps\", \"isHorizontal\", \"onFileDrop\"]);\n  const onDropAccepted = (acceptedFiles, event) => {\n    onFileDrop(acceptedFiles);\n    // allow users to set a custom drop accepted handler rather than using on data change\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n  const onDropRejected = (rejectedFiles, event) => {\n    dropzoneProps.onDropRejected && (dropzoneProps === null || dropzoneProps === void 0 ? void 0 : dropzoneProps.onDropRejected(rejectedFiles, event));\n  };\n  return React.createElement(Dropzone, Object.assign({\n    multiple: true\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), _ref => {\n    let {\n      getRootProps,\n      getInputProps,\n      isDragActive,\n      open\n    } = _ref;\n    const rootProps = getRootProps(Object.assign(Object.assign({}, props), {\n      onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n    }));\n\n    const inputProps = getInputProps();\n    return React.createElement(MultipleFileUploadContext.Provider, {\n      value: {\n        open\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.multipleFileUpload, isDragActive && styles.modifiers.dragOver, isHorizontal && styles.modifiers.horizontal, className)\n    }, rootProps, props), React.createElement(\"input\", Object.assign({}, inputProps)), children));\n  });\n};\nMultipleFileUpload.displayName = 'MultipleFileUpload';","map":{"version":3,"names":["React","Dropzone","styles","css","MultipleFileUploadContext","createContext","open","MultipleFileUpload","_a","className","children","dropzoneProps","isHorizontal","onFileDrop","props","__rest","onDropAccepted","acceptedFiles","event","onDropRejected","rejectedFiles","createElement","Object","assign","multiple","_ref","getRootProps","getInputProps","isDragActive","rootProps","onClick","preventDefault","inputProps","Provider","value","multipleFileUpload","modifiers","dragOver","horizontal","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\MultipleFileUpload\\MultipleFileUpload.tsx"],"sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropFileEventHandler } from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\n\n/** Acts as a container for all other MultipleFileUpload sub-components. This sub-component\n * also provides the functionality for file uploads, and access to the uploaded files via\n * a callback.\n */\n\nexport interface MultipleFileUploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value'> {\n  /** Content rendered inside the multi upload field */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneProps;\n  /** Flag setting the component to horizontal styling mode */\n  isHorizontal?: boolean;\n  /** When files are dropped or uploaded this callback will be called with all accepted files */\n  onFileDrop?: (data: File[]) => void;\n}\n\nexport const MultipleFileUploadContext = React.createContext({\n  open: () => {}\n});\n\nexport const MultipleFileUpload: React.FunctionComponent<MultipleFileUploadProps> = ({\n  className,\n  children,\n  dropzoneProps = {},\n  isHorizontal,\n  onFileDrop = () => {},\n  ...props\n}: MultipleFileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles: File[], event) => {\n    onFileDrop(acceptedFiles);\n    // allow users to set a custom drop accepted handler rather than using on data change\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    dropzoneProps.onDropRejected && dropzoneProps?.onDropRejected(rejectedFiles, event);\n  };\n\n  return (\n    <Dropzone multiple={true} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const rootProps = getRootProps({\n          ...props,\n          onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n        });\n        const inputProps = getInputProps();\n\n        return (\n          <MultipleFileUploadContext.Provider value={{ open }}>\n            <div\n              className={css(\n                styles.multipleFileUpload,\n                isDragActive && styles.modifiers.dragOver,\n                isHorizontal && styles.modifiers.horizontal,\n                className\n              )}\n              {...rootProps}\n              {...props}\n            >\n              <input\n                /* hidden, necessary for react-dropzone */\n                {...inputProps}\n              />\n              {children}\n            </div>\n          </MultipleFileUploadContext.Provider>\n        );\n      }}\n    </Dropzone>\n  );\n};\n\nMultipleFileUpload.displayName = 'MultipleFileUpload';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAiD,MAAM,gBAAgB;AAC9E,OAAOC,MAAM,MAAM,iFAAiF;AACpG,SAASC,GAAG,QAAQ,0BAA0B;AAoB9C,OAAO,MAAMC,yBAAyB,GAAGJ,KAAK,CAACK,aAAa,CAAC;EAC3DC,IAAI,EAAEA,CAAA,KAAK,CAAE;CACd,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAsDC,EAO3D,IAAI;MAPuD;MACnFC,SAAS;MACTC,QAAQ;MACRC,aAAa,GAAG,EAAE;MAClBC,YAAY;MACZC,UAAU,GAAGA,CAAA,KAAK,CAAE;IAAC,IAAAL,EAEG;IADrBM,KAAK,GAAAC,MAAA,CAAAP,EAAA,EAN2E,wEAOpF,CADS;EAER,MAAMQ,cAAc,GAAyBA,CAACC,aAAqB,EAAEC,KAAK,KAAI;IAC5EL,UAAU,CAACI,aAAa,CAAC;IACzB;IACAN,aAAa,CAACK,cAAc,IAAIL,aAAa,CAACK,cAAc,CAACC,aAAa,EAAEC,KAAK,CAAC;EACpF,CAAC;EAED,MAAMC,cAAc,GAAyBA,CAACC,aAAa,EAAEF,KAAK,KAAI;IACpEP,aAAa,CAACQ,cAAc,KAAIR,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEQ,cAAc,CAACC,aAAa,EAAEF,KAAK,CAAC;EACrF,CAAC;EAED,OACElB,KAAA,CAAAqB,aAAA,CAACpB,QAAQ,EAAAqB,MAAA,CAAAC,MAAA;IAACC,QAAQ,EAAE;EAAI,GAAMb,aAAa;IAAEK,cAAc,EAAEA,cAAc;IAAEG,cAAc,EAAEA;EAAc,IACxGM,IAAA,IAAwD;IAAA,IAAvD;MAAEC,YAAY;MAAEC,aAAa;MAAEC,YAAY;MAAEtB;IAAI,CAAE,GAAAmB,IAAA;IACnD,MAAMI,SAAS,GAAGH,YAAY,CAAAJ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACzBT,KAAK;MACRgB,OAAO,EAAEZ,KAAK,IAAIA,KAAK,CAACa,cAAc,EAAE,CAAC;OACzC;;IACF,MAAMC,UAAU,GAAGL,aAAa,EAAE;IAElC,OACE3B,KAAA,CAAAqB,aAAA,CAACjB,yBAAyB,CAAC6B,QAAQ;MAACC,KAAK,EAAE;QAAE5B;MAAI;IAAE,GACjDN,KAAA,CAAAqB,aAAA,QAAAC,MAAA,CAAAC,MAAA;MACEd,SAAS,EAAEN,GAAG,CACZD,MAAM,CAACiC,kBAAkB,EACzBP,YAAY,IAAI1B,MAAM,CAACkC,SAAS,CAACC,QAAQ,EACzCzB,YAAY,IAAIV,MAAM,CAACkC,SAAS,CAACE,UAAU,EAC3C7B,SAAS;IACV,GACGoB,SAAS,EACTf,KAAK,GAETd,KAAA,CAAAqB,aAAA,UAAAC,MAAA,CAAAC,MAAA,KAEMS,UAAU,EACd,EACDtB,QAAQ,CACL,CAC6B;EAEzC,CAAC,CACQ;AAEf,CAAC;AAEDH,kBAAkB,CAACgC,WAAW,GAAG,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}