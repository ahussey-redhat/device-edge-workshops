{"ast":null,"code":"import { __awaiter, __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\nexport const FileUpload = _a => {\n  var {\n      id,\n      type,\n      value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n      filename = '',\n      children = null,\n      onChange = () => {},\n      onFileInputChange = null,\n      onReadStarted = () => {},\n      onReadFinished = () => {},\n      onReadFailed = () => {},\n      onClearClick,\n      onClick = event => event.preventDefault(),\n      onTextChange,\n      onDataChange,\n      dropzoneProps = {}\n    } = _a,\n    props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onFileInputChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"onClearClick\", \"onClick\", \"onTextChange\", \"onDataChange\", \"dropzoneProps\"]);\n  const onDropAccepted = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n      if (event.type === 'drop') {\n        onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type).then(data => {\n          onReadFinished(fileHandle);\n          onChange(data, fileHandle.name, event);\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(data);\n        }).catch(error => {\n          onReadFailed(error, fileHandle);\n          onReadFinished(fileHandle);\n          onChange('', '', event); // Clear the filename field on a failure\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange('');\n        });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n  const onDropRejected = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n  const fileInputRef = React.useRef();\n  const setFileValue = filename => {\n    fileInputRef.current.value = filename;\n  };\n  const onClearButtonClick = event => {\n    onChange('', '', event);\n    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);\n    setFileValue(null);\n  };\n  return React.createElement(Dropzone, Object.assign({\n    multiple: false\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), _ref => {\n    let {\n      getRootProps,\n      getInputProps,\n      isDragActive,\n      open\n    } = _ref;\n    const oldInputProps = getInputProps();\n    const inputProps = Object.assign(Object.assign({}, oldInputProps), {\n      onChange: e => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        (_a = oldInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(oldInputProps, e);\n        const files = yield fromEvent(e.nativeEvent);\n        if (files.length === 1) {\n          onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);\n        }\n      })\n    });\n    return React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), {\n      refKey: 'containerRef',\n      onClick: event => event.preventDefault()\n    })), {\n      tabIndex: null,\n      id: id,\n      type: type,\n      filename: filename,\n      value: value,\n      onChange: onChange,\n      isDragActive: isDragActive,\n      onBrowseButtonClick: open,\n      onClearButtonClick: onClearButtonClick,\n      onTextAreaClick: onClick,\n      onTextChange: onTextChange\n    }), React.createElement(\"input\", Object.assign({}, inputProps, {\n      ref: input => {\n        fileInputRef.current = input;\n        inputProps.ref(input);\n      }\n    })), children);\n  });\n};\nFileUpload.displayName = 'FileUpload';","map":{"version":3,"names":["React","Dropzone","FileUploadField","readFile","fileReaderType","fromEvent","FileUpload","_a","id","type","value","text","dataURL","filename","children","onChange","onFileInputChange","onReadStarted","onReadFinished","onReadFailed","onClearClick","onClick","event","preventDefault","onTextChange","onDataChange","dropzoneProps","props","__rest","onDropAccepted","acceptedFiles","length","fileHandle","name","then","data","catch","error","onDropRejected","rejectedFiles","fileInputRef","useRef","setFileValue","current","onClearButtonClick","createElement","Object","assign","multiple","_ref","getRootProps","getInputProps","isDragActive","open","oldInputProps","inputProps","e","__awaiter","call","files","nativeEvent","refKey","tabIndex","onBrowseButtonClick","onTextAreaClick","ref","input","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\FileUpload\\FileUpload.tsx"],"sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropzoneInputProps, DropFileEventHandler } from 'react-dropzone';\nimport { FileUploadField, FileUploadFieldProps } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\n\ninterface DropzoneInputPropsWithRef extends DropzoneInputProps {\n  ref: React.RefCallback<HTMLInputElement>; // Working around an issue in react-dropzone 9.0.0's types. Should not be necessary in later versions.\n}\n\n/** The main file upload component with drag and drop functionality built in by default. */\n\nexport interface FileUploadProps\n  extends Omit<\n    FileUploadFieldProps,\n    'children' | 'onBrowseButtonClick' | 'onClearButtonClick' | 'isDragActive' | 'containerRef'\n  > {\n  /** Flag to allow editing of a text file's contents after it is selected from disk. */\n  allowEditingUploadedText?: boolean;\n  /** Aria-label for the text area. */\n  'aria-label'?: string;\n  /** Text for the browse button. */\n  browseButtonText?: string;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n  /** Additional classes added to the file upload container element. */\n  className?: string;\n  /** Text for the clear button. */\n  clearButtonText?: string;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** Aria-label for the read-only filename field. */\n  filenameAriaLabel?: string;\n  /** Placeholder string to display in the empty filename field. */\n  filenamePlaceholder?: string;\n  /** Flag to hide the built-in preview of the file (where available). If true, you can use\n   * the children property to render an alternate preview.\n   */\n  hideDefaultPreview?: boolean;\n  /** Unique id for the text area. Also used to generate ids for accessible labels. */\n  id: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** @deprecated A callback for when the file contents changes. Please instead use\n   * onFileInputChange, onTextChange, onDataChange, and onClearClick individually.\n   */\n  onChange?: (\n    value: string | File,\n    filename: string,\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // Clear button was clicked\n      | React.DragEvent<HTMLElement> // User dragged/dropped a file\n      | React.ChangeEvent<HTMLElement> // User typed in the TextArea\n  ) => void;\n  /** Callback for clicking on the file upload field text area. By default, prevents a click\n   * in the text area from opening file dialog.\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component  */\n  onFileInputChange?: (event: React.ChangeEvent<HTMLInputElement> | React.DragEvent<HTMLElement>, file: File) => void;\n  /** Aria-valuetext for the loading spinner. */\n  spinnerAriaValueText?: string;\n  /** What type of file. Determines what is passed to the onChange property and what is\n   * expected by the value property (a string for 'text' and 'dataURL', or a File object otherwise.\n   */\n  type?: 'text' | 'dataURL';\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error, field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Value of the file's contents (string if text file, File object otherwise). */\n  value?: string | File;\n\n  // Props available in FileUpload but not FileUploadField:\n\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: Partial<DropzoneProps>;\n  /** Clear button was clicked. */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n  /** On data changed - if type='text' or type='dataURL' and file was loaded it will call this method */\n  onDataChange?: (data: string) => void;\n  /** A callback for when the FileReader API fails. */\n  onReadFailed?: (error: DOMException, fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading. */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when a selected file starts loading. */\n  onReadStarted?: (fileHandle: File) => void;\n  /** Text area text changed. */\n  onTextChange?: (text: string) => void;\n}\n\nexport const FileUpload: React.FunctionComponent<FileUploadProps> = ({\n  id,\n  type,\n  value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n  filename = '',\n  children = null,\n  onChange = () => {},\n  onFileInputChange = null,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadFailed = () => {},\n  onClearClick,\n  onClick = event => event.preventDefault(),\n  onTextChange,\n  onDataChange,\n  dropzoneProps = {},\n  ...props\n}: FileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n      if (event.type === 'drop') {\n        onFileInputChange?.(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type as fileReaderType)\n          .then(data => {\n            onReadFinished(fileHandle);\n            onChange(data as string, fileHandle.name, event);\n            onDataChange?.(data as string);\n          })\n          .catch((error: DOMException) => {\n            onReadFailed(error, fileHandle);\n            onReadFinished(fileHandle);\n            onChange('', '', event); // Clear the filename field on a failure\n            onDataChange?.('');\n          });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  const fileInputRef = React.useRef<HTMLInputElement>();\n  const setFileValue = (filename: string) => {\n    fileInputRef.current.value = filename;\n  };\n\n  const onClearButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    onChange('', '', event);\n    onClearClick?.(event);\n    setFileValue(null);\n  };\n\n  return (\n    <Dropzone multiple={false} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const oldInputProps = getInputProps();\n        const inputProps: DropzoneInputProps = {\n          ...oldInputProps,\n          onChange: async (e: React.ChangeEvent<HTMLInputElement>) => {\n            oldInputProps.onChange?.(e);\n            const files = await fromEvent(e.nativeEvent);\n            if (files.length === 1) {\n              onFileInputChange?.(e, files[0] as File);\n            }\n          }\n        };\n\n        return (\n          <FileUploadField\n            {...getRootProps({\n              ...props,\n              refKey: 'containerRef',\n              onClick: event => event.preventDefault()\n            })}\n            tabIndex={null} // Omit the unwanted tabIndex from react-dropzone's getRootProps\n            id={id}\n            type={type}\n            filename={filename}\n            value={value}\n            onChange={onChange}\n            isDragActive={isDragActive}\n            onBrowseButtonClick={open}\n            onClearButtonClick={onClearButtonClick}\n            onTextAreaClick={onClick}\n            onTextChange={onTextChange}\n          >\n            <input\n              /* hidden, necessary for react-dropzone */\n              {...inputProps}\n              ref={input => {\n                fileInputRef.current = input;\n                (inputProps as DropzoneInputPropsWithRef).ref(input);\n              }}\n            />\n            {children}\n          </FileUploadField>\n        );\n      }}\n    </Dropzone>\n  );\n};\nFileUpload.displayName = 'FileUpload';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}