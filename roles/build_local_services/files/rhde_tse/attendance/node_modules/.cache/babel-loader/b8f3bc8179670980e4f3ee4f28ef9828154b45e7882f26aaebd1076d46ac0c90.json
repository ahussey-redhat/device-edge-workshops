{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nexport class ClipboardCopyExpanded extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const _a = this.props,\n      {\n        className,\n        children,\n        onChange,\n        isReadOnly,\n        isCode\n      } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"onChange\", \"isReadOnly\", \"isCode\"]);\n    return React.createElement(\"div\", Object.assign({\n      suppressContentEditableWarning: true,\n      className: css(styles.clipboardCopyExpandableContent, className),\n      onInput: e => onChange(e.target.innerText, e),\n      contentEditable: !isReadOnly\n    }, props), isCode ? React.createElement(\"pre\", null, children) : children);\n  }\n}\nClipboardCopyExpanded.displayName = 'ClipboardCopyExpanded';\nClipboardCopyExpanded.defaultProps = {\n  onChange: () => undefined,\n  className: '',\n  isReadOnly: false,\n  isCode: false\n};","map":{"version":3,"names":["React","styles","css","ClipboardCopyExpanded","Component","constructor","props","render","_a","className","children","onChange","isReadOnly","isCode","__rest","createElement","Object","assign","suppressContentEditableWarning","clipboardCopyExpandableContent","onInput","e","target","innerText","contentEditable","displayName","defaultProps","undefined"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\ClipboardCopy\\ClipboardCopyExpanded.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { ClipboardCopyProps } from './ClipboardCopy';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ClipboardCopyExpandedProps extends Omit<ClipboardCopyProps, 'onChange'> {\n  className?: string;\n  children: React.ReactNode;\n  onChange?: (text: string, e: React.FormEvent<HTMLDivElement>) => void;\n  isReadOnly?: boolean;\n  isCode?: boolean;\n}\n\nexport class ClipboardCopyExpanded extends React.Component<ClipboardCopyExpandedProps> {\n  static displayName = 'ClipboardCopyExpanded';\n  constructor(props: any) {\n    super(props);\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyExpandedProps> = {\n    onChange: (): any => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n  };\n\n  render() {\n    const { className, children, onChange, isReadOnly, isCode, ...props } = this.props;\n\n    return (\n      <div\n        suppressContentEditableWarning\n        className={css(styles.clipboardCopyExpandableContent, className)}\n        onInput={(e: any) => onChange(e.target.innerText, e)}\n        contentEditable={!isReadOnly}\n        {...props}\n      >\n        {isCode ? <pre>{children}</pre> : children}\n      </div>\n    );\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,sEAAsE;AACzF,SAASC,GAAG,QAAQ,0BAA0B;AAY9C,OAAM,MAAOC,qBAAsB,SAAQH,KAAK,CAACI,SAAqC;EAEpFC,YAAYC,KAAU;IACpB,KAAK,CAACA,KAAK,CAAC;EACd;EASAC,MAAMA,CAAA;IACJ,MAAMC,EAAA,GAAkE,IAAI,CAACF,KAAK;MAA5E;QAAEG,SAAS;QAAEC,QAAQ;QAAEC,QAAQ;QAAEC,UAAU;QAAEC;MAAM,IAAAL,EAAyB;MAApBF,KAAK,GAAAQ,MAAA,CAAAN,EAAA,EAA7D,6DAA+D,CAAa;IAElF,OACER,KAAA,CAAAe,aAAA,QAAAC,MAAA,CAAAC,MAAA;MACEC,8BAA8B;MAC9BT,SAAS,EAAEP,GAAG,CAACD,MAAM,CAACkB,8BAA8B,EAAEV,SAAS,CAAC;MAChEW,OAAO,EAAGC,CAAM,IAAKV,QAAQ,CAACU,CAAC,CAACC,MAAM,CAACC,SAAS,EAAEF,CAAC,CAAC;MACpDG,eAAe,EAAE,CAACZ;IAAU,GACxBN,KAAK,GAERO,MAAM,GAAGb,KAAA,CAAAe,aAAA,cAAML,QAAQ,CAAO,GAAGA,QAAQ,CACtC;EAEV;;AA1BOP,qBAAA,CAAAsB,WAAW,GAAG,uBAAuB;AAKrCtB,qBAAA,CAAAuB,YAAY,GAA6C;EAC9Df,QAAQ,EAAEA,CAAA,KAAWgB,SAAS;EAC9BlB,SAAS,EAAE,EAAE;EACbG,UAAU,EAAE,KAAK;EACjBC,MAAM,EAAE;CACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}