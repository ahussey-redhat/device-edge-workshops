{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var TimestampFormat;\n(function (TimestampFormat) {\n  TimestampFormat[\"full\"] = \"full\";\n  TimestampFormat[\"long\"] = \"long\";\n  TimestampFormat[\"medium\"] = \"medium\";\n  TimestampFormat[\"short\"] = \"short\";\n})(TimestampFormat || (TimestampFormat = {}));\nexport var TimestampTooltipVariant;\n(function (TimestampTooltipVariant) {\n  TimestampTooltipVariant[\"default\"] = \"default\";\n  TimestampTooltipVariant[\"custom\"] = \"custom\";\n})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));\nexport const Timestamp = _a => {\n  var {\n      children,\n      className,\n      customFormat,\n      date: dateProp,\n      dateFormat,\n      displaySuffix = '',\n      is12Hour,\n      locale,\n      timeFormat,\n      tooltip\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"customFormat\", \"date\", \"dateFormat\", \"displaySuffix\", \"is12Hour\", \"locale\", \"timeFormat\", \"tooltip\"]);\n  const [date, setDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    }\n    return new Date();\n  });\n  React.useEffect(() => {\n    const dateFromProp = new Date(dateProp);\n    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n      setDate(dateFromProp);\n    } else if (!dateProp) {\n      setDate(new Date());\n    }\n  }, [dateProp]);\n  const hasTimeFormat = timeFormat && !customFormat;\n  const formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && {\n    dateStyle: dateFormat\n  }), customFormat && Object.assign({}, customFormat)), is12Hour !== undefined && {\n    hour12: is12Hour\n  });\n  const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: timeFormat\n  }));\n  const defaultDisplay = `${dateAsLocaleString}${displaySuffix ? ' ' + displaySuffix : ''}`;\n  const utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n  const convertToUTCString = date => new Date(date).toUTCString().slice(0, -3);\n  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: utcTimeFormat\n  }));\n  const defaultTooltipContent = `${utcDateString}${(tooltip === null || tooltip === void 0 ? void 0 : tooltip.suffix) ? ' ' + tooltip.suffix : ' UTC'}`;\n  const {\n      dateTime\n    } = props,\n    propsWithoutDateTime = __rest(props, [\"dateTime\"]);\n  const timestamp = React.createElement(\"span\", Object.assign({\n    className: css(styles.timestamp, tooltip && styles.modifiers.helpText, className)\n  }, tooltip && {\n    tabIndex: 0\n  }, propsWithoutDateTime), React.createElement(\"time\", {\n    className: \"pf-c-timestamp__text\",\n    dateTime: dateTime || new Date(date).toISOString()\n  }, !children ? defaultDisplay : children));\n  return tooltip ? React.createElement(Tooltip, Object.assign({\n    content: tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content\n  }, tooltip.tooltipProps), timestamp) : timestamp;\n};\nTimestamp.displayName = 'Timestamp';","map":{"version":3,"names":["React","styles","css","Tooltip","isValidDate","TimestampFormat","TimestampTooltipVariant","Timestamp","_a","children","className","customFormat","date","dateProp","dateFormat","displaySuffix","is12Hour","locale","timeFormat","tooltip","props","__rest","setDate","useState","initDate","Date","useEffect","dateFromProp","toString","hasTimeFormat","formatOptions","Object","assign","dateStyle","undefined","hour12","dateAsLocaleString","toLocaleString","timeStyle","defaultDisplay","utcTimeFormat","convertToUTCString","toUTCString","slice","utcDateString","defaultTooltipContent","suffix","dateTime","propsWithoutDateTime","timestamp","createElement","modifiers","helpText","tabIndex","toISOString","content","variant","default","tooltipProps","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Timestamp\\Timestamp.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\n\nexport enum TimestampFormat {\n  full = 'full',\n  long = 'long',\n  medium = 'medium',\n  short = 'short'\n}\n\nexport enum TimestampTooltipVariant {\n  default = 'default',\n  custom = 'custom'\n}\n\nexport interface TimestampTooltip {\n  /** The variant of the tooltip. The \"default\" variant displays the date passed into\n   * the timestamp's date prop as a UTC string.\n   */\n  variant: 'default' | 'custom';\n  /** Content displayed in the tooltip when using the \"custom\" variant. */\n  content?: React.ReactNode;\n  /** Additional props passed to the tooltip. */\n  tooltipProps?: any;\n  /** A custom suffix to apply to a \"default\" variant tooltip. */\n  suffix?: string;\n}\n\nexport interface TimestampProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Displays custom content inside the timestamp, such as a relative time. This prop will\n   * override the default content that is displayed. Custom content will not be affected by\n   * any props that format or add to displayed content.\n   */\n  children?: React.ReactNode;\n  /** Class to add to the outer span. */\n  className?: string;\n  /** Applies custom formatting to the displayed date and/or time. Passing this prop in will\n   * override the dateFormat and timeFormat props.\n   */\n  customFormat?: { [key: string]: string };\n  /** Determines the default content that is displayed inside the timestamp and the value of\n   * the inner time element's datetime attribute. */\n  date?: Date;\n  /** Determines the format of the displayed date in the timestamp and UTC tooltip. Examples:\n   * \"Full\" => Tuesday, August 9, 2022;\n   * \"Long\" => August 9, 2022;\n   * \"Medium\" => Aug 9, 2022;\n   * \"Short\" => 8/9/22\n   */\n  dateFormat?: 'full' | 'long' | 'medium' | 'short';\n  /** Applies a custom suffix to the displayed content, usually after the time, such as a\n   * custom time zone.\n   */\n  displaySuffix?: string;\n  /** Flag for displaying the time in a 12 hour format. If this prop is not passed in,\n   * the hour format will be based on the locale prop's value.\n   */\n  is12Hour?: boolean;\n  /** Determines which locale to use in the displayed content. Defaults to the current locale\n   * when this prop is not passed in. For more information about locale's:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n   */\n  locale?: string;\n  /** Determines the format of the displayed time in the timestamp and UTC tooltip. Examples:\n   * \"Full\" => 11:25:00 AM Eastern Daylight Time\n   * \"Long\" => 11:25:00 AM EDT\n   * \"Medium\" => 11:25:00 AM\n   * \"Short\" => 11:25 AM\n   */\n  timeFormat?: 'full' | 'long' | 'medium' | 'short';\n  /** Adds a tooltip to the timestamp. */\n  tooltip?: TimestampTooltip;\n}\n\nexport const Timestamp: React.FunctionComponent<TimestampProps> = ({\n  children,\n  className,\n  customFormat,\n  date: dateProp,\n  dateFormat,\n  displaySuffix = '',\n  is12Hour,\n  locale,\n  timeFormat,\n  tooltip,\n  ...props\n}: TimestampProps) => {\n  const [date, setDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    }\n\n    return new Date();\n  });\n\n  React.useEffect(() => {\n    const dateFromProp = new Date(dateProp);\n    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n      setDate(dateFromProp);\n    } else if (!dateProp) {\n      setDate(new Date());\n    }\n  }, [dateProp]);\n\n  const hasTimeFormat = timeFormat && !customFormat;\n  const formatOptions = {\n    ...(dateFormat && !customFormat && { dateStyle: dateFormat }),\n    ...(customFormat && { ...customFormat }),\n    ...(is12Hour !== undefined && { hour12: is12Hour })\n  };\n\n  const dateAsLocaleString = new Date(date).toLocaleString(locale, {\n    ...formatOptions,\n    ...(hasTimeFormat && { timeStyle: timeFormat })\n  });\n  const defaultDisplay = `${dateAsLocaleString}${displaySuffix ? ' ' + displaySuffix : ''}`;\n\n  const utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n  const convertToUTCString = (date: Date) => new Date(date).toUTCString().slice(0, -3);\n  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, {\n    ...formatOptions,\n    ...(hasTimeFormat && { timeStyle: utcTimeFormat })\n  });\n  const defaultTooltipContent = `${utcDateString}${tooltip?.suffix ? ' ' + tooltip.suffix : ' UTC'}`;\n\n  const { dateTime, ...propsWithoutDateTime } = props;\n\n  const timestamp = (\n    <span\n      className={css(styles.timestamp, tooltip && styles.modifiers.helpText, className)}\n      {...(tooltip && { tabIndex: 0 })}\n      {...propsWithoutDateTime}\n    >\n      <time className=\"pf-c-timestamp__text\" dateTime={dateTime || new Date(date).toISOString()}>\n        {!children ? defaultDisplay : children}\n      </time>\n    </span>\n  );\n\n  return tooltip ? (\n    <Tooltip\n      content={tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content}\n      {...tooltip.tooltipProps}\n    >\n      {timestamp}\n    </Tooltip>\n  ) : (\n    timestamp\n  );\n};\nTimestamp.displayName = 'Timestamp';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}