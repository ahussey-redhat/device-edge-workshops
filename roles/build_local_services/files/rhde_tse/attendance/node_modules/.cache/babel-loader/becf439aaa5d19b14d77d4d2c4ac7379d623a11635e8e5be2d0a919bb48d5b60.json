{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nconst DualListSelectorTreeItemBase = _a => {\n  var {\n      onOptionCheck,\n      children,\n      className,\n      id,\n      text,\n      defaultExpanded,\n      hasBadge,\n      isChecked,\n      checkProps,\n      badgeProps,\n      itemData,\n      isDisabled = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      useMemo\n    } = _a,\n    props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const {\n    setFocusedOption\n  } = React.useContext(DualListSelectorListContext);\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled),\n    id: id\n  }, props, {\n    \"aria-selected\": isChecked,\n    role: \"treeitem\"\n  }, isExpanded && {\n    'aria-expanded': 'true'\n  }), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItem),\n    ref: ref,\n    tabIndex: -1,\n    onClick: isDisabled ? undefined : evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, children && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItemToggle),\n    onClick: e => {\n      if (children) {\n        setIsExpanded(!isExpanded);\n      }\n      e.stopPropagation();\n    },\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    },\n    onClick: evt => evt.stopPropagation(),\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n        setFocusedOption(id);\n        e.preventDefault();\n      }\n    },\n    ref: elem => elem && (elem.indeterminate = isChecked === null),\n    checked: isChecked || false,\n    tabIndex: -1\n  }, checkProps))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, text), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))), isExpanded && children);\n};\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n  return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"names":["React","styles","css","Badge","AngleRightIcon","flattenTree","DualListSelectorListContext","DualListSelectorTreeItemBase","_a","onOptionCheck","children","className","id","text","defaultExpanded","hasBadge","isChecked","checkProps","badgeProps","itemData","isDisabled","useMemo","props","__rest","ref","useRef","isExpanded","setIsExpanded","useState","setFocusedOption","useContext","useEffect","createElement","Object","assign","dualListSelectorListItem","modifiers","expandable","expanded","disabled","role","dualListSelectorListItemRow","selected","check","dualListSelectorItem","tabIndex","onClick","undefined","evt","dualListSelectorItemMain","dualListSelectorItemToggle","e","stopPropagation","onKeyDown","key","document","activeElement","click","preventDefault","dualListSelectorItemToggleIcon","dualListSelectorItemCheck","type","onChange","elem","indeterminate","checked","dualListSelectorItemText","dualListSelectorItemCount","data","length","DualListSelectorTreeItem","memo","prevProps","nextProps","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DualListSelector\\DualListSelectorTreeItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorTreeItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Flag indicating if this open is checked. */\n  isChecked?: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Raw data of the option */\n  itemData?: DualListSelectorTreeItemData;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating the DualListSelector tree should utilize memoization to help render large data sets. */\n  useMemo?: boolean;\n}\n\nconst DualListSelectorTreeItemBase: React.FunctionComponent<DualListSelectorTreeItemProps> = ({\n  onOptionCheck,\n  children,\n  className,\n  id,\n  text,\n  defaultExpanded,\n  hasBadge,\n  isChecked,\n  checkProps,\n  badgeProps,\n  itemData,\n  isDisabled = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo,\n  ...props\n}: DualListSelectorTreeItemProps) => {\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n\n  return (\n    <li\n      className={css(\n        styles.dualListSelectorListItem,\n        className,\n        children && styles.modifiers.expandable,\n        isExpanded && styles.modifiers.expanded,\n        isDisabled && styles.modifiers.disabled\n      )}\n      id={id}\n      {...props}\n      aria-selected={isChecked}\n      role=\"treeitem\"\n      {...(isExpanded && { 'aria-expanded': 'true' })}\n    >\n      <div\n        className={css(\n          styles.dualListSelectorListItemRow,\n          isChecked && styles.modifiers.selected,\n          styles.modifiers.check\n        )}\n      >\n        <div\n          className={css(styles.dualListSelectorItem)}\n          ref={ref}\n          tabIndex={-1}\n          onClick={\n            isDisabled\n              ? undefined\n              : evt => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }\n          }\n        >\n          <span className={css(styles.dualListSelectorItemMain)}>\n            {children && (\n              <div\n                className={css(styles.dualListSelectorItemToggle)}\n                onClick={e => {\n                  if (children) {\n                    setIsExpanded(!isExpanded);\n                  }\n                  e.stopPropagation();\n                }}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    (document.activeElement as HTMLElement).click();\n                    e.preventDefault();\n                  }\n                }}\n                tabIndex={-1}\n              >\n                <span className={css(styles.dualListSelectorItemToggleIcon)}>\n                  <AngleRightIcon aria-hidden />\n                </span>\n              </div>\n            )}\n            <span className={css(styles.dualListSelectorItemCheck)}>\n              <input\n                type=\"checkbox\"\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }}\n                onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n                    setFocusedOption(id);\n                    e.preventDefault();\n                  }\n                }}\n                ref={elem => elem && (elem.indeterminate = isChecked === null)}\n                checked={isChecked || false}\n                tabIndex={-1}\n                {...checkProps}\n              />\n            </span>\n\n            <span className={css(styles.dualListSelectorItemText)}>{text}</span>\n            {hasBadge && children && (\n              <span className={css(styles.dualListSelectorItemCount)}>\n                <Badge {...badgeProps}>{flattenTree((children as React.ReactElement).props.data).length}</Badge>\n              </span>\n            )}\n          </span>\n        </div>\n      </div>\n      {isExpanded && children}\n    </li>\n  );\n};\n\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (\n    prevProps.className !== nextProps.className ||\n    prevProps.text !== nextProps.text ||\n    prevProps.id !== nextProps.id ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isChecked !== nextProps.isChecked ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}