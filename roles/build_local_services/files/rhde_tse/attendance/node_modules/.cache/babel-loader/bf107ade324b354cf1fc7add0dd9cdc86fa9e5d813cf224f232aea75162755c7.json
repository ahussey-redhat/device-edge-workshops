{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class OverflowMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.observer = () => {};\n    this.handleResize = () => {\n      const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];\n      if (!breakpointWidth) {\n        // eslint-disable-next-line no-console\n        console.error('OverflowMenu will not be visible without a valid breakpoint.');\n        return;\n      }\n      const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;\n      const isBelowBreakpoint = relativeWidth < breakpointWidth;\n      if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n        this.setState({\n          isBelowBreakpoint\n        });\n      }\n    };\n    this.handleResizeWithDelay = debounce(this.handleResize, 250);\n    this.state = {\n      isBelowBreakpoint: false,\n      breakpointRef: undefined\n    };\n  }\n  getBreakpointRef() {\n    const {\n      breakpointReference\n    } = this.props;\n    if (breakpointReference.current) {\n      return breakpointReference.current;\n    } else if (typeof breakpointReference === 'function') {\n      return breakpointReference();\n    }\n  }\n  componentDidMount() {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n    this.setState({\n      breakpointRef: reference\n    });\n    this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n    this.handleResize();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n    if (prevState.breakpointRef !== reference) {\n      // To remove any previous observer/event listener from componentDidMount before adding a new one\n      this.observer();\n      this.setState({\n        breakpointRef: reference\n      });\n      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n      this.handleResize();\n    }\n  }\n  componentWillUnmount() {\n    this.observer();\n  }\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n      {\n        className,\n        breakpoint,\n        children,\n        breakpointReference\n      } = _a,\n      props = __rest(_a, [\"className\", \"breakpoint\", \"children\", \"breakpointReference\"]);\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.overflowMenu, className)\n    }), React.createElement(OverflowMenuContext.Provider, {\n      value: {\n        isBelowBreakpoint: this.state.isBelowBreakpoint\n      }\n    }, children));\n  }\n}\nOverflowMenu.displayName = 'OverflowMenu';\nOverflowMenu.contextType = OverflowMenuContext;","map":{"version":3,"names":["React","styles","css","OverflowMenuContext","debounce","globalWidthBreakpoints","getResizeObserver","OverflowMenu","Component","constructor","props","observer","handleResize","breakpointWidth","breakpoint","console","error","relativeWidth","state","breakpointRef","clientWidth","window","innerWidth","isBelowBreakpoint","setState","handleResizeWithDelay","undefined","getBreakpointRef","breakpointReference","current","componentDidMount","reference","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","_a","className","children","__rest","createElement","Object","assign","overflowMenu","Provider","value","displayName","contextType"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\OverflowMenu\\OverflowMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport interface OverflowMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Any elements that can be rendered in the menu */\n  children?: any;\n  /** Additional classes added to the OverflowMenu. */\n  className?: string;\n  /** Indicates breakpoint at which to switch between horizontal menu and vertical dropdown */\n  breakpoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** A container reference to base the specified breakpoint on instead of the viewport width. */\n  breakpointReference?: HTMLElement | (() => HTMLElement) | React.RefObject<any>;\n}\n\nexport interface OverflowMenuState extends React.HTMLProps<HTMLDivElement> {\n  isBelowBreakpoint: boolean;\n  breakpointRef: HTMLElement;\n}\n\nexport class OverflowMenu extends React.Component<OverflowMenuProps, OverflowMenuState> {\n  static displayName = 'OverflowMenu';\n  constructor(props: OverflowMenuProps) {\n    super(props);\n    this.state = {\n      isBelowBreakpoint: false,\n      breakpointRef: undefined\n    };\n  }\n\n  observer: any = () => {};\n\n  getBreakpointRef() {\n    const { breakpointReference } = this.props;\n\n    if ((breakpointReference as React.RefObject<any>).current) {\n      return (breakpointReference as React.RefObject<any>).current;\n    } else if (typeof breakpointReference === 'function') {\n      return breakpointReference();\n    }\n  }\n\n  componentDidMount() {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n\n    this.setState({ breakpointRef: reference });\n    this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n    this.handleResize();\n  }\n\n  componentDidUpdate(prevProps: Readonly<OverflowMenuProps>, prevState: Readonly<OverflowMenuState>): void {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n\n    if (prevState.breakpointRef !== reference) {\n      // To remove any previous observer/event listener from componentDidMount before adding a new one\n      this.observer();\n      this.setState({ breakpointRef: reference });\n      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  handleResize = () => {\n    const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];\n    if (!breakpointWidth) {\n      // eslint-disable-next-line no-console\n      console.error('OverflowMenu will not be visible without a valid breakpoint.');\n      return;\n    }\n\n    const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;\n    const isBelowBreakpoint = relativeWidth < breakpointWidth;\n    if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n      this.setState({ isBelowBreakpoint });\n    }\n  };\n\n  handleResizeWithDelay = debounce(this.handleResize, 250);\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { className, breakpoint, children, breakpointReference, ...props } = this.props;\n\n    return (\n      <div {...props} className={css(styles.overflowMenu, className)}>\n        <OverflowMenuContext.Provider value={{ isBelowBreakpoint: this.state.isBelowBreakpoint }}>\n          {children}\n        </OverflowMenuContext.Provider>\n      </div>\n    );\n  }\n}\n\nOverflowMenu.contextType = OverflowMenuContext;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,oEAAoE;AACvF,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,iBAAiB,QAAQ,8BAA8B;AAkBhE,OAAM,MAAOC,YAAa,SAAQP,KAAK,CAACQ,SAA+C;EAErFC,YAAYC,KAAwB;IAClC,KAAK,CAACA,KAAK,CAAC;IAOd,KAAAC,QAAQ,GAAQ,MAAK,CAAE,CAAC;IAoCxB,KAAAC,YAAY,GAAG,MAAK;MAClB,MAAMC,eAAe,GAAGR,sBAAsB,CAAC,IAAI,CAACK,KAAK,CAACI,UAAU,CAAC;MACrE,IAAI,CAACD,eAAe,EAAE;QACpB;QACAE,OAAO,CAACC,KAAK,CAAC,8DAA8D,CAAC;QAC7E;;MAGF,MAAMC,aAAa,GAAG,IAAI,CAACC,KAAK,CAACC,aAAa,GAAG,IAAI,CAACD,KAAK,CAACC,aAAa,CAACC,WAAW,GAAGC,MAAM,CAACC,UAAU;MACzG,MAAMC,iBAAiB,GAAGN,aAAa,GAAGJ,eAAe;MACzD,IAAI,IAAI,CAACK,KAAK,CAACK,iBAAiB,KAAKA,iBAAiB,EAAE;QACtD,IAAI,CAACC,QAAQ,CAAC;UAAED;QAAiB,CAAE,CAAC;;IAExC,CAAC;IAED,KAAAE,qBAAqB,GAAGrB,QAAQ,CAAC,IAAI,CAACQ,YAAY,EAAE,GAAG,CAAC;IAzDtD,IAAI,CAACM,KAAK,GAAG;MACXK,iBAAiB,EAAE,KAAK;MACxBJ,aAAa,EAAEO;KAChB;EACH;EAIAC,gBAAgBA,CAAA;IACd,MAAM;MAAEC;IAAmB,CAAE,GAAG,IAAI,CAAClB,KAAK;IAE1C,IAAKkB,mBAA4C,CAACC,OAAO,EAAE;MACzD,OAAQD,mBAA4C,CAACC,OAAO;KAC7D,MAAM,IAAI,OAAOD,mBAAmB,KAAK,UAAU,EAAE;MACpD,OAAOA,mBAAmB,EAAE;;EAEhC;EAEAE,iBAAiBA,CAAA;IACf,MAAMC,SAAS,GAAG,IAAI,CAACrB,KAAK,CAACkB,mBAAmB,GAAG,IAAI,CAACD,gBAAgB,EAAE,GAAGD,SAAS;IAEtF,IAAI,CAACF,QAAQ,CAAC;MAAEL,aAAa,EAAEY;IAAS,CAAE,CAAC;IAC3C,IAAI,CAACpB,QAAQ,GAAGL,iBAAiB,CAACyB,SAAS,EAAE,IAAI,CAACN,qBAAqB,CAAC;IACxE,IAAI,CAACb,YAAY,EAAE;EACrB;EAEAoB,kBAAkBA,CAACC,SAAsC,EAAEC,SAAsC;IAC/F,MAAMH,SAAS,GAAG,IAAI,CAACrB,KAAK,CAACkB,mBAAmB,GAAG,IAAI,CAACD,gBAAgB,EAAE,GAAGD,SAAS;IAEtF,IAAIQ,SAAS,CAACf,aAAa,KAAKY,SAAS,EAAE;MACzC;MACA,IAAI,CAACpB,QAAQ,EAAE;MACf,IAAI,CAACa,QAAQ,CAAC;QAAEL,aAAa,EAAEY;MAAS,CAAE,CAAC;MAC3C,IAAI,CAACpB,QAAQ,GAAGL,iBAAiB,CAACyB,SAAS,EAAE,IAAI,CAACN,qBAAqB,CAAC;MACxE,IAAI,CAACb,YAAY,EAAE;;EAEvB;EAEAuB,oBAAoBA,CAAA;IAClB,IAAI,CAACxB,QAAQ,EAAE;EACjB;EAmBAyB,MAAMA,CAAA;IACJ;IACA,MAAMC,EAAA,GAAqE,IAAI,CAAC3B,KAAK;MAA/E;QAAE4B,SAAS;QAAExB,UAAU;QAAEyB,QAAQ;QAAEX;MAAmB,IAAAS,EAAyB;MAApB3B,KAAK,GAAA8B,MAAA,CAAAH,EAAA,EAAhE,8DAAkE,CAAa;IAErF,OACErC,KAAA,CAAAyC,aAAA,QAAAC,MAAA,CAAAC,MAAA,KAASjC,KAAK;MAAE4B,SAAS,EAAEpC,GAAG,CAACD,MAAM,CAAC2C,YAAY,EAAEN,SAAS;IAAC,IAC5DtC,KAAA,CAAAyC,aAAA,CAACtC,mBAAmB,CAAC0C,QAAQ;MAACC,KAAK,EAAE;QAAEvB,iBAAiB,EAAE,IAAI,CAACL,KAAK,CAACK;MAAiB;IAAE,GACrFgB,QAAQ,CACoB,CAC3B;EAEV;;AAzEOhC,YAAA,CAAAwC,WAAW,GAAG,cAAc;AA4ErCxC,YAAY,CAACyC,WAAW,GAAG7C,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}