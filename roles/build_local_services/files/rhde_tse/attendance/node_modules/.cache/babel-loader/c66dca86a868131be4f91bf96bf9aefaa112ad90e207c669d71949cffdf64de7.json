{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCell = _a => {\n  var {\n      children = null,\n      className = '',\n      width = 1,\n      isFilled = true,\n      alignRight = false,\n      isIcon = false,\n      wrapModifier = null\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"width\", \"isFilled\", \"alignRight\", \"isIcon\", \"wrapModifier\"]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListCell, width > 1 && styles.modifiers[`flex_${width}`], !isFilled && styles.modifiers.noFill, alignRight && styles.modifiers.alignRight, isIcon && styles.modifiers.icon, className, wrapModifier && styles.modifiers[wrapModifier])\n  }, props), children);\n};\nDataListCell.displayName = 'DataListCell';","map":{"version":3,"names":["React","css","styles","DataListCell","_a","children","className","width","isFilled","alignRight","isIcon","wrapModifier","props","__rest","createElement","Object","assign","dataListCell","modifiers","noFill","icon","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\DataList\\DataListCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListWrapModifier } from './DataList';\n\nexport interface DataListCellProps extends Omit<React.HTMLProps<HTMLDivElement>, 'width'> {\n  /** Content rendered inside the DataList cell */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Width (from 1-5) to the DataList cell */\n  width?: 1 | 2 | 3 | 4 | 5;\n  /** Enables the body Content to fill the height of the card */\n  isFilled?: boolean;\n  /**  Aligns the cell content to the right of its parent. */\n  alignRight?: boolean;\n  /** Set to true if the cell content is an Icon */\n  isIcon?: boolean;\n  /** Determines which wrapping modifier to apply to the DataListCell */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n}\n\nexport const DataListCell: React.FunctionComponent<DataListCellProps> = ({\n  children = null,\n  className = '',\n  width = 1,\n  isFilled = true,\n  alignRight = false,\n  isIcon = false,\n  wrapModifier = null,\n  ...props\n}: DataListCellProps) => (\n  <div\n    className={css(\n      styles.dataListCell,\n      width > 1 && styles.modifiers[`flex_${width}` as 'flex_2' | 'flex_3' | 'flex_4' | 'flex_5'],\n      !isFilled && styles.modifiers.noFill,\n      alignRight && styles.modifiers.alignRight,\n      isIcon && styles.modifiers.icon,\n      className,\n      wrapModifier && styles.modifiers[wrapModifier]\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\nDataListCell.displayName = 'DataListCell';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,4DAA4D;AAoB/E,OAAO,MAAMC,YAAY,GAAgDC,EASrD,IAAI;MATiD;MACvEC,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAG,EAAE;MACdC,KAAK,GAAG,CAAC;MACTC,QAAQ,GAAG,IAAI;MACfC,UAAU,GAAG,KAAK;MAClBC,MAAM,GAAG,KAAK;MACdC,YAAY,GAAG;IAAI,IAAAP,EAED;IADfQ,KAAK,GAAAC,MAAA,CAAAT,EAAA,EAR+D,sFASxE,CADS;EACe,OACvBJ,KAAA,CAAAc,aAAA,QAAAC,MAAA,CAAAC,MAAA;IACEV,SAAS,EAAEL,GAAG,CACZC,MAAM,CAACe,YAAY,EACnBV,KAAK,GAAG,CAAC,IAAIL,MAAM,CAACgB,SAAS,CAAC,QAAQX,KAAK,EAA+C,CAAC,EAC3F,CAACC,QAAQ,IAAIN,MAAM,CAACgB,SAAS,CAACC,MAAM,EACpCV,UAAU,IAAIP,MAAM,CAACgB,SAAS,CAACT,UAAU,EACzCC,MAAM,IAAIR,MAAM,CAACgB,SAAS,CAACE,IAAI,EAC/Bd,SAAS,EACTK,YAAY,IAAIT,MAAM,CAACgB,SAAS,CAACP,YAAY,CAAC;EAC/C,GACGC,KAAK,GAERP,QAAQ,CACL;CACP;AACDF,YAAY,CAACkB,WAAW,GAAG,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}