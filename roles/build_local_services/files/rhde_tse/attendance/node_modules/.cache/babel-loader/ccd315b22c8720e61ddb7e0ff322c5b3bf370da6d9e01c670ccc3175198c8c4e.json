{"ast":null,"code":"// @ts-nocheck\nimport { top, left, right, bottom, start } from '../enums';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getMainAxisFromPlacement from '../utils/getMainAxisFromPlacement';\nimport getAltAxis from '../utils/getAltAxis';\nimport within from '../utils/within';\nimport getLayoutRect from '../dom-utils/getLayoutRect';\nimport getOffsetParent from '../dom-utils/getOffsetParent';\nimport detectOverflow from '../utils/detectOverflow';\nimport getVariation from '../utils/getVariation';\nimport getFreshSideObject from '../utils/getFreshSideObject';\n/**\n *\n */\nfunction preventOverflow(_ref) {\n  let {\n    state,\n    options,\n    name\n  } = _ref;\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = false,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    padding,\n    tether = true,\n    tetherOffset = 0\n  } = options;\n  const overflow = detectOverflow(state, {\n    boundary,\n    rootBoundary,\n    padding,\n    altBoundary\n  });\n  const basePlacement = getBasePlacement(state.placement);\n  const variation = getVariation(state.placement);\n  const isBasePlacement = !variation;\n  const mainAxis = getMainAxisFromPlacement(basePlacement);\n  const altAxis = getAltAxis(mainAxis);\n  const popperOffsets = state.modifiersData.popperOffsets;\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {\n    placement: state.placement\n  })) : tetherOffset;\n  const data = {\n    x: 0,\n    y: 0\n  };\n  if (!popperOffsets) {\n    return;\n  }\n  if (checkMainAxis) {\n    const mainSide = mainAxis === 'y' ? top : left;\n    const altSide = mainAxis === 'y' ? bottom : right;\n    const len = mainAxis === 'y' ? 'height' : 'width';\n    const offset = popperOffsets[mainAxis];\n    const min = popperOffsets[mainAxis] + overflow[mainSide];\n    const max = popperOffsets[mainAxis] - overflow[altSide];\n    const additive = tether ? -popperRect[len] / 2 : 0;\n    const minLen = variation === start ? referenceRect[len] : popperRect[len];\n    const maxLen = variation === start ? -popperRect[len] : -referenceRect[len];\n    // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n    const arrowElement = state.elements.arrow;\n    const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    const arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    const arrowPaddingMin = arrowPaddingObject[mainSide];\n    const arrowPaddingMax = arrowPaddingObject[altSide];\n    // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n    const arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    const minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n    const maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n    const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    const clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n    const tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n    const tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n    const preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n  if (checkAltAxis) {\n    const mainSide = mainAxis === 'x' ? top : left;\n    const altSide = mainAxis === 'x' ? bottom : right;\n    const offset = popperOffsets[altAxis];\n    const min = offset + overflow[mainSide];\n    const max = offset - overflow[altSide];\n    const preventedOffset = within(min, offset, max);\n    popperOffsets[altAxis] = preventedOffset;\n    data[altAxis] = preventedOffset - offset;\n  }\n  state.modifiersData[name] = data;\n}\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};","map":{"version":3,"names":["top","left","right","bottom","start","getBasePlacement","getMainAxisFromPlacement","getAltAxis","within","getLayoutRect","getOffsetParent","detectOverflow","getVariation","getFreshSideObject","preventOverflow","_ref","state","options","name","mainAxis","checkMainAxis","altAxis","checkAltAxis","boundary","rootBoundary","altBoundary","padding","tether","tetherOffset","overflow","basePlacement","placement","variation","isBasePlacement","popperOffsets","modifiersData","referenceRect","rects","reference","popperRect","popper","tetherOffsetValue","Object","assign","data","x","y","mainSide","altSide","len","offset","min","max","additive","minLen","maxLen","arrowElement","elements","arrow","arrowRect","width","height","arrowPaddingObject","arrowPaddingMin","arrowPaddingMax","arrowLen","minOffset","maxOffset","arrowOffsetParent","clientOffset","clientTop","clientLeft","offsetModifierValue","tetherMin","tetherMax","preventedOffset","Math","enabled","phase","fn","requiresIfExists"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\helpers\\Popper\\thirdparty\\popper-core\\modifiers\\preventOverflow.ts"],"sourcesContent":["// @ts-nocheck\nimport { top, left, right, bottom, start } from '../enums';\nimport { Placement, Boundary, RootBoundary } from '../enums';\nimport { Rect, ModifierArguments, Modifier, Padding } from '../types';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getMainAxisFromPlacement from '../utils/getMainAxisFromPlacement';\nimport getAltAxis from '../utils/getAltAxis';\nimport within from '../utils/within';\nimport getLayoutRect from '../dom-utils/getLayoutRect';\nimport getOffsetParent from '../dom-utils/getOffsetParent';\nimport detectOverflow from '../utils/detectOverflow';\nimport getVariation from '../utils/getVariation';\nimport getFreshSideObject from '../utils/getFreshSideObject';\n\ntype TetherOffset = (arg0: { popper: Rect; reference: Rect; placement: Placement }) => number | number;\n\n// eslint-disable-next-line import/no-unused-modules\nexport interface Options {\n  /* Prevents boundaries overflow on the main axis */\n  mainAxis: boolean;\n\n  /* Prevents boundaries overflow on the alternate axis */\n  altAxis: boolean;\n\n  /* The area to check the popper is overflowing in */\n  boundary: Boundary;\n\n  /* If the popper is not overflowing the main area, fallback to this one */\n  rootBoundary: RootBoundary;\n\n  /* Use the reference's \"clippingParents\" boundary context */\n  altBoundary: boolean;\n\n  /**\n   * Allows the popper to overflow from its boundaries to keep it near its\n   * reference element\n   */\n  tether: boolean;\n\n  /* Offsets when the `tether` option should activate */\n  tetherOffset: TetherOffset;\n\n  /* Sets a padding to the provided boundary */\n  padding: Padding;\n}\n\n/**\n *\n */\nfunction preventOverflow({ state, options, name }: ModifierArguments<Options>) {\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = false,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    padding,\n    tether = true,\n    tetherOffset = 0\n  } = options;\n\n  const overflow = detectOverflow(state, {\n    boundary,\n    rootBoundary,\n    padding,\n    altBoundary\n  });\n  const basePlacement = getBasePlacement(state.placement);\n  const variation = getVariation(state.placement);\n  const isBasePlacement = !variation;\n  const mainAxis = getMainAxisFromPlacement(basePlacement);\n  const altAxis = getAltAxis(mainAxis);\n  const popperOffsets = state.modifiersData.popperOffsets;\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const tetherOffsetValue =\n    typeof tetherOffset === 'function'\n      ? tetherOffset({\n          ...state.rects,\n          placement: state.placement\n        })\n      : tetherOffset;\n\n  const data = { x: 0, y: 0 };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    const mainSide = mainAxis === 'y' ? top : left;\n    const altSide = mainAxis === 'y' ? bottom : right;\n    const len = mainAxis === 'y' ? 'height' : 'width';\n    const offset = popperOffsets[mainAxis];\n\n    const min = popperOffsets[mainAxis] + overflow[mainSide];\n    const max = popperOffsets[mainAxis] - overflow[altSide];\n\n    const additive = tether ? -popperRect[len] / 2 : 0;\n\n    const minLen = variation === start ? referenceRect[len] : popperRect[len];\n    const maxLen = variation === start ? -popperRect[len] : -referenceRect[len];\n\n    // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n    const arrowElement = state.elements.arrow;\n    const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : { width: 0, height: 0 };\n    const arrowPaddingObject = state.modifiersData['arrow#persistent']\n      ? state.modifiersData['arrow#persistent'].padding\n      : getFreshSideObject();\n    const arrowPaddingMin = arrowPaddingObject[mainSide];\n    const arrowPaddingMax = arrowPaddingObject[altSide];\n\n    // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n    const arrowLen = within(0, referenceRect[len], arrowRect[len]);\n\n    const minOffset = isBasePlacement\n      ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue\n      : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n    const maxOffset = isBasePlacement\n      ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue\n      : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n\n    const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    const clientOffset = arrowOffsetParent\n      ? mainAxis === 'y'\n        ? arrowOffsetParent.clientTop || 0\n        : arrowOffsetParent.clientLeft || 0\n      : 0;\n\n    const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n\n    const tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n    const tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n\n    const preventedOffset = within(\n      tether ? Math.min(min, tetherMin) : min,\n      offset,\n      tether ? Math.max(max, tetherMax) : max\n    );\n\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    const mainSide = mainAxis === 'x' ? top : left;\n    const altSide = mainAxis === 'x' ? bottom : right;\n    const offset = popperOffsets[altAxis];\n\n    const min = offset + overflow[mainSide];\n    const max = offset - overflow[altSide];\n\n    const preventedOffset = within(min, offset, max);\n\n    popperOffsets[altAxis] = preventedOffset;\n    data[altAxis] = preventedOffset - offset;\n  }\n\n  state.modifiersData[name] = data;\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type PreventOverflowModifier = Modifier<'preventOverflow', Options>;\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n} as PreventOverflowModifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}