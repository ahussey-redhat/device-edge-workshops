{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = _a => {\n  var {\n      className = '',\n      id,\n      children,\n      hasNoBorder = false,\n      isResizable = false,\n      onResize,\n      minSize,\n      defaultSize,\n      maxSize,\n      increment = 5,\n      resizeAriaLabel = 'Resize',\n      widths,\n      colorVariant = DrawerColorVariant.default\n    } = _a,\n    props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\"]);\n  const panel = React.useRef();\n  const splitterRef = React.useRef();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const {\n    position,\n    isExpanded,\n    isStatic,\n    onExpand,\n    drawerRef,\n    drawerContentRef,\n    isInline\n  } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth = 0;\n  let panelRect;\n  let right;\n  let left;\n  let bottom;\n  let setInitialVals = true;\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n    const newSplitterPos = splitterPos / drawerSize * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n  const handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n  const handleMouseMove = e => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n  const handleTouchMove = e => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n  const handleControlMove = (e, controlPosition) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n  const handleTouchEnd = e => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n  const handleKeys = e => {\n    const key = e.key;\n    if (key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return React.createElement(GenerateId, {\n    prefix: \"pf-drawer-panel-\"\n  }, panelId => React.createElement(\"div\", Object.assign({\n    id: id || panelId,\n    className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n    ref: panel,\n    onTransitionEnd: ev => {\n      if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n        onExpand();\n      }\n      setIsExpandedInternal(!hidden);\n    },\n    hidden: hidden\n  }, (defaultSize || minSize || maxSize) && {\n    style: boundaryCssVars\n  }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n    role: \"separator\",\n    tabIndex: 0,\n    \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n    \"aria-label\": resizeAriaLabel,\n    \"aria-valuenow\": separatorValue,\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    \"aria-controls\": id || panelId,\n    onMouseDown: handleMousedown,\n    onKeyDown: handleKeys,\n    onTouchStart: handleTouchStart,\n    ref: splitterRef\n  }, React.createElement(\"div\", {\n    className: css(styles.drawerSplitterHandle),\n    \"aria-hidden\": true\n  })), React.createElement(\"div\", {\n    className: css(styles.drawerPanelMain)\n  }, children)), !isResizable && children)));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"names":["React","styles","css","DrawerColorVariant","DrawerContext","formatBreakpointMods","GenerateId","isResizing","newSize","DrawerPanelContent","_a","className","id","children","hasNoBorder","isResizable","onResize","minSize","defaultSize","maxSize","increment","resizeAriaLabel","widths","colorVariant","default","props","__rest","panel","useRef","splitterRef","separatorValue","setSeparatorValue","useState","position","isExpanded","isStatic","onExpand","drawerRef","drawerContentRef","isInline","useContext","hidden","isExpandedInternal","setIsExpandedInternal","currWidth","panelRect","right","left","bottom","setInitialVals","useEffect","calcValueNow","splitterPos","drawerSize","current","getBoundingClientRect","top","newSplitterPos","Math","round","Number","EPSILON","handleTouchStart","e","stopPropagation","document","addEventListener","callbackTouchMove","passive","callbackTouchEnd","handleMousedown","preventDefault","callbackMouseMove","callbackMouseUp","classList","add","modifiers","resizing","handleMouseMove","mousePos","clientY","clientX","handleControlMove","handleTouchMove","stopImmediatePropagation","touchPos","touches","controlPosition","style","overflowAnchor","setProperty","handleMouseup","remove","removeEventListener","handleTouchEnd","useCallback","handleKeys","key","height","width","delta","boundaryCssVars","createElement","prefix","panelId","Object","assign","drawerPanel","resizable","noBorder","light200","light_200","ref","onTransitionEnd","ev","nativeEvent","propertyName","Fragment","drawerSplitter","vertical","role","tabIndex","onMouseDown","onKeyDown","onTouchStart","drawerSplitterHandle","drawerPanelMain","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Drawer\\DrawerPanelContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface DrawerPanelContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the drawer. */\n  className?: string;\n  /** ID of the drawer panel */\n  id?: string;\n  /** Content to be rendered in the drawer panel. */\n  children?: React.ReactNode;\n  /** Flag indicating that the drawer panel should not have a border. */\n  hasNoBorder?: boolean;\n  /** Flag indicating that the drawer panel should be resizable. */\n  isResizable?: boolean;\n  /** Callback for resize end. */\n  onResize?: (width: number, id: string) => void;\n  /** The minimum size of a drawer, in either pixels or percentage. */\n  minSize?: string;\n  /** The starting size of a resizable drawer, in either pixels or percentage. */\n  defaultSize?: string;\n  /** The maximum size of a drawer, in either pixels or percentage. */\n  maxSize?: string;\n  /** The increment amount for keyboard drawer resizing, in pixels. */\n  increment?: number;\n  /** Aria label for the resizable drawer splitter. */\n  resizeAriaLabel?: string;\n  /** Width for drawer panel at various breakpoints. Overriden by resizable drawer minSize and defaultSize. */\n  widths?: {\n    default?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    lg?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    xl?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    '2xl'?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  };\n  /** Color variant of the background of the drawer panel */\n  colorVariant?: DrawerColorVariant | 'light-200' | 'default';\n}\nlet isResizing: boolean = null;\nlet newSize: number = 0;\n\nexport const DrawerPanelContent: React.FunctionComponent<DrawerPanelContentProps> = ({\n  className = '',\n  id,\n  children,\n  hasNoBorder = false,\n  isResizable = false,\n  onResize,\n  minSize,\n  defaultSize,\n  maxSize,\n  increment = 5,\n  resizeAriaLabel = 'Resize',\n  widths,\n  colorVariant = DrawerColorVariant.default,\n  ...props\n}: DrawerPanelContentProps) => {\n  const panel = React.useRef<HTMLDivElement>();\n  const splitterRef = React.useRef<HTMLDivElement>();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = React.useContext(\n    DrawerContext\n  );\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth: number = 0;\n  let panelRect: DOMRect;\n  let right: number;\n  let left: number;\n  let bottom: number;\n  let setInitialVals: boolean = true;\n\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos =\n        splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    const newSplitterPos = (splitterPos / drawerSize) * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = (e: TouchEvent) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e: MouseEvent | TouchEvent, controlPosition: number) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (\n      key !== 'Escape' &&\n      key !== 'Enter' &&\n      key !== 'ArrowUp' &&\n      key !== 'ArrowDown' &&\n      key !== 'ArrowLeft' &&\n      key !== 'ArrowRight'\n    ) {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars: any = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return (\n    <GenerateId prefix=\"pf-drawer-panel-\">\n      {panelId => (\n        <div\n          id={id || panelId}\n          className={css(\n            styles.drawerPanel,\n            isResizable && styles.modifiers.resizable,\n            hasNoBorder && styles.modifiers.noBorder,\n            formatBreakpointMods(widths, styles),\n            colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200,\n            className\n          )}\n          ref={panel}\n          onTransitionEnd={ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n              onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n          }}\n          hidden={hidden}\n          {...((defaultSize || minSize || maxSize) && {\n            style: boundaryCssVars as React.CSSProperties\n          })}\n          {...props}\n        >\n          {isExpandedInternal && (\n            <React.Fragment>\n              {isResizable && (\n                <React.Fragment>\n                  <div\n                    className={css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical)}\n                    role=\"separator\"\n                    tabIndex={0}\n                    aria-orientation={position === 'bottom' ? 'horizontal' : 'vertical'}\n                    aria-label={resizeAriaLabel}\n                    aria-valuenow={separatorValue}\n                    aria-valuemin={0}\n                    aria-valuemax={100}\n                    aria-controls={id || panelId}\n                    onMouseDown={handleMousedown}\n                    onKeyDown={handleKeys}\n                    onTouchStart={handleTouchStart}\n                    ref={splitterRef}\n                  >\n                    <div className={css(styles.drawerSplitterHandle)} aria-hidden></div>\n                  </div>\n                  <div className={css(styles.drawerPanelMain)}>{children}</div>\n                </React.Fragment>\n              )}\n              {!isResizable && children}\n            </React.Fragment>\n          )}\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}