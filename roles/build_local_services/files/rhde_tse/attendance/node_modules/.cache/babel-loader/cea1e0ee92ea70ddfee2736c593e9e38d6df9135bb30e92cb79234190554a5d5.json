{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children, res) => {\n  React.Children.forEach(children, child => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\nexport const JumpLinks = _a => {\n  var {\n      isCentered,\n      isVertical,\n      children,\n      label,\n      'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n      scrollableSelector,\n      activeIndex: activeIndexProp = 0,\n      offset = 0,\n      expandable,\n      isExpanded: isExpandedProp = false,\n      alwaysShowLabel = true,\n      toggleAriaLabel = 'Toggle jump links',\n      className\n    } = _a,\n    props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef();\n  let scrollableElement;\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems.map((e, index) => ({\n        y: e ? e.offsetTop : null,\n        index\n      })).filter(_ref => {\n        let {\n          y\n        } = _ref;\n        return y !== null;\n      }).sort((e1, e2) => e2.y - e1.y);\n      for (const {\n        y,\n        index\n      } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector);\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n  let jumpLinkIndex = 0;\n  const cloneChildren = children => !hasScrollSpy ? children : React.Children.map(children, child => {\n    if (child.type === JumpLinksItem) {\n      const {\n        onClick: onClickProp,\n        isActive: isActiveProp\n      } = child.props;\n      const itemIndex = jumpLinkIndex++;\n      const scrollItem = scrollItems[itemIndex];\n      return React.cloneElement(child, {\n        onClick(ev) {\n          isLinkClicked.current = true;\n          // Items might have rendered after this component. Do a quick refresh.\n          let newScrollItems;\n          if (!scrollItem) {\n            newScrollItems = getScrollItems(children, []);\n            setScrollItems(newScrollItems);\n          }\n          const newScrollItem = scrollItem || newScrollItems[itemIndex];\n          if (newScrollItem) {\n            // we have to support scrolling to an offset due to sticky sidebar\n            const scrollableElement = document.querySelector(scrollableSelector);\n            if (scrollableElement instanceof HTMLElement) {\n              if (isResponsive(navRef.current)) {\n                // Remove class immediately so we can get collapsed height\n                if (navRef.current) {\n                  navRef.current.classList.remove(styles.modifiers.expanded);\n                }\n                let stickyParent = navRef.current && navRef.current.parentElement;\n                while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                  stickyParent = stickyParent.parentElement;\n                }\n                setIsExpanded(false);\n                if (stickyParent) {\n                  offset += stickyParent.scrollHeight;\n                }\n              }\n              scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n            }\n            newScrollItem.focus();\n            ev.preventDefault();\n            setActiveIndex(itemIndex);\n          }\n          if (onClickProp) {\n            onClickProp(ev);\n          }\n        },\n        isActive: isActiveProp || activeIndex === itemIndex,\n        children: cloneChildren(child.props.children)\n      });\n    } else if (child.type === React.Fragment) {\n      return cloneChildren(child.props.children);\n    } else if (child.type === JumpLinksList) {\n      return React.cloneElement(child, {\n        children: cloneChildren(child.props.children)\n      });\n    }\n    return child;\n  });\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: css('pf-c-jump-links__header')\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: () => setIsExpanded(!isExpanded),\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)), label && React.createElement(\"span\", {\n    className: css(styles.jumpLinksToggleText)\n  }, \" \", label, \" \"))), label && alwaysShowLabel && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"names":["React","css","styles","sidebarStyles","JumpLinksItem","JumpLinksList","formatBreakpointMods","Button","AngleRightIcon","cssToggleDisplayVar","canUseDOM","getScrollItems","children","res","Children","forEach","child","document","getElementById","querySelector","type","scrollNode","props","node","href","startsWith","push","substr","HTMLElement","Fragment","includes","isResponsive","jumpLinks","getComputedStyle","getPropertyValue","name","JumpLinks","_a","isCentered","isVertical","label","ariaLabel","scrollableSelector","activeIndex","activeIndexProp","offset","expandable","isExpanded","isExpandedProp","alwaysShowLabel","toggleAriaLabel","className","__rest","hasScrollSpy","Boolean","scrollItems","setScrollItems","useState","setActiveIndex","setIsExpanded","isLinkClicked","useRef","useEffect","navRef","scrollableElement","scrollSpy","useCallback","current","scrollPosition","Math","ceil","scrollTop","window","requestAnimationFrame","newScrollItems","scrollElements","map","e","index","y","offsetTop","filter","_ref","sort","e1","e2","addEventListener","removeEventListener","jumpLinkIndex","cloneChildren","onClick","onClickProp","isActive","isActiveProp","itemIndex","scrollItem","cloneElement","ev","newScrollItem","classList","remove","modifiers","expanded","stickyParent","parentElement","contains","sticky","scrollHeight","scrollTo","focus","preventDefault","createElement","Object","assign","center","vertical","ref","jumpLinksMain","jumpLinksToggle","variant","jumpLinksToggleIcon","jumpLinksToggleText","jumpLinksLabel","jumpLinksList","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\JumpLinks\\JumpLinks.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem, JumpLinksItemProps } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n\nexport interface JumpLinksProps extends Omit<React.HTMLProps<HTMLElement>, 'label'> {\n  /** Whether to center children. */\n  isCentered?: boolean;\n  /** Whether the layout of children is vertical or horizontal. */\n  isVertical?: boolean;\n  /** Label to add to nav element. */\n  label?: React.ReactNode;\n  /** Flag to always show the label when using `expandable` */\n  alwaysShowLabel?: boolean;\n  /** Aria-label to add to nav element. Defaults to label. */\n  'aria-label'?: string;\n  /** Selector for the scrollable element to spy on. Not passing a selector disables spying. */\n  scrollableSelector?: string;\n  /** The index of the child Jump link to make active. */\n  activeIndex?: number;\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under. */\n  offset?: number;\n  /** When to collapse/expand at different breakpoints */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** On mobile whether or not the JumpLinks starts out expanded */\n  isExpanded?: boolean;\n  /** Aria label for expandable toggle */\n  toggleAriaLabel?: string;\n  /** Class for nav */\n  className?: string;\n}\n\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children: React.ReactNode, res: HTMLElement[]) => {\n  React.Children.forEach(children, (child: any) => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)) as HTMLElement);\n        } else {\n          res.push(document.querySelector(scrollNode) as HTMLElement);\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks: HTMLElement) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return (\n    jumpLinks &&\n    getComputedStyle(jumpLinks)\n      .getPropertyValue(cssToggleDisplayVar.name)\n      .includes('block')\n  );\n}\n\nexport const JumpLinks: React.FunctionComponent<JumpLinksProps> = ({\n  isCentered,\n  isVertical,\n  children,\n  label,\n  'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n  scrollableSelector,\n  activeIndex: activeIndexProp = 0,\n  offset = 0,\n  expandable,\n  isExpanded: isExpandedProp = false,\n  alwaysShowLabel = true,\n  toggleAriaLabel = 'Toggle jump links',\n  className,\n  ...props\n}: JumpLinksProps) => {\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef<HTMLElement>();\n\n  let scrollableElement: HTMLElement;\n\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems\n        .map((e, index) => ({\n          y: e ? e.offsetTop : null,\n          index\n        }))\n        .filter(({ y }) => y !== null)\n        .sort((e1, e2) => e2.y - e1.y);\n      for (const { y, index } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n\n  let jumpLinkIndex = 0;\n  const cloneChildren = (children: React.ReactNode): React.ReactNode =>\n    !hasScrollSpy\n      ? children\n      : React.Children.map(children, (child: any) => {\n          if (child.type === JumpLinksItem) {\n            const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n            const itemIndex = jumpLinkIndex++;\n            const scrollItem = scrollItems[itemIndex];\n            return React.cloneElement(child as React.ReactElement<JumpLinksItemProps>, {\n              onClick(ev: React.MouseEvent<HTMLAnchorElement>) {\n                isLinkClicked.current = true;\n                // Items might have rendered after this component. Do a quick refresh.\n                let newScrollItems;\n                if (!scrollItem) {\n                  newScrollItems = getScrollItems(children, []);\n                  setScrollItems(newScrollItems);\n                }\n                const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n                if (newScrollItem) {\n                  // we have to support scrolling to an offset due to sticky sidebar\n                  const scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n                  if (scrollableElement instanceof HTMLElement) {\n                    if (isResponsive(navRef.current)) {\n                      // Remove class immediately so we can get collapsed height\n                      if (navRef.current) {\n                        navRef.current.classList.remove(styles.modifiers.expanded);\n                      }\n                      let stickyParent = navRef.current && navRef.current.parentElement;\n                      while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                        stickyParent = stickyParent.parentElement;\n                      }\n                      setIsExpanded(false);\n                      if (stickyParent) {\n                        offset += stickyParent.scrollHeight;\n                      }\n                    }\n                    scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                  }\n                  newScrollItem.focus();\n                  ev.preventDefault();\n                  setActiveIndex(itemIndex);\n                }\n                if (onClickProp) {\n                  onClickProp(ev);\n                }\n              },\n              isActive: isActiveProp || activeIndex === itemIndex,\n              children: cloneChildren(child.props.children)\n            });\n          } else if (child.type === React.Fragment) {\n            return cloneChildren(child.props.children);\n          } else if (child.type === JumpLinksList) {\n            return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n          }\n          return child;\n        });\n\n  return (\n    <nav\n      className={css(\n        styles.jumpLinks,\n        isCentered && styles.modifiers.center,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(expandable, styles),\n        isExpanded && styles.modifiers.expanded,\n        className\n      )}\n      aria-label={ariaLabel}\n      ref={navRef}\n      {...props}\n    >\n      <div className={styles.jumpLinksMain}>\n        <div className={css('pf-c-jump-links__header')}>\n          {expandable && (\n            <div className={styles.jumpLinksToggle}>\n              <Button\n                variant=\"plain\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                aria-label={toggleAriaLabel}\n                aria-expanded={isExpanded}\n              >\n                <span className={styles.jumpLinksToggleIcon}>\n                  <AngleRightIcon />\n                </span>\n                {label && <span className={css(styles.jumpLinksToggleText)}> {label} </span>}\n              </Button>\n            </div>\n          )}\n          {label && alwaysShowLabel && <div className={css(styles.jumpLinksLabel)}>{label}</div>}\n        </div>\n        <ul className={styles.jumpLinksList}>{cloneChildren(children)}</ul>\n      </div>\n    </nav>\n  );\n};\nJumpLinks.displayName = 'JumpLinks';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}