{"ast":null,"code":"import { canUseDOM } from './util';\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * Example 3 - With debounced method passed in:\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, debounce(this.handleResize, 250), false);\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @param {boolean} useRequestAnimationFrame Whether to pass the handleResize function as a callback to requestAnimationFrame. Pass in false when the function passed in is debounced. Defaults to true.\n * @return {Function} The function used to unobserve resize events\n */\nexport const getResizeObserver = function (containerRefElement, handleResize) {\n  let useRequestAnimationFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let unobserve;\n  if (canUseDOM) {\n    const {\n      ResizeObserver\n    } = window;\n    if (containerRefElement && ResizeObserver) {\n      const resizeObserver = new ResizeObserver(entries => {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        if (useRequestAnimationFrame) {\n          window.requestAnimationFrame(() => {\n            if (Array.isArray(entries) && entries.length > 0) {\n              handleResize();\n            }\n          });\n          // Avoid wrapping function in requestAnimationFrame if the function is debounced\n        } else {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        }\n      });\n      resizeObserver.observe(containerRefElement);\n      unobserve = () => resizeObserver.unobserve(containerRefElement);\n    } else {\n      window.addEventListener('resize', handleResize);\n      unobserve = () => window.removeEventListener('resize', handleResize);\n    }\n  }\n  return () => {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};","map":{"version":3,"names":["canUseDOM","getResizeObserver","containerRefElement","handleResize","useRequestAnimationFrame","arguments","length","undefined","unobserve","ResizeObserver","window","resizeObserver","entries","requestAnimationFrame","Array","isArray","observe","addEventListener","removeEventListener"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\helpers\\resizeObserver.tsx"],"sourcesContent":["import { canUseDOM } from './util';\n\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * Example 3 - With debounced method passed in:\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, debounce(this.handleResize, 250), false);\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @param {boolean} useRequestAnimationFrame Whether to pass the handleResize function as a callback to requestAnimationFrame. Pass in false when the function passed in is debounced. Defaults to true.\n * @return {Function} The function used to unobserve resize events\n */\nexport const getResizeObserver = (\n  containerRefElement: Element,\n  handleResize: () => void,\n  useRequestAnimationFrame: boolean = true\n) => {\n  let unobserve: any;\n\n  if (canUseDOM) {\n    const { ResizeObserver } = window as any;\n\n    if (containerRefElement && ResizeObserver) {\n      const resizeObserver = new ResizeObserver((entries: any) => {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        if (useRequestAnimationFrame) {\n          window.requestAnimationFrame(() => {\n            if (Array.isArray(entries) && entries.length > 0) {\n              handleResize();\n            }\n          });\n          // Avoid wrapping function in requestAnimationFrame if the function is debounced\n        } else {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        }\n      });\n      resizeObserver.observe(containerRefElement);\n      unobserve = () => resizeObserver.unobserve(containerRefElement);\n    } else {\n      window.addEventListener('resize', handleResize);\n      unobserve = () => window.removeEventListener('resize', handleResize);\n    }\n  }\n  return () => {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,QAAQ;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,OAAO,MAAMC,iBAAiB,GAAG,SAAAA,CAC/BC,mBAA4B,EAC5BC,YAAwB,EAEtB;EAAA,IADFC,wBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoC,IAAI;EAExC,IAAIG,SAAc;EAElB,IAAIR,SAAS,EAAE;IACb,MAAM;MAAES;IAAc,CAAE,GAAGC,MAAa;IAExC,IAAIR,mBAAmB,IAAIO,cAAc,EAAE;MACzC,MAAME,cAAc,GAAG,IAAIF,cAAc,CAAEG,OAAY,IAAI;QACzD;QACA,IAAIR,wBAAwB,EAAE;UAC5BM,MAAM,CAACG,qBAAqB,CAAC,MAAK;YAChC,IAAIC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,IAAIA,OAAO,CAACN,MAAM,GAAG,CAAC,EAAE;cAChDH,YAAY,EAAE;;UAElB,CAAC,CAAC;UACF;SACD,MAAM;UACL,IAAIW,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,IAAIA,OAAO,CAACN,MAAM,GAAG,CAAC,EAAE;YAChDH,YAAY,EAAE;;;MAGpB,CAAC,CAAC;MACFQ,cAAc,CAACK,OAAO,CAACd,mBAAmB,CAAC;MAC3CM,SAAS,GAAGA,CAAA,KAAMG,cAAc,CAACH,SAAS,CAACN,mBAAmB,CAAC;KAChE,MAAM;MACLQ,MAAM,CAACO,gBAAgB,CAAC,QAAQ,EAAEd,YAAY,CAAC;MAC/CK,SAAS,GAAGA,CAAA,KAAME,MAAM,CAACQ,mBAAmB,CAAC,QAAQ,EAAEf,YAAY,CAAC;;;EAGxE,OAAO,MAAK;IACV,IAAIK,SAAS,EAAE;MACbA,SAAS,EAAE;;EAEf,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}