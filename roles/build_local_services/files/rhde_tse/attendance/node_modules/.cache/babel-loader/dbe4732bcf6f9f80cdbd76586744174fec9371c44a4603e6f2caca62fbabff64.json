{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { ProgressContainer, ProgressMeasureLocation } from './ProgressContainer';\nimport { getUniqueId } from '../../helpers/util';\nexport var ProgressSize;\n(function (ProgressSize) {\n  ProgressSize[\"sm\"] = \"sm\";\n  ProgressSize[\"md\"] = \"md\";\n  ProgressSize[\"lg\"] = \"lg\";\n})(ProgressSize || (ProgressSize = {}));\nexport class Progress extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.id = this.props.id || getUniqueId();\n  }\n  render() {\n    const _a = this.props,\n      {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        id,\n        size,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        className,\n        value,\n        title,\n        label,\n        variant,\n        measureLocation,\n        min,\n        max,\n        valueText,\n        isTitleTruncated,\n        tooltipPosition,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        helperText\n      } = _a,\n      props = __rest(_a, [\"id\", \"size\", \"className\", \"value\", \"title\", \"label\", \"variant\", \"measureLocation\", \"min\", \"max\", \"valueText\", \"isTitleTruncated\", \"tooltipPosition\", 'aria-label', 'aria-labelledby', \"helperText\"]);\n    const progressBarAriaProps = {\n      'aria-valuemin': min,\n      'aria-valuenow': value,\n      'aria-valuemax': max\n    };\n    if (title || ariaLabelledBy) {\n      progressBarAriaProps['aria-labelledby'] = title ? `${this.id}-description` : ariaLabelledBy;\n    }\n    if (ariaLabel) {\n      progressBarAriaProps['aria-label'] = ariaLabel;\n    }\n    if (valueText) {\n      progressBarAriaProps['aria-valuetext'] = valueText;\n    }\n    if (!title && !ariaLabelledBy && !ariaLabel) {\n      /* eslint-disable no-console */\n      console.warn('One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.');\n    }\n    const scaledValue = Math.min(100, Math.max(0, Math.floor((value - min) / (max - min) * 100))) || 0;\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.progress, styles.modifiers[variant], ['inside', 'outside'].includes(measureLocation) && styles.modifiers[measureLocation], measureLocation === 'inside' ? styles.modifiers[ProgressSize.lg] : styles.modifiers[size], !title && styles.modifiers.singleline, className),\n      id: this.id\n    }), React.createElement(ProgressContainer, {\n      parentId: this.id,\n      value: scaledValue,\n      title: title,\n      label: label,\n      variant: variant,\n      measureLocation: measureLocation,\n      progressBarAriaProps: progressBarAriaProps,\n      isTitleTruncated: isTitleTruncated,\n      tooltipPosition: tooltipPosition,\n      helperText: helperText\n    }));\n  }\n}\nProgress.displayName = 'Progress';\nProgress.defaultProps = {\n  className: '',\n  measureLocation: ProgressMeasureLocation.top,\n  variant: null,\n  id: '',\n  title: '',\n  min: 0,\n  max: 100,\n  size: null,\n  label: null,\n  value: 0,\n  valueText: null,\n  isTitleTruncated: false,\n  tooltipPosition: 'top',\n  'aria-label': null,\n  'aria-labelledby': null\n};","map":{"version":3,"names":["React","styles","css","ProgressContainer","ProgressMeasureLocation","getUniqueId","ProgressSize","Progress","Component","constructor","id","props","render","_a","size","className","value","title","label","variant","measureLocation","min","max","valueText","isTitleTruncated","tooltipPosition","ariaLabel","ariaLabelledBy","helperText","__rest","progressBarAriaProps","console","warn","scaledValue","Math","floor","createElement","Object","assign","progress","modifiers","includes","lg","singleline","parentId","displayName","defaultProps","top"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Progress\\Progress.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { ProgressContainer, ProgressMeasureLocation } from './ProgressContainer';\nimport { AriaProps } from './ProgressBar';\nimport { getUniqueId } from '../../helpers/util';\n\nexport enum ProgressSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg'\n}\n\nexport interface ProgressProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'label' | 'title'> {\n  /** Classname for progress component. */\n  className?: string;\n  /** Size variant of progress. */\n  size?: 'sm' | 'md' | 'lg';\n  /** Where the measure percent will be located. */\n  measureLocation?: 'outside' | 'inside' | 'top' | 'none';\n  /** Status variant of progress. */\n  variant?: 'danger' | 'success' | 'warning';\n  /** Title above progress. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually. */\n  title?: React.ReactNode;\n  /** Text description of current progress value to display instead of percentage. */\n  label?: React.ReactNode;\n  /** Actual value of progress. */\n  value?: number;\n  /** DOM id for progress component. */\n  id?: string;\n  /** Minimal value of progress. */\n  min?: number;\n  /** Maximum value of progress. */\n  max?: number;\n  /** Accessible text description of current progress value, for when value is not a percentage. Use with label. */\n  valueText?: string;\n  /** Indicate whether to truncate the string title */\n  isTitleTruncated?: boolean;\n  /** Position of the tooltip which is displayed if title is truncated */\n  tooltipPosition?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /** Adds accessible text to the ProgressBar. Required when title not used and there is not any label associated with the progress bar */\n  'aria-label'?: string;\n  /** Associates the ProgressBar with it's label for accessibility purposes. Required when title not used */\n  'aria-labelledby'?: string;\n  /** @beta Content which can be used to convey additional information about the progress component.\n   * We recommend the helper text component as it was designed for this purpose.\n   */\n  helperText?: React.ReactNode;\n}\n\nexport class Progress extends React.Component<ProgressProps> {\n  static displayName = 'Progress';\n  static defaultProps: ProgressProps = {\n    className: '',\n    measureLocation: ProgressMeasureLocation.top,\n    variant: null,\n    id: '',\n    title: '',\n    min: 0,\n    max: 100,\n    size: null as ProgressSize,\n    label: null as React.ReactNode,\n    value: 0,\n    valueText: null as string,\n    isTitleTruncated: false,\n    tooltipPosition: 'top' as 'auto' | 'top' | 'bottom' | 'left' | 'right',\n    'aria-label': null as string,\n    'aria-labelledby': null as string\n  };\n\n  id = this.props.id || getUniqueId();\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      id,\n      size,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      className,\n      value,\n      title,\n      label,\n      variant,\n      measureLocation,\n      min,\n      max,\n      valueText,\n      isTitleTruncated,\n      tooltipPosition,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      helperText,\n      ...props\n    } = this.props;\n\n    const progressBarAriaProps: AriaProps = {\n      'aria-valuemin': min,\n      'aria-valuenow': value,\n      'aria-valuemax': max\n    };\n\n    if (title || ariaLabelledBy) {\n      progressBarAriaProps['aria-labelledby'] = title ? `${this.id}-description` : ariaLabelledBy;\n    }\n\n    if (ariaLabel) {\n      progressBarAriaProps['aria-label'] = ariaLabel;\n    }\n\n    if (valueText) {\n      progressBarAriaProps['aria-valuetext'] = valueText;\n    }\n\n    if (!title && !ariaLabelledBy && !ariaLabel) {\n      /* eslint-disable no-console */\n      console.warn(\n        'One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.'\n      );\n    }\n\n    const scaledValue = Math.min(100, Math.max(0, Math.floor(((value - min) / (max - min)) * 100))) || 0;\n    return (\n      <div\n        {...props}\n        className={css(\n          styles.progress,\n          styles.modifiers[variant],\n          ['inside', 'outside'].includes(measureLocation) && styles.modifiers[measureLocation as 'inside' | 'outside'],\n          measureLocation === 'inside' ? styles.modifiers[ProgressSize.lg] : styles.modifiers[size as 'sm' | 'lg'],\n          !title && styles.modifiers.singleline,\n          className\n        )}\n        id={this.id}\n      >\n        <ProgressContainer\n          parentId={this.id}\n          value={scaledValue}\n          title={title}\n          label={label}\n          variant={variant}\n          measureLocation={measureLocation}\n          progressBarAriaProps={progressBarAriaProps}\n          isTitleTruncated={isTitleTruncated}\n          tooltipPosition={tooltipPosition}\n          helperText={helperText}\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}