{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { PageContextConsumer } from './PageContext';\nexport const pageSidebarContextDefaults = {\n  isNavOpen: true\n};\nexport const PageSidebarContext = React.createContext(pageSidebarContextDefaults);\nexport const PageSidebar = _a => {\n  var {\n      className = '',\n      nav,\n      isNavOpen = true,\n      theme = 'dark',\n      id = 'page-sidebar'\n    } = _a,\n    props = __rest(_a, [\"className\", \"nav\", \"isNavOpen\", \"theme\", \"id\"]);\n  return React.createElement(PageContextConsumer, null, _ref => {\n    let {\n      isManagedSidebar,\n      isNavOpen: managedIsNavOpen\n    } = _ref;\n    const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n    return React.createElement(\"div\", Object.assign({\n      id: id,\n      className: css(styles.pageSidebar, theme === 'light' && styles.modifiers.light, navOpen && styles.modifiers.expanded, !navOpen && styles.modifiers.collapsed, className),\n      \"aria-hidden\": !navOpen\n    }, props), React.createElement(\"div\", {\n      className: css(styles.pageSidebarBody)\n    }, React.createElement(PageSidebarContext.Provider, {\n      value: {\n        isNavOpen: navOpen\n      }\n    }, nav)));\n  });\n};\nPageSidebar.displayName = 'PageSidebar';","map":{"version":3,"names":["React","styles","css","PageContextConsumer","pageSidebarContextDefaults","isNavOpen","PageSidebarContext","createContext","PageSidebar","_a","className","nav","theme","id","props","__rest","createElement","_ref","isManagedSidebar","managedIsNavOpen","navOpen","Object","assign","pageSidebar","modifiers","light","expanded","collapsed","pageSidebarBody","Provider","value","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Page\\PageSidebar.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { PageContextConsumer } from './PageContext';\n\nexport interface PageSidebarProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the page sidebar */\n  className?: string;\n  /** Component to render the side navigation (e.g. <Nav /> */\n  nav?: React.ReactNode;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Programmatically manage if the side nav is shown, if isManagedSidebar is set to true in the Page component, this prop is managed */\n  isNavOpen?: boolean;\n  /** Indicates the color scheme of the sidebar */\n  theme?: 'dark' | 'light';\n  /** Sidebar id */\n  id?: string;\n}\n\nexport interface PageSidebarContextProps {\n  isNavOpen: boolean;\n}\nexport const pageSidebarContextDefaults: PageSidebarContextProps = {\n  isNavOpen: true\n};\nexport const PageSidebarContext = React.createContext<Partial<PageSidebarContextProps>>(pageSidebarContextDefaults);\n\nexport const PageSidebar: React.FunctionComponent<PageSidebarProps> = ({\n  className = '',\n  nav,\n  isNavOpen = true,\n  theme = 'dark',\n  id = 'page-sidebar',\n  ...props\n}: PageSidebarProps) => (\n  <PageContextConsumer>\n    {({ isManagedSidebar, isNavOpen: managedIsNavOpen }: PageSidebarProps) => {\n      const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n      return (\n        <div\n          id={id}\n          className={css(\n            styles.pageSidebar,\n            theme === 'light' && styles.modifiers.light,\n            navOpen && styles.modifiers.expanded,\n            !navOpen && styles.modifiers.collapsed,\n            className\n          )}\n          aria-hidden={!navOpen}\n          {...props}\n        >\n          <div className={css(styles.pageSidebarBody)}>\n            <PageSidebarContext.Provider value={{ isNavOpen: navOpen }}>{nav}</PageSidebarContext.Provider>\n          </div>\n        </div>\n      );\n    }}\n  </PageContextConsumer>\n);\nPageSidebar.displayName = 'PageSidebar';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,mDAAmD;AACtE,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,mBAAmB,QAAQ,eAAe;AAuBnD,OAAO,MAAMC,0BAA0B,GAA4B;EACjEC,SAAS,EAAE;CACZ;AACD,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAa,CAAmCH,0BAA0B,CAAC;AAEnH,OAAO,MAAMI,WAAW,GAA+CC,EAOpD,IAAI;MAPgD;MACrEC,SAAS,GAAG,EAAE;MACdC,GAAG;MACHN,SAAS,GAAG,IAAI;MAChBO,KAAK,GAAG,MAAM;MACdC,EAAE,GAAG;IAAc,IAAAJ,EAEF;IADdK,KAAK,GAAAC,MAAA,CAAAN,EAAA,EAN6D,gDAOtE,CADS;EACc,OACtBT,KAAA,CAAAgB,aAAA,CAACb,mBAAmB,QACjBc,IAAA,IAAwE;IAAA,IAAvE;MAAEC,gBAAgB;MAAEb,SAAS,EAAEc;IAAgB,CAAoB,GAAAF,IAAA;IACnE,MAAMG,OAAO,GAAGF,gBAAgB,GAAGC,gBAAgB,GAAGd,SAAS;IAE/D,OACEL,KAAA,CAAAgB,aAAA,QAAAK,MAAA,CAAAC,MAAA;MACET,EAAE,EAAEA,EAAE;MACNH,SAAS,EAAER,GAAG,CACZD,MAAM,CAACsB,WAAW,EAClBX,KAAK,KAAK,OAAO,IAAIX,MAAM,CAACuB,SAAS,CAACC,KAAK,EAC3CL,OAAO,IAAInB,MAAM,CAACuB,SAAS,CAACE,QAAQ,EACpC,CAACN,OAAO,IAAInB,MAAM,CAACuB,SAAS,CAACG,SAAS,EACtCjB,SAAS,CACV;MAAA,eACY,CAACU;IAAO,GACjBN,KAAK,GAETd,KAAA,CAAAgB,aAAA;MAAKN,SAAS,EAAER,GAAG,CAACD,MAAM,CAAC2B,eAAe;IAAC,GACzC5B,KAAA,CAAAgB,aAAA,CAACV,kBAAkB,CAACuB,QAAQ;MAACC,KAAK,EAAE;QAAEzB,SAAS,EAAEe;MAAO;IAAE,GAAGT,GAAG,CAA+B,CAC3F,CACF;EAEV,CAAC,CACmB;CACvB;AACDH,WAAW,CAACuB,WAAW,GAAG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}