{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStateIcon = _a => {\n  var {\n      className = '',\n      icon: IconComponent,\n      component: AnyComponent,\n      variant = 'icon'\n    } = _a,\n    props = __rest(_a, [\"className\", \"icon\", \"component\", \"variant\"]);\n  const classNames = css(styles.emptyStateIcon, className);\n  return variant === 'icon' ? React.createElement(IconComponent, Object.assign({\n    className: classNames\n  }, props, {\n    \"aria-hidden\": \"true\"\n  })) : React.createElement(\"div\", {\n    className: classNames\n  }, React.createElement(AnyComponent, null));\n};\nEmptyStateIcon.displayName = 'EmptyStateIcon';","map":{"version":3,"names":["React","css","styles","EmptyStateIcon","_a","className","icon","IconComponent","component","AnyComponent","variant","props","__rest","classNames","emptyStateIcon","createElement","Object","assign","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\EmptyState\\EmptyStateIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\n\nexport interface IconProps extends Omit<React.HTMLProps<SVGElement>, 'size'> {\n  /** Changes the color of the icon.  */\n  color?: string;\n}\n\nexport interface EmptyStateIconProps extends IconProps {\n  /** Additional classes added to the EmptyState */\n  className?: string;\n  /** Icon component to be rendered inside the EmptyState on icon variant\n   * Usually a CheckCircleIcon, ExclamationCircleIcon, LockIcon, PlusCircleIcon, RocketIcon\n   * SearchIcon, or WrenchIcon */\n  icon?: React.ComponentType<any>;\n  /** Component to be rendered inside the EmptyState on container variant */\n  component?: React.ComponentType<any>;\n  /** Adds empty state icon variant styles  */\n  variant?: 'icon' | 'container';\n}\n\nexport const EmptyStateIcon: React.FunctionComponent<EmptyStateIconProps> = ({\n  className = '',\n  icon: IconComponent,\n  component: AnyComponent,\n  variant = 'icon',\n  ...props\n}: EmptyStateIconProps) => {\n  const classNames = css(styles.emptyStateIcon, className);\n  return variant === 'icon' ? (\n    <IconComponent className={classNames} {...props} aria-hidden=\"true\" />\n  ) : (\n    <div className={classNames}>\n      <AnyComponent />\n    </div>\n  );\n};\nEmptyStateIcon.displayName = 'EmptyStateIcon';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,gEAAgE;AAoBnF,OAAO,MAAMC,cAAc,GAAkDC,EAMvD,IAAI;MANmD;MAC3EC,SAAS,GAAG,EAAE;MACdC,IAAI,EAAEC,aAAa;MACnBC,SAAS,EAAEC,YAAY;MACvBC,OAAO,GAAG;IAAM,IAAAN,EAEI;IADjBO,KAAK,GAAAC,MAAA,CAAAR,EAAA,EALmE,6CAM5E,CADS;EAER,MAAMS,UAAU,GAAGZ,GAAG,CAACC,MAAM,CAACY,cAAc,EAAET,SAAS,CAAC;EACxD,OAAOK,OAAO,KAAK,MAAM,GACvBV,KAAA,CAAAe,aAAA,CAACR,aAAa,EAAAS,MAAA,CAAAC,MAAA;IAACZ,SAAS,EAAEQ;EAAU,GAAMF,KAAK;IAAA,eAAc;EAAM,GAAG,GAEtEX,KAAA,CAAAe,aAAA;IAAKV,SAAS,EAAEQ;EAAU,GACxBb,KAAA,CAAAe,aAAA,CAACN,YAAY,OAAG,CAEnB;AACH,CAAC;AACDN,cAAc,CAACe,WAAW,GAAG,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}