{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = _a => {\n  var {\n      children,\n      className,\n      header,\n      isExpandable,\n      isExpanded,\n      onToggle,\n      toggleAriaLabel\n    } = _a,\n    props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n  const headerTitleText = header ? header.props.titleText : null;\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n  }\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className),\n    role: \"group\"\n  }, headerTitleText && {\n    'aria-labelledby': `${header.props.titleText.id}`\n  }, props), isExpandable && React.createElement(GenerateId, {\n    prefix: \"form-field-group-toggle\"\n  }, id => React.createElement(FormFieldGroupToggle, Object.assign({\n    onToggle: onToggle,\n    isExpanded: isExpanded,\n    \"aria-label\": toggleAriaLabel,\n    toggleId: id\n  }, headerTitleText && {\n    'aria-labelledby': `${header.props.titleText.id} ${id}`\n  }))), header && header, (!isExpandable || isExpandable && isExpanded) && React.createElement(\"div\", {\n    className: css(styles.formFieldGroupBody)\n  }, children));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';","map":{"version":3,"names":["React","styles","css","FormFieldGroupToggle","GenerateId","InternalFormFieldGroup","_a","children","className","header","isExpandable","isExpanded","onToggle","toggleAriaLabel","props","__rest","headerTitleText","titleText","console","error","createElement","Object","assign","formFieldGroup","modifiers","expanded","role","id","prefix","toggleId","formFieldGroupBody","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\Form\\InternalFormFieldGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\n\nexport interface InternalFormFieldGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as form field group content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the form field group. */\n  className?: string;\n  /** Form field group header */\n  header?: any;\n  /** Flag indicating if the field group is expandable */\n  isExpandable?: boolean;\n  /** Flag indicate if the form field group is expanded. Modifies the card to be expandable. */\n  isExpanded?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: () => void;\n  /** Aria-label to use on the form field group toggle button */\n  toggleAriaLabel?: string;\n}\n\nexport const InternalFormFieldGroup: React.FunctionComponent<InternalFormFieldGroupProps> = ({\n  children,\n  className,\n  header,\n  isExpandable,\n  isExpanded,\n  onToggle,\n  toggleAriaLabel,\n  ...props\n}: InternalFormFieldGroupProps) => {\n  const headerTitleText = header ? header.props.titleText : null;\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'FormFieldGroupExpandable:',\n      'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible'\n    );\n  }\n  return (\n    <div\n      className={css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className)}\n      role=\"group\"\n      {...(headerTitleText && { 'aria-labelledby': `${header.props.titleText.id}` })}\n      {...props}\n    >\n      {isExpandable && (\n        <GenerateId prefix=\"form-field-group-toggle\">\n          {id => (\n            <FormFieldGroupToggle\n              onToggle={onToggle}\n              isExpanded={isExpanded}\n              aria-label={toggleAriaLabel}\n              toggleId={id}\n              {...(headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })}\n            />\n          )}\n        </GenerateId>\n      )}\n      {header && header}\n      {(!isExpandable || (isExpandable && isExpanded)) && (\n        <div className={css(styles.formFieldGroupBody)}>{children}</div>\n      )}\n    </div>\n  );\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,mDAAmD;AACtE,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,UAAU,QAAQ,eAAe;AAmB1C,OAAO,MAAMC,sBAAsB,GAA0DC,EAS/D,IAAI;MAT2D;MAC3FC,QAAQ;MACRC,SAAS;MACTC,MAAM;MACNC,YAAY;MACZC,UAAU;MACVC,QAAQ;MACRC;IAAe,IAAAP,EAEa;IADzBQ,KAAK,GAAAC,MAAA,CAAAT,EAAA,EARmF,gGAS5F,CADS;EAER,MAAMU,eAAe,GAAGP,MAAM,GAAGA,MAAM,CAACK,KAAK,CAACG,SAAS,GAAG,IAAI;EAC9D,IAAIP,YAAY,IAAI,CAACG,eAAe,IAAI,CAACG,eAAe,EAAE;IACxD;IACAE,OAAO,CAACC,KAAK,CACX,2BAA2B,EAC3B,gHAAgH,CACjH;;EAEH,OACEnB,KAAA,CAAAoB,aAAA,QAAAC,MAAA,CAAAC,MAAA;IACEd,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACsB,cAAc,EAAEZ,UAAU,IAAID,YAAY,IAAIT,MAAM,CAACuB,SAAS,CAACC,QAAQ,EAAEjB,SAAS,CAAC;IACzGkB,IAAI,EAAC;EAAO,GACPV,eAAe,IAAI;IAAE,iBAAiB,EAAE,GAAGP,MAAM,CAACK,KAAK,CAACG,SAAS,CAACU,EAAE;EAAE,CAAE,EACzEb,KAAK,GAERJ,YAAY,IACXV,KAAA,CAAAoB,aAAA,CAAChB,UAAU;IAACwB,MAAM,EAAC;EAAyB,GACzCD,EAAE,IACD3B,KAAA,CAAAoB,aAAA,CAACjB,oBAAoB,EAAAkB,MAAA,CAAAC,MAAA;IACnBV,QAAQ,EAAEA,QAAQ;IAClBD,UAAU,EAAEA,UAAU;IAAA,cACVE,eAAe;IAC3BgB,QAAQ,EAAEF;EAAE,GACPX,eAAe,IAAI;IAAE,iBAAiB,EAAE,GAAGP,MAAM,CAACK,KAAK,CAACG,SAAS,CAACU,EAAE,IAAIA,EAAE;EAAE,CAAG,EAEvF,CAEJ,EACAlB,MAAM,IAAIA,MAAM,EAChB,CAAC,CAACC,YAAY,IAAKA,YAAY,IAAIC,UAAW,KAC7CX,KAAA,CAAAoB,aAAA;IAAKZ,SAAS,EAAEN,GAAG,CAACD,MAAM,CAAC6B,kBAAkB;EAAC,GAAGvB,QAAQ,CAC1D,CACG;AAEV,CAAC;AACDF,sBAAsB,CAAC0B,WAAW,GAAG,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}