{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = _a => {\n  var {\n      isPlain = false,\n      isDisabled = false,\n      isOpen = false,\n      parentId = '',\n      toggleTemplate = React.createElement(React.Fragment, null),\n      hideCaret = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isSplitButton = false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      type,\n      'aria-label': ariaLabel = 'Options menu'\n    } = _a,\n    props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n  return React.createElement(DropdownContext.Consumer, null, _ref => {\n    let {\n      id: contextId\n    } = _ref;\n    return React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n      toggleIndicator: null\n    }, props, {\n      isPlain: isPlain,\n      isOpen: isOpen,\n      isDisabled: isDisabled,\n      isActive: isActive,\n      id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-expanded\": isOpen\n    }, toggleTemplate ? {\n      children: toggleTemplate\n    } : {}));\n  });\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"names":["React","DropdownToggle","DropdownContext","OptionsMenuToggle","_a","isPlain","isDisabled","isOpen","parentId","toggleTemplate","createElement","Fragment","hideCaret","isActive","isSplitButton","type","ariaLabel","props","__rest","Consumer","_ref","id","contextId","Object","assign","toggleIndicator","children","displayName"],"sources":["C:\\work\\Demo\\device-edge-workshops\\roles\\build_local_services\\files\\rhde_tse\\attendance\\node_modules\\@patternfly\\react-core\\src\\components\\OptionsMenu\\OptionsMenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\n\nexport interface OptionsMenuToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  isSplitButton?: boolean;\n  /** Forces display of the active state of the options menu */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** hide the toggle caret */\n  hideCaret?: boolean;\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Internal function to implement enter click */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** @hide Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Content to be rendered in the options menu toggle button */\n  toggleTemplate?: React.ReactNode;\n}\n\nexport const OptionsMenuToggle: React.FunctionComponent<OptionsMenuToggleProps> = ({\n  isPlain = false,\n  isDisabled = false,\n  isOpen = false,\n  parentId = '',\n  toggleTemplate = <React.Fragment />,\n  hideCaret = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isSplitButton = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleProps) => (\n  <DropdownContext.Consumer>\n    {({ id: contextId }) => (\n      <DropdownToggle\n        {...((isPlain || hideCaret) && { toggleIndicator: null })}\n        {...props}\n        isPlain={isPlain}\n        isOpen={isOpen}\n        isDisabled={isDisabled}\n        isActive={isActive}\n        id={parentId ? `${parentId}-toggle` : `${contextId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        {...(toggleTemplate ? { children: toggleTemplate } : {})}\n      />\n    )}\n  </DropdownContext.Consumer>\n);\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,eAAe,QAAQ,aAAa;AA4B7D,OAAO,MAAMC,iBAAiB,GAAqDC,EAe1D,IAAI;MAfsD;MACjFC,OAAO,GAAG,KAAK;MACfC,UAAU,GAAG,KAAK;MAClBC,MAAM,GAAG,KAAK;MACdC,QAAQ,GAAG,EAAE;MACbC,cAAc,GAAGT,KAAA,CAAAU,aAAA,CAACV,KAAK,CAACW,QAAQ,OAAG;MACnCC,SAAS,GAAG,KAAK;MACjB;MACAC,QAAQ,GAAG,KAAK;MAChB;MACAC,aAAa,GAAG,KAAK;MACrB;MACAC,IAAI;MACJ,YAAY,EAAEC,SAAS,GAAG;IAAc,IAAAZ,EAEjB;IADpBa,KAAK,GAAAC,MAAA,CAAAd,EAAA,EAdyE,iIAelF,CADS;EACoB,OAC5BJ,KAAA,CAAAU,aAAA,CAACR,eAAe,CAACiB,QAAQ,QACtBC,IAAA;IAAA,IAAC;MAAEC,EAAE,EAAEC;IAAS,CAAE,GAAAF,IAAA;IAAA,OACjBpB,KAAA,CAAAU,aAAA,CAACT,cAAc,EAAAsB,MAAA,CAAAC,MAAA,KACR,CAACnB,OAAO,IAAIO,SAAS,KAAK;MAAEa,eAAe,EAAE;IAAI,CAAE,EACpDR,KAAK;MACTZ,OAAO,EAAEA,OAAO;MAChBE,MAAM,EAAEA,MAAM;MACdD,UAAU,EAAEA,UAAU;MACtBO,QAAQ,EAAEA,QAAQ;MAClBQ,EAAE,EAAEb,QAAQ,GAAG,GAAGA,QAAQ,SAAS,GAAG,GAAGc,SAAS,SAAS;MAAA,iBAC7C,SAAS;MAAA,cACXN,SAAS;MAAA,iBACNT;IAAM,GAChBE,cAAc,GAAG;MAAEiB,QAAQ,EAAEjB;IAAc,CAAE,GAAG,EAAE,CAAC,CACxD;EAAA,CACH,CACwB;CAC5B;AACDN,iBAAiB,CAACwB,WAAW,GAAG,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}